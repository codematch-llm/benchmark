clone_code_id,base_code_id,task,domain,subdomain,clone_language,clone_type,clone_sub_type,code
z4tt_1_1,z4tt,100 doors,Game Development,Puzzles,python,T1,Identical Clone,"doors = [False] * 100
for i in range(100):
   for j in range(i, 100, i+1):
       doors[j] = not doors[j]
   print(% (i+1), 'open' if doors[i] else 'close')"
z4tt_1_2,z4tt,100 doors,Game Development,Puzzles,python,T1,Different Whitespaces,"doors=[False]*100
for i in range(100):
 for j in range(i,100,i+1):
  doors[j]=not doors[j]
 print((i+1),'open'if doors[i]else'close')"
z4tt_1_3,z4tt,100 doors,Game Development,Puzzles,python,T1,Different Comments,"doors = [False] * 100
for i in range(100):
   for j in range(i, 100, i+1):
       doors[j] = not doors[j]
   print('%d %s' % (i+1, 'open' if doors[i] else 'close'))"
z4tt_1_4,z4tt,100 doors,Game Development,Puzzles,python,T1,Different Formatting,"doors = [False] * 100
for i in range(100):
    for j in range(i, 100, i + 1):
        doors[j] = not doors[j]
    print(i + 1, 'open' if doors[i] else 'close')"
z4tt_2_1,z4tt,100 doors,Game Development,Puzzles,python,T2,Different Variable Names,"entrances = [False] * 100
for index in range(100):
   for count in range(index, 100, index + 1):
       entrances[count] = not entrances[count]
   print(% (index + 1), 'open' if entrances[index] else 'close')"
z4tt_2_2,z4tt,100 doors,Game Development,Puzzles,python,T2,Different Data Types,"doors = bytearray(100)
for i in range(100):
   for j in range(i, 100, i+1):
       doors[j] ^= 1
   print(f""{i+1} open"" if doors[i] else f""{i+1} close"")"
z4tt_2_3,z4tt,100 doors,Game Development,Puzzles,python,T2,Different Function Names,"doors = [False] * 100
for i in range(100):
   for j in range(i, 100, i+1):
       doors[j] = not doors[j]
   print(% (i+1), 'open' if doors[i] else 'close')"
z4tt_3_1,z4tt,100 doors,Game Development,Puzzles,python,T3,Added Statements,"doors = [False] * 100
for i in range(100):
   step = i + 1
   for j in range(i, 100, step):
       doors[j] = not doors[j]
   status = 'open' if doors[i] else 'close'
   print(f""{i+1} is {status}"")"
z4tt_3_2,z4tt,100 doors,Game Development,Puzzles,python,T3,Removed Statements,"doors = [False] * 100
for i in range(100):
   for j in range(i, 100, i+1):
       doors[j] = not doors[j]
   print(i + 1, 'open' if doors[i] else 'close')"
z4tt_3_3,z4tt,100 doors,Game Development,Puzzles,python,T3,Reordered Statements,"doors = [False] * 100
for i in range(100):
   print('%d' % (i+1), 'open' if doors[i] else 'close')
   for j in range(i, 100, i+1):
       doors[j] = not doors[j]"
z4tt_3_4,z4tt,100 doors,Game Development,Puzzles,python,T3,Control Flow Modifications,"doors = [False] * 100
for i in range(100):
   for j in range(100):
       if j % (i + 1) == 0:
           doors[j] = not doors[j]
   state = 'open' if doors[i] else 'close'
   print(f""{i + 1} {state}"")"
z4tt_4_1,z4tt,100 doors,Game Development,Puzzles,python,T4,Same Language,"doors = [False] * 100
for i in range(1, 101):
    for j in range(i-1, 100, i):
        doors[j] = not doors[j]
    status = 'open' if doors[i-1] else 'close'
    print(f""{i} {status}"")"
z4tt_4_2,z4tt,100 doors,Game Development,Puzzles,go,T4,Different Language,"package main

import ""fmt""

func main() {
    doors := [100]bool{}"
z4tt_4_2,z4tt,100 doors,Game Development,Puzzles,java,T4,Different Language,"class HundredDoors {
    public static void main(String[] args) {
        boolean[] doors = new boolean[101];

        for (int i = 1; i < doors.length; i++) {
            for (int j = i; j < doors.length; j += i) {
                doors[j] = !doors[j];
            }
        }

        for (int i = 1; i < doors.length; i++) {
            if (doors[i]) {
                System.out.printf(""Door%d is open.%n"", i);
            }
        }
    }
}"
z4tt_4_2,z4tt,100 doors,Game Development,Puzzles,javascript,T4,Different Language,"var doors=[];
for (var i=0;i<100;i++)
    doors[i]=false;
for (var i=1;i<=100;i++)
    for (var i2=i-1,g;i2<100;i2+=i)
        doors[i2]=!doors[i2];
for (var i=1;i<=100;i++)
    console.log(""Door%d is%s"",i,doors[i-1]?""open"":""closed"")"
z4tt_4_2,z4tt,100 doors,Game Development,Puzzles,php,T4,Different Language,"<?php
for ($i = 1; $i <= 100; $i++) {
	$root = sqrt($i);
	$state = ($root == ceil($root))? 'open' : 'closed';
	echo ;
}
?>"
z4tt_4_2,z4tt,100 doors,Game Development,Puzzles,ruby,T4,Different Language,"doors = Array.new(101,0)
print 
(1..100).step(){ |i|
(i..100).step(i) { |d|
    doors[d] = doors[d]^= 1
    if i == d and doors[d] == 1 then
      print 
    end
  }
}"
vu129_1_1,vu129,100 prisoners,Game Development,Puzzles,python,T1,Identical Clone,"import random

def play_random(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    sampler = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        found = False
        for prisoner in range(100):
            found = False
            for reveal in random.sample(sampler, 50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

def play_optimal(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            found = False
            for go in range(50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

if __name__ == '__main__':
    n = 100_000
    print(, n)
    print(f)
    print(f)"
vu129_1_2,vu129,100 prisoners,Game Development,Puzzles,python,T1,Different Whitespaces,"import random
def play_random(n):
 pardoned = 0
 in_drawer = list(range(100))
 sampler = list(range(100))
 for _round in range(n):
  random.shuffle(in_drawer)
  found = False
  for prisoner in range(100):
   found = False
   for reveal in random.sample(sampler, 50):
    card = in_drawer[reveal]
    if card == prisoner:
     found = True
     break
   if not found:
    break
  if found:
   pardoned += 1
 return pardoned / n * 100   
def play_optimal(n):
 pardoned = 0
 in_drawer = list(range(100))
 for _round in range(n):
  random.shuffle(in_drawer)
  for prisoner in range(100):
   reveal = prisoner
   found = False
   for go in range(50):
    card = in_drawer[reveal]
    if card == prisoner:
     found = True
     break
    reveal = card
   if not found:
    break
  if found:
   pardoned += 1
 return pardoned / n * 100   
if __name__ == '__main__':
 n = 100_000
 print(, n)
 print(f)
 print(f)"
vu129_1_3,vu129,100 prisoners,Game Development,Puzzles,python,T1,Different Comments,"import random

def play_random(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    sampler = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        found = False
        for prisoner in range(100):
            found = False
            for reveal in random.sample(sampler, 50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

def play_optimal(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            found = False
            for go in range(50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

if __name__ == '__main__':
    n = 100_000
    print(play_random(n))
    print(play_optimal(n))"
vu129_1_4,vu129,100 prisoners,Game Development,Puzzles,python,T1,Different Formatting,"import random

def play_random(n):
    pardoned = 0
    in_drawer = list(range(100))
    sampler = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        found = False
        for prisoner in range(100):
            found = False
            for reveal in random.sample(sampler, 50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

def play_optimal(n):
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            found = False
            for go in range(50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

if __name__ == '__main__':
    n = 100_000
    print(play_random(n))
    print(play_optimal(n))"
vu129_2_1,vu129,100 prisoners,Game Development,Puzzles,python,T2,Different Variable Names,"import random

def play_random(num_trials):
    
    saved = 0
    box = list(range(100))
    participants = list(range(100))
    for trial in range(num_trials):
        random.shuffle(box)
        successful = False
        for individual in range(100):
            successful = False
            for pick in random.sample(participants, 50):
                item = box[pick]
                if item == individual:
                    successful = True
                    break
            if not successful:
                break
        if successful:
            saved += 1
    return saved / num_trials * 100   

def play_optimal(num_trials):
    
    saved = 0
    box = list(range(100))
    for trial in range(num_trials):
        random.shuffle(box)
        for individual in range(100):
            pick = individual
            successful = False
            for attempt in range(50):
                item = box[pick]
                if item == individual:
                    successful = True
                    break
                pick = item
            if not successful:
                break
        if successful:
            saved += 1
    return saved / num_trials * 100   

if __name__ == '__main__':
    num_trials = 100_000
    print(num_trials)
    print(play_random(num_trials))
    print(play_optimal(num_trials))"
vu129_2_2,vu129,100 prisoners,Game Development,Puzzles,python,T2,Different Data Types,"import random

def play_random(n: int) -> float:
    
    pardoned: int = 0
    in_drawer: list[int] = list(range(100))
    sampler: list[int] = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        found: bool = False
        for prisoner in range(100):
            found = False
            for reveal in random.sample(sampler, 50):
                card: int = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

def play_optimal(n: int) -> float:
    
    pardoned: int = 0
    in_drawer: list[int] = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal: int = prisoner
            found: bool = False
            for go in range(50):
                card: int = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

if __name__ == '__main__':
    n: int = 100_000
    print(play_random(n))
    print(play_optimal(n))"
vu129_2_3,vu129,100 prisoners,Game Development,Puzzles,python,T2,Different Function Names,"import random

def random_game(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    sampler = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        found = False
        for prisoner in range(100):
            found = False
            for reveal in random.sample(sampler, 50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

def optimal_game(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            found = False
            for go in range(50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

if __name__ == '__main__':
    n = 100_000
    print(random_game(n))
    print(optimal_game(n))"
vu129_3_1,vu129,100 prisoners,Game Development,Puzzles,python,T3,Added Statements,"import random

def play_random(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    sampler = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        found = False
        for prisoner in range(100):
            found = False
            for reveal in random.sample(sampler, 50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

def play_optimal(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            found = False
            for go in range(50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

if __name__ == '__main__':
    n = 100_000
    random_results = play_random(n)
    optimal_results = play_optimal(n)
    print(random_results)
    print(optimal_results)"
vu129_3_2,vu129,100 prisoners,Game Development,Puzzles,python,T3,Removed Statements,"import random

def play_random(n):
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            found = False
            for reveal in random.sample(range(100), 50):
                if in_drawer[reveal] == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

def play_optimal(n):
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            for go in range(50):
                if in_drawer[reveal] == prisoner:
                    pardoned += 1
                    break
                reveal = in_drawer[reveal]
    return pardoned / n * 100   

if __name__ == '__main__':
    n = 100_000
    print(play_random(n))
    print(play_optimal(n))"
vu129_3_3,vu129,100 prisoners,Game Development,Puzzles,python,T3,Reordered Statements,"import random

def play_random(n):
    pardoned = 0
    in_drawer = list(range(100))
    sampler = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            found = False
            for reveal in random.sample(sampler, 50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

def play_optimal(n):
    pardoned = 0
    in_drawer = list(range(100))
    for _round in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            found = False
            for go in range(50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if not found:
                break
        if found:
            pardoned += 1
    return pardoned / n * 100   

if __name__ == '__main__':
    n = 100_000
    print(play_random(n))
    print(play_optimal(n))"
vu129_3_4,vu129,100 prisoners,Game Development,Puzzles,python,T3,Control Flow Modifications,"import random

def play_random(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    sampler = list(range(100))
    for _ in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            found = any(in_drawer[reveal] == prisoner for reveal in random.sample(sampler, 50))
            if not found:
                break
        else:
            pardoned += 1
    return pardoned / n * 100 

def play_optimal(n):
    
    pardoned = 0
    in_drawer = list(range(100))
    for _ in range(n):
        random.shuffle(in_drawer)
        for prisoner in range(100):
            reveal = prisoner
            found = False
            for _ in range(50):
                card = in_drawer[reveal]
                if card == prisoner:
                    found = True
                    break
                reveal = card
            if found:
                continue
            break
        else:
            pardoned += 1
    return pardoned / n * 100 

if __name__ == '__main__':
    n = 100_000
    print(n)
    print(play_random(n))
    print(play_optimal(n))"
vu129_4_1,vu129,100 prisoners,Game Development,Puzzles,python,T4,Same Language,"import random

def simulate_prisoners(strategy, n):
    pardoned = 0
    for _ in range(n):
        in_drawer = list(range(100))
        random.shuffle(in_drawer)
        if strategy(in_drawer):
            pardoned += 1
    return pardoned / n * 100

def random_strategy(in_drawer):
    sampler = list(range(100))
    for prisoner in range(100):
        found = any(in_drawer[reveal] == prisoner for reveal in random.sample(sampler, 50))
        if not found:
            return False
    return True

def optimal_strategy(in_drawer):
    for prisoner in range(100):
        reveal = prisoner
        found = False
        for _ in range(50):
            card = in_drawer[reveal]
            if card == prisoner:
                found = True
                break
            reveal = card
        if not found:
            return False
    return True

if __name__ == '__main__':
    n = 100_000
    print(simulate_prisoners(random_strategy, n))
    print(simulate_prisoners(optimal_strategy, n))"
vu129_4_2,vu129,100 prisoners,Game Development,Puzzles,go,T4,Different Language,"package main

import (
    ""fmt""
    ""math/rand""
    ""time""
)"
vu129_4_2,vu129,100 prisoners,Game Development,Puzzles,java,T4,Different Language,"import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Main {
    private static boolean playOptimal(int n) {
        List<Integer> secretList = IntStream.range(0, n).boxed().collect(Collectors.toList());
        Collections.shuffle(secretList);

        prisoner:
        for (int i = 0; i < secretList.size(); ++i) {
            int prev = i;
            for (int j = 0; j < secretList.size() / 2; ++j) {
                if (secretList.get(prev) == i) {
                    continue prisoner;
                }
                prev = secretList.get(prev);
            }
            return false;
        }
        return true;
    }

    private static boolean playRandom(int n) {
        List<Integer> secretList = IntStream.range(0, n).boxed().collect(Collectors.toList());
        Collections.shuffle(secretList);

        prisoner:
        for (Integer i : secretList) {
            List<Integer> trialList = IntStream.range(0, n).boxed().collect(Collectors.toList());
            Collections.shuffle(trialList);

            for (int j = 0; j < trialList.size() / 2; ++j) {
                if (Objects.equals(trialList.get(j), i)) {
                    continue prisoner;
                }
            }

            return false;
        }
        return true;
    }

    private static double exec(int n, int p, Function<Integer, Boolean> play) {
        int succ = 0;
        for (int i = 0; i < n; ++i) {
            if (play.apply(p)) {
                succ++;
            }
        }
        return (succ * 100.0) / n;
    }

    public static void main(String[] args) {
        final int n = 100_000;
        final int p = 100;
        System.out.printf(""# of executions:%d\n"", n);
        System.out.printf(""Optimal play success rate:%f%%\n"", exec(n, p, Main::playOptimal));
        System.out.printf(""Random play success rate:%f%%\n"", exec(n, p, Main::playRandom));
    }
}"
vu129_4_2,vu129,100 prisoners,Game Development,Puzzles,javascript,T4,Different Language,"const _ = require('lodash');

const numPlays = 100000;

const setupSecrets = () => {"
vu129_4_2,vu129,100 prisoners,Game Development,Puzzles,ruby,T4,Different Language,"prisoners = [*1..100]
N = 10_000
generate_rooms = ->{ [nil]+[*1..100].shuffle }

res = N.times.count do
  rooms = generate_rooms[]
  prisoners.all? {|pr| rooms[1,100].sample(50).include?(pr)}
end
puts  % (res.fdiv(N) * 100)

res = N.times.count do
  rooms = generate_rooms[]
  prisoners.all? do |pr|
    cur_room = pr
    50.times.any? do
      found = (rooms[cur_room] == pr)
      cur_room = rooms[cur_room]
      found
    end
  end
end
puts  % (res.fdiv(N) * 100)"
clr9q_1_1,clr9q,15 puzzle game,Game Development,Puzzles,python,T1,Identical Clone,"''' Structural Game for 15 - Puzzle with different difficulty levels'''
from random import randint


class Puzzle:
    def __init__(self):
        self.items = {}
        self.position = None

    def main_frame(self):
        d = self.items
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[1], d[2], d[3], d[4]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[5], d[6], d[7], d[8]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[9], d[10], d[11], d[12]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[13], d[14], d[15], d[16]))
        print('+-----+-----+-----+-----+')

    def format(self, ch):
        ch = ch.strip()
        if len(ch) == 1:
            return '  ' + ch + '  '
        elif len(ch) == 2:
            return '  ' + ch + ' '
        elif len(ch) == 0:
            return '     '

    def change(self, to):
        fro = self.position
        for a, b in self.items.items():
            if b == self.format(str(to)):
                to = a
                break
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def build_board(self, difficulty):
        for i in range(1, 17):
            self.items[i] = self.format(str(i))
        tmp = 0
        for a, b in self.items.items():
            if b == '  16 ':
                self.items[a] = '     '
                tmp = a
                break
        self.position = tmp
        if difficulty == 0:
            diff = 10
        elif difficulty == 1:
            diff = 50
        else:
            diff = 100
        for _ in range(diff):
            lst = self.valid_moves()
            lst1 = []
            for j in lst:
                lst1.append(int(j.strip()))
            self.change(lst1[randint(0, len(lst1)-1)])

    def valid_moves(self):
        pos = self.position
        if pos in [6, 7, 10, 11]:
            return self.items[pos - 4], self.items[pos - 1],\
                   self.items[pos + 1], self.items[pos + 4]
        elif pos in [5, 9]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos + 1]
        elif pos in [8, 12]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos - 1]
        elif pos in [2, 3]:
            return self.items[pos - 1], self.items[pos + 1], self.items[pos + 4]
        elif pos in [14, 15]:
            return self.items[pos - 1], self.items[pos + 1],\
                  self.items[pos - 4]
        elif pos == 1:
            return self.items[pos + 1], self.items[pos + 4]
        elif pos == 4:
            return self.items[pos - 1], self.items[pos + 4]
        elif pos == 13:
            return self.items[pos + 1], self.items[pos - 4]
        elif pos == 16:
            return self.items[pos - 1], self.items[pos - 4]

    def game_over(self):
        flag = False
        for a, b in self.items.items():
            if b == '     ':
                pass
            else:
                if a == int(b.strip()):
                    flag = True
                else:
                    flag = False
        return flag


g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 '
                        '=> highest 0=> lowest\n')))
g.main_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    lst = g.valid_moves()
    lst1 = []
    for i in lst:
        lst1.append(int(i.strip()))
        print(i.strip(), '\t', end='')
    print()
    x = int(input())
    if x == 0:
        break
    elif x not in lst1:
        print('Wrong move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('You WON')
        break"
clr9q_1_2,clr9q,15 puzzle game,Game Development,Puzzles,python,T1,Different Whitespaces,"'''Structural Game for 15 - Puzzle with different difficulty levels'''
from random import randint


class Puzzle:
 def __init__(self):
  self.items = {}
  self.position = None

 def main_frame(self):
  d = self.items
  print('+-----+-----+-----+-----+')
  print('|%s|%s|%s|%s|' % (d[1], d[2], d[3], d[4]))
  print('+-----+-----+-----+-----+')
  print('|%s|%s|%s|%s|' % (d[5], d[6], d[7], d[8]))
  print('+-----+-----+-----+-----+')
  print('|%s|%s|%s|%s|' % (d[9], d[10], d[11], d[12]))
  print('+-----+-----+-----+-----+')
  print('|%s|%s|%s|%s|' % (d[13], d[14], d[15], d[16]))
  print('+-----+-----+-----+-----+')

 def format(self, ch):
  ch = ch.strip()
  if len(ch) == 1:
   return '  ' + ch + '  '
  elif len(ch) == 2:
   return '  ' + ch + ' '
  elif len(ch) == 0:
   return '     '

 def change(self, to):
  fro = self.position
  for a, b in self.items.items():
   if b == self.format(str(to)):
    to = a
    break
  self.items[fro], self.items[to] = self.items[to], self.items[fro]
  self.position = to

 def build_board(self, difficulty):
  for i in range(1, 17):
   self.items[i] = self.format(str(i))
  tmp = 0
  for a, b in self.items.items():
   if b == '  16 ':
    self.items[a] = '     '
    tmp = a
    break
  self.position = tmp
  if difficulty == 0:
   diff = 10
  elif difficulty == 1:
   diff = 50
  else:
   diff = 100
  for _ in range(diff):
   lst = self.valid_moves()
   lst1 = []
   for j in lst:
    lst1.append(int(j.strip()))
   self.change(lst1[randint(0, len(lst1) - 1)])

 def valid_moves(self):
  pos = self.position
  if pos in [6, 7, 10, 11]:
   return self.items[pos - 4], self.items[pos - 1], \
          self.items[pos + 1], self.items[pos + 4]
  elif pos in [5, 9]:
   return self.items[pos - 4], self.items[pos + 4], \
          self.items[pos + 1]
  elif pos in [8, 12]:
   return self.items[pos - 4], self.items[pos + 4], \
          self.items[pos - 1]
  elif pos in [2, 3]:
   return self.items[pos - 1], self.items[pos + 1], self.items[pos + 4]
  elif pos in [14, 15]:
   return self.items[pos - 1], self.items[pos + 1], \
          self.items[pos - 4]
  elif pos == 1:
   return self.items[pos + 1], self.items[pos + 4]
  elif pos == 4:
   return self.items[pos - 1], self.items[pos + 4]
  elif pos == 13:
   return self.items[pos + 1], self.items[pos - 4]
  elif pos == 16:
   return self.items[pos - 1], self.items[pos - 4]

 def game_over(self):
  flag = False
  for a, b in self.items.items():
   if b == '     ':
    pass
   else:
    if a == int(b.strip()):
     flag = True
    else:
     flag = False
  return flag


g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 '
                        '=> highest 0=> lowest\n')))
g.main_frame()
print('Enter 0 to exit')
while True:
 print('Hello user:\nTo change the position just enter the no. near it')
 lst = g.valid_moves()
 lst1 = []
 for i in lst:
  lst1.append(int(i.strip()))
  print(i.strip(), '\t', end='')
 print()
 x = int(input())
 if x == 0:
  break
 elif x not in lst1:
  print('Wrong move')
 else:
  g.change(x)
 g.main_frame()
 if g.game_over():
  print('You WON')
  break"
clr9q_1_3,clr9q,15 puzzle game,Game Development,Puzzles,python,T1,Different Comments,"from random import randint

class Puzzle:
    def __init__(self):
        self.items = {}
        self.position = None

    def main_frame(self):
        d = self.items
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[1], d[2], d[3], d[4]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[5], d[6], d[7], d[8]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[9], d[10], d[11], d[12]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[13], d[14], d[15], d[16]))
        print('+-----+-----+-----+-----+')

    def format(self, ch):
        ch = ch.strip()
        if len(ch) == 1:
            return '  ' + ch + '  '
        elif len(ch) == 2:
            return '  ' + ch + ' '
        elif len(ch) == 0:
            return '     '

    def change(self, to):
        fro = self.position
        for a, b in self.items.items():
            if b == self.format(str(to)):
                to = a
                break
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def build_board(self, difficulty):
        for i in range(1, 17):
            self.items[i] = self.format(str(i))
        tmp = 0
        for a, b in self.items.items():
            if b == '  16 ':
                self.items[a] = '     '
                tmp = a
                break
        self.position = tmp
        if difficulty == 0:
            diff = 10
        elif difficulty == 1:
            diff = 50
        else:
            diff = 100
        for _ in range(diff):
            lst = self.valid_moves()
            lst1 = []
            for j in lst:
                lst1.append(int(j.strip()))
            self.change(lst1[randint(0, len(lst1)-1)])

    def valid_moves(self):
        pos = self.position
        if pos in [6, 7, 10, 11]:
            return self.items[pos - 4], self.items[pos - 1],\
                   self.items[pos + 1], self.items[pos + 4]
        elif pos in [5, 9]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos + 1]
        elif pos in [8, 12]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos - 1]
        elif pos in [2, 3]:
            return self.items[pos - 1], self.items[pos + 1], self.items[pos + 4]
        elif pos in [14, 15]:
            return self.items[pos - 1], self.items[pos + 1],\
                  self.items[pos - 4]
        elif pos == 1:
            return self.items[pos + 1], self.items[pos + 4]
        elif pos == 4:
            return self.items[pos - 1], self.items[pos + 4]
        elif pos == 13:
            return self.items[pos + 1], self.items[pos - 4]
        elif pos == 16:
            return self.items[pos - 1], self.items[pos - 4]

    def game_over(self):
        flag = False
        for a, b in self.items.items():
            if b == '     ':
                pass
            else:
                if a == int(b.strip()):
                    flag = True
                else:
                    flag = False
        return flag


g = Puzzle()
g.build_board(int(input('Choose your difficulty level: 0, 1, or 2\n2 '
                        '=> hardest 0=> easiest\n')))
g.main_frame()
print('Press 0 to exit')
while True:
    print('Welcome user:\nTo shift a number, simply enter the adjacent number')
    lst = g.valid_moves()
    lst1 = []
    for i in lst:
        lst1.append(int(i.strip()))
        print(i.strip(), '\t', end='')
    print()
    x = int(input())
    if x == 0:
        break
    elif x not in lst1:
        print('Invalid move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('Congratulations, YOU WON!')
        break"
clr9q_1_4,clr9q,15 puzzle game,Game Development,Puzzles,python,T1,Different Formatting,"```python
''' Structural Game for 15 - Puzzle with different difficulty levels'''
from random import randint

class Puzzle:
    def __init__(self):
        self.items = {}
        self.position = None

    def main_frame(self):
        d = self.items
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|' % (d[1], d[2], d[3], d[4]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|' % (d[5], d[6], d[7], d[8]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|' % (d[9], d[10], d[11], d[12]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|' % (d[13], d[14], d[15], d[16]))
        print('+-----+-----+-----+-----+')

    def format(self, ch):
        ch = ch.strip()
        if len(ch) == 1:
            return '  ' + ch + '  '
        elif len(ch) == 2:
            return '  ' + ch + ' '
        elif len(ch) == 0:
            return '     '

    def change(self, to):
        fro = self.position
        for a, b in self.items.items():
            if b == self.format(str(to)):
                to = a
                break
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def build_board(self, difficulty):
        for i in range(1, 17):
            self.items[i] = self.format(str(i))
        tmp = 0
        for a, b in self.items.items():
            if b == '  16 ':
                self.items[a] = '     '
                tmp = a
                break
        self.position = tmp
        if difficulty == 0:
            diff = 10
        elif difficulty == 1:
            diff = 50
        else:
            diff = 100
        for _ in range(diff):
            lst = self.valid_moves()
            lst1 = []
            for j in lst:
                lst1.append(int(j.strip()))
            self.change(lst1[randint(0, len(lst1) - 1)])

    def valid_moves(self):
        pos = self.position
        if pos in [6, 7, 10, 11]:
            return self.items[pos - 4], self.items[pos - 1], \
                   self.items[pos + 1], self.items[pos + 4]
        elif pos in [5, 9]:
            return self.items[pos - 4], self.items[pos + 4], \
                   self.items[pos + 1]
        elif pos in [8, 12]:
            return self.items[pos - 4], self.items[pos + 4], \
                   self.items[pos - 1]
        elif pos in [2, 3]:
            return self.items[pos - 1], self.items[pos + 1], \
                   self.items[pos + 4]
        elif pos in [14, 15]:
            return self.items[pos - 1], self.items[pos + 1], \
                   self.items[pos - 4]
        elif pos == 1:
            return self.items[pos + 1], self.items[pos + 4]
        elif pos == 4:
            return self.items[pos - 1], self.items[pos + 4]
        elif pos == 13:
            return self.items[pos + 1], self.items[pos - 4]
        elif pos == 16:
            return self.items[pos - 1], self.items[pos - 4]

    def game_over(self):
        flag = False
        for a, b in self.items.items():
            if b == '     ':
                pass
            else:
                if a == int(b.strip()):
                    flag = True
                else:
                    flag = False
        return flag


g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 '
                        '=> highest 0=> lowest\n')))
g.main_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    lst = g.valid_moves()
    lst1 = []
    for i in lst:
        lst1.append(int(i.strip()))
        print(i.strip(), '\t', end='')
    print()
    x = int(input())
    if x == 0:
        break
    elif x not in lst1:
        print('Wrong move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('You WON')
        break
```"
clr9q_2_1,clr9q,15 puzzle game,Game Development,Puzzles,python,T2,Different Variable Names,"```python
from random import randint


class Game:
    def __init__(self):
        self.tiles = {}
        self.space = None

    def display_frame(self):
        layout = self.tiles
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (layout[1], layout[2], layout[3], layout[4]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (layout[5], layout[6], layout[7], layout[8]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (layout[9], layout[10], layout[11], layout[12]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (layout[13], layout[14], layout[15], layout[16]))
        print('+-----+-----+-----+-----+')

    def format_tile(self, value):
        value = value.strip()
        if len(value) == 1:
            return '  ' + value + '  '
        elif len(value) == 2:
            return '  ' + value + ' '
        elif len(value) == 0:
            return '     '

    def swap(self, new_position):
        old_position = self.space
        for key, val in self.tiles.items():
            if val == self.format_tile(str(new_position)):
                new_position = key
                break
        self.tiles[old_position], self.tiles[new_position] = self.tiles[new_position], self.tiles[old_position]
        self.space = new_position

    def initialize_board(self, level):
        for idx in range(1, 17):
            self.tiles[idx] = self.format_tile(str(idx))
        empty_index = 0
        for key, val in self.tiles.items():
            if val == '  16 ':
                self.tiles[key] = '     '
                empty_index = key
                break
        self.space = empty_index
        if level == 0:
            moves = 10
        elif level == 1:
            moves = 50
        else:
            moves = 100
        for _ in range(moves):
            possible_moves = self.get_valid_moves()
            valid_positions = []
            for move in possible_moves:
                valid_positions.append(int(move.strip()))
            self.swap(valid_positions[randint(0, len(valid_positions)-1)])

    def get_valid_moves(self):
        pos = self.space
        if pos in [6, 7, 10, 11]:
            return self.tiles[pos - 4], self.tiles[pos - 1],\
                   self.tiles[pos + 1], self.tiles[pos + 4]
        elif pos in [5, 9]:
            return self.tiles[pos - 4], self.tiles[pos + 4],\
                   self.tiles[pos + 1]
        elif pos in [8, 12]:
            return self.tiles[pos - 4], self.tiles[pos + 4],\
                   self.tiles[pos - 1]
        elif pos in [2, 3]:
            return self.tiles[pos - 1], self.tiles[pos + 1], self.tiles[pos + 4]
        elif pos in [14, 15]:
            return self.tiles[pos - 1], self.tiles[pos + 1],\
                  self.tiles[pos - 4]
        elif pos == 1:
            return self.tiles[pos + 1], self.tiles[pos + 4]
        elif pos == 4:
            return self.tiles[pos - 1], self.tiles[pos + 4]
        elif pos == 13:
            return self.tiles[pos + 1], self.tiles[pos - 4]
        elif pos == 16:
            return self.tiles[pos - 1], self.tiles[pos - 4]

    def is_game_over(self):
        completed = False
        for idx, val in self.tiles.items():
            if val == '     ':
                pass
            else:
                if idx == int(val.strip()):
                    completed = True
                else:
                    completed = False
        return completed


puzzle_game = Game()
puzzle_game.initialize_board(int(input('Enter the difficulty: 0 1 2\n2 '
                                        '=> highest 0=> lowest\n')))
puzzle_game.display_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    available_moves = puzzle_game.get_valid_moves()
    valid_positions = []
    for move in available_moves:
        valid_positions.append(int(move.strip()))
        print(move.strip(), '\t', end='')
    print()
    user_input = int(input())
    if user_input == 0:
        break
    elif user_input not in valid_positions:
        print('Wrong move')
    else:
        puzzle_game.swap(user_input)
    puzzle_game.display_frame()
    if puzzle_game.is_game_over():
        print('You WON')
        break
```"
clr9q_2_2,clr9q,15 puzzle game,Game Development,Puzzles,python,T2,Different Data Types,"from random import randint


class Puzzle:
    def __init__(self):
        self.items = list()
        self.position = None

    def main_frame(self):
        d = self.items
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|' % (d[1], d[2], d[3], d[4]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|' % (d[5], d[6], d[7], d[8]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|' % (d[9], d[10], d[11], d[12]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|' % (d[13], d[14], d[15], d[16]))
        print('+-----+-----+-----+-----+')

    def format(self, ch):
        ch = ch.strip()
        if len(ch) == 1:
            return '  ' + ch + '  '
        elif len(ch) == 2:
            return '  ' + ch + ' '
        elif len(ch) == 0:
            return '     '

    def change(self, to):
        fro = self.position
        for a, b in enumerate(self.items):
            if b == self.format(str(to)):
                to = a
                break
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def build_board(self, difficulty):
        for i in range(1, 17):
            self.items.append(self.format(str(i)))
        tmp = 0
        for a, b in enumerate(self.items):
            if b == '  16 ':
                self.items[a] = '     '
                tmp = a
                break
        self.position = tmp
        if difficulty == 0:
            diff = 10
        elif difficulty == 1:
            diff = 50
        else:
            diff = 100
        for _ in range(diff):
            lst = self.valid_moves()
            lst1 = []
            for j in lst:
                lst1.append(int(j.strip()))
            self.change(lst1[randint(0, len(lst1) - 1)])

    def valid_moves(self):
        pos = self.position
        if pos in [6, 7, 10, 11]:
            return self.items[pos - 4], self.items[pos - 1],\
                   self.items[pos + 1], self.items[pos + 4]
        elif pos in [5, 9]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos + 1]
        elif pos in [8, 12]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos - 1]
        elif pos in [2, 3]:
            return self.items[pos - 1], self.items[pos + 1], self.items[pos + 4]
        elif pos in [14, 15]:
            return self.items[pos - 1], self.items[pos + 1],\
                   self.items[pos - 4]
        elif pos == 1:
            return self.items[pos + 1], self.items[pos + 4]
        elif pos == 4:
            return self.items[pos - 1], self.items[pos + 4]
        elif pos == 13:
            return self.items[pos + 1], self.items[pos - 4]
        elif pos == 16:
            return self.items[pos - 1], self.items[pos - 4]

    def game_over(self):
        flag = False
        for a, b in enumerate(self.items):
            if b == '     ':
                pass
            else:
                if a == int(b.strip()):
                    flag = True
                else:
                    flag = False
        return flag


g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 '
                        '=> highest 0=> lowest\n')))
g.main_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    lst = g.valid_moves()
    lst1 = []
    for i in lst:
        lst1.append(int(i.strip()))
        print(i.strip(), '\t', end='')
    print()
    x = int(input())
    if x == 0:
        break
    elif x not in lst1:
        print('Wrong move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('You WON')
        break"
clr9q_2_3,clr9q,15 puzzle game,Game Development,Puzzles,python,T2,Different Function Names,"from random import randint

class GamePuzzle:
    def __init__(self):
        self.items = {}
        self.position = None

    def display_frame(self):
        d = self.items
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[1], d[2], d[3], d[4]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[5], d[6], d[7], d[8]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[9], d[10], d[11], d[12]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[13], d[14], d[15], d[16]))
        print('+-----+-----+-----+-----+')

    def format_item(self, ch):
        ch = ch.strip()
        if len(ch) == 1:
            return '  ' + ch + '  '
        elif len(ch) == 2:
            return '  ' + ch + ' '
        elif len(ch) == 0:
            return '     '

    def swap(self, to):
        fro = self.position
        for a, b in self.items.items():
            if b == self.format_item(str(to)):
                to = a
                break
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def create_board(self, difficulty):
        for i in range(1, 17):
            self.items[i] = self.format_item(str(i))
        tmp = 0
        for a, b in self.items.items():
            if b == '  16 ':
                self.items[a] = '     '
                tmp = a
                break
        self.position = tmp
        if difficulty == 0:
            diff = 10
        elif difficulty == 1:
            diff = 50
        else:
            diff = 100
        for _ in range(diff):
            lst = self.available_moves()
            lst1 = []
            for j in lst:
                lst1.append(int(j.strip()))
            self.swap(lst1[randint(0, len(lst1)-1)])

    def available_moves(self):
        pos = self.position
        if pos in [6, 7, 10, 11]:
            return self.items[pos - 4], self.items[pos - 1],\
                   self.items[pos + 1], self.items[pos + 4]
        elif pos in [5, 9]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos + 1]
        elif pos in [8, 12]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos - 1]
        elif pos in [2, 3]:
            return self.items[pos - 1], self.items[pos + 1], self.items[pos + 4]
        elif pos in [14, 15]:
            return self.items[pos - 1], self.items[pos + 1],\
                  self.items[pos - 4]
        elif pos == 1:
            return self.items[pos + 1], self.items[pos + 4]
        elif pos == 4:
            return self.items[pos - 1], self.items[pos + 4]
        elif pos == 13:
            return self.items[pos + 1], self.items[pos - 4]
        elif pos == 16:
            return self.items[pos - 1], self.items[pos - 4]

    def is_game_over(self):
        flag = False
        for a, b in self.items.items():
            if b == '     ':
                pass
            else:
                if a == int(b.strip()):
                    flag = True
                else:
                    flag = False
        return flag


g = GamePuzzle()
g.create_board(int(input('Enter the difficulty: 0 1 2\n2 '
                        '=> highest 0=> lowest\n')))
g.display_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    lst = g.available_moves()
    lst1 = []
    for i in lst:
        lst1.append(int(i.strip()))
        print(i.strip(), '\t', end='')
    print()
    x = int(input())
    if x == 0:
        break
    elif x not in lst1:
        print('Wrong move')
    else:
        g.swap(x)
    g.display_frame()
    if g.is_game_over():
        print('You WON')
        break"
clr9q_3_1,clr9q,15 puzzle game,Game Development,Puzzles,python,T3,Added Statements,"from random import randint


class Puzzle:
    def __init__(self):
        self.items = {}
        self.position = None

    def main_frame(self):
        d = self.items
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[1], d[2], d[3], d[4]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[5], d[6], d[7], d[8]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[9], d[10], d[11], d[12]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[13], d[14], d[15], d[16]))
        print('+-----+-----+-----+-----+')

    def format(self, ch):
        ch = ch.strip()
        if len(ch) == 1:
            return '  ' + ch + '  '
        elif len(ch) == 2:
            return '  ' + ch + ' '
        elif len(ch) == 0:
            return '     '

    def change(self, to):
        fro = self.position
        for a, b in self.items.items():
            if b == self.format(str(to)):
                to = a
                break
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def build_board(self, difficulty):
        for i in range(1, 17):
            self.items[i] = self.format(str(i))
        tmp = 0
        for a, b in self.items.items():
            if b == '  16 ':
                self.items[a] = '     '
                tmp = a
                break
        self.position = tmp
        if difficulty == 0:
            diff = 10
        elif difficulty == 1:
            diff = 50
        else:
            diff = 100
        for _ in range(diff):
            lst = self.valid_moves()
            lst1 = [int(j.strip()) for j in lst]
            self.change(lst1[randint(0, len(lst1)-1)])

    def valid_moves(self):
        pos = self.position
        if pos in [6, 7, 10, 11]:
            return self.items[pos - 4], self.items[pos - 1],\
                   self.items[pos + 1], self.items[pos + 4]
        elif pos in [5, 9]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos + 1]
        elif pos in [8, 12]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos - 1]
        elif pos in [2, 3]:
            return self.items[pos - 1], self.items[pos + 1], self.items[pos + 4]
        elif pos in [14, 15]:
            return self.items[pos - 1], self.items[pos + 1],\
                  self.items[pos - 4]
        elif pos == 1:
            return self.items[pos + 1], self.items[pos + 4]
        elif pos == 4:
            return self.items[pos - 1], self.items[pos + 4]
        elif pos == 13:
            return self.items[pos + 1], self.items[pos - 4]
        elif pos == 16:
            return self.items[pos - 1], self.items[pos - 4]

    def game_over(self):
        flag = True
        for a, b in self.items.items():
            if b != '     ' and a != int(b.strip()):
                flag = False
                break 
        return flag


g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 '
                        '=> highest 0=> lowest\n')))
g.main_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    lst = g.valid_moves()
    lst1 = [int(i.strip()) for i in lst]
    for i in lst:
        print(i.strip(), '\t', end='')
    print()
    x = int(input())
    if x == 0:
        break
    elif x not in lst1:
        print('Wrong move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('You WON')
        break"
clr9q_3_2,clr9q,15 puzzle game,Game Development,Puzzles,python,T3,Removed Statements,"from random import randint

class Puzzle:
    def __init__(self):
        self.items = {}
        self.position = None

    def main_frame(self):
        d = self.items
        print('+-----+-----+-----+-----+')
        for i in range(1, 17, 4):
            print('|%s|%s|%s|%s|' % (d[i], d[i+1], d[i+2], d[i+3]))
            print('+-----+-----+-----+-----+')

    def format(self, ch):
        if len(ch) == 1:
            return '  ' + ch + '  '
        elif len(ch) == 2:
            return '  ' + ch + ' '
        return '     '

    def change(self, to):
        fro = self.position
        to = next(a for a, b in self.items.items() if b == self.format(str(to)))
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def build_board(self, difficulty):
        for i in range(1, 17):
            self.items[i] = self.format(str(i))
        self.position = next(a for a, b in self.items.items() if b == '  16 ')

        diff = 10 if difficulty == 0 else 50 if difficulty == 1 else 100
        for _ in range(diff):
            lst = self.valid_moves()
            self.change(int(lst[randint(0, len(lst)-1)].strip()))

    def valid_moves(self):
        pos = self.position
        moves = {1: [2, 5], 2: [1, 3, 6], 3: [2, 4, 7], 4: [3, 8],
                 5: [1, 6, 9], 6: [2, 5, 7, 10], 7: [3, 6, 8, 11],
                 8: [4, 7, 12], 9: [5, 10, 13], 10: [6, 9, 11, 14],
                 11: [7, 10, 12, 15], 12: [8, 11, 16], 13: [9, 14],
                 14: [10, 13, 15], 15: [11, 14, 16], 16: [12, 15]}
        return [self.items[x] for x in moves[pos]]

    def game_over(self):
        return all(a == int(b.strip()) for a, b in self.items.items() if b != '     ')

g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 => highest 0=> lowest\n')))
g.main_frame()
while True:
    lst = g.valid_moves()
    print('Hello user:\nTo change the position just enter the no. near it')
    print('\t'.join(i.strip() for i in lst))
    x = int(input())
    if x == 0:
        break
    elif x not in [int(i.strip()) for i in lst]:
        print('Wrong move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('You WON')
        break"
clr9q_3_3,clr9q,15 puzzle game,Game Development,Puzzles,python,T3,Reordered Statements,"```python
from random import randint

class Puzzle:
    def __init__(self):
        self.items = {}
        self.position = None

    def build_board(self, difficulty):
        for i in range(1, 17):
            self.items[i] = self.format(str(i))
        tmp = 0
        for a, b in self.items.items():
            if b == '  16 ':
                self.items[a] = '     '
                tmp = a
                break
        self.position = tmp
        if difficulty == 0:
            diff = 10
        elif difficulty == 1:
            diff = 50
        else:
            diff = 100
        for _ in range(diff):
            lst = self.valid_moves()
            lst1 = []
            for j in lst:
                lst1.append(int(j.strip()))
            self.change(lst1[randint(0, len(lst1)-1)])

    def main_frame(self):
        d = self.items
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[1], d[2], d[3], d[4]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[5], d[6], d[7], d[8]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[9], d[10], d[11], d[12]))
        print('+-----+-----+-----+-----+')
        print('|%s|%s|%s|%s|'% (d[13], d[14], d[15], d[16]))
        print('+-----+-----+-----+-----+')

    def format(self, ch):
        ch = ch.strip()
        if len(ch) == 1:
            return '  ' + ch + '  '
        elif len(ch) == 2:
            return '  ' + ch + ' '
        elif len(ch) == 0:
            return '     '

    def valid_moves(self):
        pos = self.position
        if pos in [6, 7, 10, 11]:
            return self.items[pos - 4], self.items[pos - 1],\
                   self.items[pos + 1], self.items[pos + 4]
        elif pos in [5, 9]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos + 1]
        elif pos in [8, 12]:
            return self.items[pos - 4], self.items[pos + 4],\
                   self.items[pos - 1]
        elif pos in [2, 3]:
            return self.items[pos - 1], self.items[pos + 1], self.items[pos + 4]
        elif pos in [14, 15]:
            return self.items[pos - 1], self.items[pos + 1],\
                  self.items[pos - 4]
        elif pos == 1:
            return self.items[pos + 1], self.items[pos + 4]
        elif pos == 4:
            return self.items[pos - 1], self.items[pos + 4]
        elif pos == 13:
            return self.items[pos + 1], self.items[pos - 4]
        elif pos == 16:
            return self.items[pos - 1], self.items[pos - 4]

    def change(self, to):
        fro = self.position
        for a, b in self.items.items():
            if b == self.format(str(to)):
                to = a
                break
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def game_over(self):
        flag = False
        for a, b in self.items.items():
            if b == '     ':
                pass
            else:
                if a == int(b.strip()):
                    flag = True
                else:
                    flag = False
        return flag

g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 '
                        '=> highest 0=> lowest\n')))
g.main_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    lst = g.valid_moves()
    lst1 = []
    for i in lst:
        lst1.append(int(i.strip()))
        print(i.strip(), '\t', end='')
    print()
    x = int(input())
    if x == 0:
        break
    elif x not in lst1:
        print('Wrong move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('You WON')
        break
```"
clr9q_3_4,clr9q,15 puzzle game,Game Development,Puzzles,python,T3,Control Flow Modifications,"from random import randint

class Puzzle:
    def __init__(self):
        self.items = {}
        self.position = None

    def main_frame(self):
        d = self.items
        for i in range(0, 16, 4):
            print('+-----+-----+-----+-----+')
            print('|%s|%s|%s|%s|' % (d[i + 1], d[i + 2], d[i + 3], d[i + 4]))
        print('+-----+-----+-----+-----+')

    def format(self, ch):
        ch = ch.strip()
        return '  ' + ch + '  ' if len(ch) == 1 else '  ' + ch + ' ' if len(ch) == 2 else '     '

    def change(self, to):
        fro = self.position
        for a, b in self.items.items():
            if b == self.format(str(to)):
                to = a
                break
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def build_board(self, difficulty):
        self.items = {i: self.format(str(i)) for i in range(1, 17)}
        for a in self.items:
            if self.items[a] == '  16 ':
                self.items[a] = '     '
                self.position = a
                break
        diff = 10 if difficulty == 0 else 50 if difficulty == 1 else 100
        for _ in range(diff):
            lst = self.valid_moves()
            self.change(int(lst[randint(0, len(lst) - 1)].strip()))

    def valid_moves(self):
        pos = self.position
        moves = []
        if pos > 4:
            moves.append(self.items[pos - 4])
        if pos % 4 != 1:
            moves.append(self.items[pos - 1])
        if pos % 4 != 0:
            moves.append(self.items[pos + 1])
        if pos < 13:
            moves.append(self.items[pos + 4])
        return moves

    def game_over(self):
        return all(a == int(b.strip()) or b == '     ' for a, b in self.items.items())

g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 => highest 0=> lowest\n')))
g.main_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    lst = g.valid_moves()
    print('\t'.join(str(int(i.strip())) for i in lst))
    x = int(input())
    if x == 0:
        break
    elif x not in list(map(int, (i.strip() for i in lst))):
        print('Wrong move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('You WON')
        break"
clr9q_4_1,clr9q,15 puzzle game,Game Development,Puzzles,python,T4,Same Language,"from random import randint


class Puzzle:
    def __init__(self):
        self.items = {i: self.format(str(i)) for i in range(1, 17)}
        self.position = self.find_blank_position()

    def main_frame(self):
        for row in range(1, 5):
            print('+-----+-----+-----+-----+')
            print('|%s|%s|%s|%s|' % (self.items[row * 4 - 3], self.items[row * 4 - 2], self.items[row * 4 - 1], self.items[row * 4]))
        print('+-----+-----+-----+-----+')

    def format(self, ch):
        return '  ' + ch + ' ' * (3 - len(ch.strip()))

    def change(self, to):
        fro = self.position
        to = next(k for k, v in self.items.items() if v == self.format(str(to)))
        self.items[fro], self.items[to] = self.items[to], self.items[fro]
        self.position = to

    def build_board(self, difficulty):
        self.items[self.position] = '     '
        diff = 10 if difficulty == 0 else (50 if difficulty == 1 else 100)
        for _ in range(diff):
            self.change(randint(1, 16))

    def find_blank_position(self):
        for k, v in self.items.items():
            if v == '     ':
                return k

    def valid_moves(self):
        pos = self.position
        moves = {
            1: [2, 5], 2: [1, 3, 6], 3: [2, 4, 7], 4: [3, 8],
            5: [1, 6, 9], 6: [2, 5, 7, 10], 7: [3, 6, 8, 11], 8: [4, 7, 12],
            9: [5, 10, 13], 10: [6, 9, 11, 14], 11: [7, 10, 12, 15], 12: [8, 11, 16],
            13: [9, 14], 14: [10, 13, 15], 15: [11, 14], 16: [12]
        }
        return [self.items[m] for m in moves[pos]] 

    def game_over(self):
        return all(self.items[i] == self.format(str(i)) for i in range(1, 17) if i != 16)

g = Puzzle()
g.build_board(int(input('Enter the difficulty: 0 1 2\n2 => highest 0=> lowest\n')))
g.main_frame()
print('Enter 0 to exit')
while True:
    print('Hello user:\nTo change the position just enter the no. near it')
    moves = g.valid_moves()
    print(""\t"".join(i.strip() for i in moves))
    x = int(input())
    if x == 0:
        break
    elif x not in map(int, [i.strip() for i in moves]):
        print('Wrong move')
    else:
        g.change(x)
    g.main_frame()
    if g.game_over():
        print('You WON')
        break"
clr9q_4_2,clr9q,15 puzzle game,Game Development,Puzzles,go,T4,Different Language,"package main

import (
	""fmt""
	""math/rand""
	""strings""
	""time""
)

func main() {
	rand.Seed(time.Now().UnixNano())
	p := newPuzzle()
	p.play()
}

type board [16]cell
type cell uint8
type move uint8

const (
	up move = iota
	down
	right
	left
)

func randMove() move { return move(rand.Intn(4)) }

var solvedBoard = board{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0}

func (b *board) String() string {
	var buf strings.Builder
	for i, c := range b {
		if c == 0 {
			buf.WriteString(""  ."")
		} else {
			_, _ = fmt.Fprintf(&buf, ""%3d"", c)
		}
		if i%4 == 3 {
			buf.WriteString(""\n"")
		}
	}
	return buf.String()
}

type puzzle struct {
	board board
	empty int"
clr9q_4_2,clr9q,15 puzzle game,Game Development,Puzzles,java,T4,Different Language,"package fifteenpuzzle;

import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import javax.swing.*;

class FifteenPuzzle extends JPanel {

    private final int side = 4;
    private final int numTiles = side * side - 1;

    private final Random rand = new Random();
    private final int[] tiles = new int[numTiles + 1];
    private final int tileSize;
    private int blankPos;
    private final int margin;
    private final int gridSize;
    private boolean gameOver;

    private FifteenPuzzle() {
        final int dim = 640;

        margin = 80;
        tileSize = (dim - 2 * margin) / side;
        gridSize = tileSize * side;

        setPreferredSize(new Dimension(dim, dim + margin));
        setBackground(Color.WHITE);
        setForeground(new Color(0x6495ED));"
clr9q_4_2,clr9q,15 puzzle game,Game Development,Puzzles,javascript,T4,Different Language,"var board, zx, zy, clicks, possibles, clickCounter, oldzx = -1, oldzy = -1;
function getPossibles() {
    var ii, jj, cx = [-1, 0, 1, 0], cy = [0, -1, 0, 1];
    possibles = [];
    for( var i = 0; i < 4; i++ ) {
        ii = zx + cx[i]; jj = zy + cy[i];
        if( ii < 0 || ii > 3 || jj < 0 || jj > 3 ) continue;
        possibles.push( { x: ii, y: jj } );
    }
}
function updateBtns() {
    var b, v, id;
    for( var j = 0; j < 4; j++ ) {
        for( var i = 0; i < 4; i++ ) {
            id = ""btn"" + ( i + j * 4 );
            b = document.getElementById( id );
            v = board[i][j];
            if( v < 16 ) {
                b.innerHTML = ( """" + v );
                b.className = ""button""
            }
            else {
                b.innerHTML = ( """" );
                b.className = ""empty"";
            }
        }
    }
    clickCounter.innerHTML = ""Clicks: "" + clicks;
}
function shuffle() {
    var v = 0, t; 
    do {
        getPossibles();
        while( true ) {
            t = possibles[Math.floor( Math.random() * possibles.length )];
            console.log( t.x, oldzx, t.y, oldzy )
            if( t.x != oldzx || t.y != oldzy ) break;
        }
        oldzx = zx; oldzy = zy;
        board[zx][zy] = board[t.x][t.y];
        zx = t.x; zy = t.y;
        board[zx][zy] = 16; 
    } while( ++v < 200 );
}
function restart() {
    shuffle();
    clicks = 0;
    updateBtns();
}
function checkFinished() {
    var a = 0;
    for( var j = 0; j < 4; j++ ) {
        for( var i = 0; i < 4; i++ ) {
            if( board[i][j] < a ) return false;
            a = board[i][j];
        }
    }
    return true;
}
function btnHandle( e ) {
    getPossibles();
    var c = e.target.i, r = e.target.j, p = -1;
    for( var i = 0; i < possibles.length; i++ ) {
        if( possibles[i].x == c && possibles[i].y == r ) {
            p = i;
            break;
        }
    }
    if( p > -1 ) {
        clicks++;
        var t = possibles[p];
        board[zx][zy] = board[t.x][t.y];
        zx = t.x; zy = t.y;
        board[zx][zy] = 16;
        updateBtns();
        if( checkFinished() ) {
            setTimeout(function(){ 
                alert( ""WELL DONE!"" );
                restart();
            }, 1);
        }
    }
}
function createBoard() {
    board = new Array( 4 );
    for( var i = 0; i < 4; i++ ) {
        board[i] = new Array( 4 );
    }
    for( var j = 0; j < 4; j++ ) {
        for( var i = 0; i < 4; i++ ) {
            board[i][j] = ( i + j * 4 ) + 1;
        }
    }
    zx = zy = 3; board[zx][zy] = 16;
}
function createBtns() {
    var b, d = document.createElement( ""div"" );
    d.className += ""board"";
    document.body.appendChild( d );
    for( var j = 0; j < 4; j++ ) {
        for( var i = 0; i < 4; i++ ) {
            b = document.createElement( ""button"" );
            b.id = ""btn"" + ( i + j * 4 );
            b.i = i; b.j = j;
            b.addEventListener( ""click"", btnHandle, false );
            b.appendChild( document.createTextNode( """" ) );
            d.appendChild( b );
        }
    }
    clickCounter = document.createElement( ""p"" );
    clickCounter.className += ""txt"";
    document.body.appendChild( clickCounter );
}
function start() {
    createBtns();
    createBoard();
    restart();
}"
clr9q_4_2,clr9q,15 puzzle game,Game Development,Puzzles,php,T4,Different Language,"<?php




session_start([
   => 0,
   => 0,
   => 1,
]);

class Location
{
  protected $column, $row;

  function __construct($column, $row){
    $this->column = $column;
    $this->row = $row;
  }
  function create_neighbor($direction){
    $dx = 0; $dy = 0;
    switch ($direction){
      case 0: case 'left':  $dx = -1; break;
      case 1: case 'right': $dx = +1; break;
      case 2: case 'up':    $dy = -1; break;
      case 3: case 'down':  $dy = +1; break;
    }
    return new Location($this->column + $dx, $this->row + $dy);
  }
  function equals($that){
    return $this->column == $that->column && $this->row == $that->row;
  }
  function is_inside_rectangle($left, $top, $right, $bottom){
    return $left <= $this->column && $this->column <= $right
        && $top <= $this->row && $this->row <= $bottom;
  }
  function is_nearest_neighbor($that){
    $s = abs($this->column - $that->column) + abs($this->row - $that->row);
    return $s == 1;
  }
}

class Tile
{
  protected $index;
  protected $content;
  protected $target_location;
  protected $current_location;

  function __construct($index, $content, $row, $column){
    $this->index = $index;
    $this->content = $content;
    $this->target_location = new Location($row, $column);
    $this->current_location = $this->target_location;
  }
  function get_content(){
    return $this->content;
  }
  function get_index(){
    return $this->index;
  }
  function get_location(){
    return $this->current_location;
  }
  function is_completed(){
    return $this->current_location->equals($this->target_location);
  }
  function is_empty(){
    return $this->content == NULL;
  }
  function is_nearest_neighbor($that){
    $a = $this->current_location;
    $b = $that->current_location;
    return $a->is_nearest_neighbor($b);
  }
  function swap_locations($that){
    $a = $this->current_location;
    $b = $that->current_location;
    $this->current_location = $b;
    $that->current_location = $a;
  }
}

class Model
{
  protected $N;
  protected $M;
  protected $tiles;

  function __construct($N, $M){
    $this->N = $N;
    $this->M = $M;
    $this->tiles[0] = new Tile(0, NULL, $N, $M);
    for ($k = 1; $k < $N * $M; $k++ ){
      $i = 1 + intdiv($k - 1, $M);
      $j = 1 + ($k - 1) % $M;
      $this->tiles[$k] = new Tile($k, (string)$k, $i, $j);
    }
    $number_of_shuffles = 1000;
    $i = 0;
    while ($i < $number_of_shuffles)
      if ($this->move_in_direction(random_int(0, 3)))
        $i++;
  }
  function get_N(){
    return $this->N;
  }
  function get_M(){
    return $this->M;
  }
  function get_tile_by_index($index){
    return $this->tiles[$index];
  }
  function get_tile_at_location($location){
    foreach($this->tiles as $tile)
      if ($location->equals($tile->get_location()))
        return $tile;
    return NULL;
  }
  function is_completed(){
    foreach($this->tiles as $tile)
      if (!$tile->is_completed())
        return FALSE;
    return TRUE;
  }
  function move($tile){
    if ($tile != NULL)
      foreach($this->tiles as $target){
        if ($target->is_empty() && $target->is_nearest_neighbor($tile)){
          $tile->swap_locations($target);
          break;
        }
      }
  }
  function move_in_direction($direction){
    foreach($this->tiles as $tile)
      if ($tile->is_empty())
        break;   
    $location = $tile->get_location()->create_neighbor($direction);
    if ($location->is_inside_rectangle(0, 0, $this->M, $this->N)){
      $tile = $this->get_tile_at_location($location);
      $this->move($tile);
      return TRUE;
    }
    return FALSE;
  }
}

class View
{
  protected $model;

  function __construct($model){
      $this->model = $model;
  }
  function show(){
    $N = $this->model->get_N();
    $M = $this->model->get_M();
    echo ;
    for ($i = 1; $i <= $N; $i++){
      for ($j = 1; $j <= $M; $j++){
        $tile = $this->model->get_tile_at_location(new Location($i, $j));
        $content = $tile->get_content();
        if ($content != NULL)
          echo 
          .    
          .    
          .    ;
        else
          echo ;
      }
      echo ;
    }
    echo ;
    if ($this->model->is_completed()){
      echo ;
      echo ;
      echo ;
    }
  }
}

class Controller
{
  protected $model;
  protected $view;

  function __construct($model, $view){
    $this->model = $model;
    $this->view = $view;
  }
  function run(){
    if (isset($_GET['index'])){
      $index = $_GET['index'];
      $this->model->move($this->model->get_tile_by_index($index));
    }
    $this->view->show();
  }
}
?>

<!DOCTYPE html>
<html lang=><meta charset=>
<head>
  <title>15 puzzle game</title>
  <style>
    .puzzle{width: 4ch; display: inline-block; margin: 0; padding: 0.25ch;}
    span.puzzle{padding: 0.1ch;}
    .end-game{font-size: 400%; color: red;}
  </style>
</head>
<body>
  <p><?php
    if (!isset($_SESSION['model'])){
      $width = 4; $height = 4;
      $model = new Model($width, $height);
    }
    else
      $model = unserialize($_SESSION['model']);
    $view = new View($model);
    $controller = new Controller($model, $view);
    $controller->run();
    $_SESSION['model'] = serialize($model);
  ?></p>
</body>
</html>"
clr9q_4_2,clr9q,15 puzzle game,Game Development,Puzzles,ruby,T4,Different Language,"require 'io/console'

class Board
  SIZE = 4
  RANGE = 0...SIZE

  def initialize
    width = (SIZE*SIZE-1).to_s.size
    @frame = ( + *(width+2)) * SIZE + 
    @form =  * SIZE + 
    @step = 0
    @orign = [*0...SIZE*SIZE].rotate.each_slice(SIZE).to_a.freeze
    @board = @orign.map{|row | row.dup}
    randomize
    draw
    message
    play
  end

  private

  def randomize
    @board[0][0], @board[SIZE-1][SIZE-1] = 0, 1
    @board[SIZE-1][0], @board[0][SIZE-1] = @board[0][SIZE-1], @board[SIZE-1][0]
    x, y, dx, dy = 0, 0, 1, 0
    50.times do
      nx,ny = [[x+dx,y+dy], [x+dy,y-dx], [x-dy,y+dx]]
                .select{|nx,ny| RANGE.include?(nx) and RANGE.include?(ny)}
                .sample
      @board[nx][ny], @board[x][y] = 0, @board[nx][ny]
      x, y, dx, dy = nx, ny, nx-x, ny-y
    end
    @x, @y = x, y 
  end

  def draw
    puts 
    @board.each do |row|
      puts @frame
      puts (@form % row).sub(, )
    end
    puts @frame
    puts 
  end

  DIR = {up: [-1,0], down: [1,0], left: [0,-1], right: [0,1]}
  def move(direction)
    dx, dy = DIR[direction]
    nx, ny = @x + dx, @y + dy
    if RANGE.include?(nx) and RANGE.include?(ny)
      @board[nx][ny], @board[@x][@y] = 0, @board[nx][ny]
      @x, @y = nx, ny
      @step += 1
      draw
    end
  end

  def play
    until @board == @orign
      case  key_in
      when ,  then move(:up)
      when ,  then move(:down)
      when ,  then move(:right)
      when ,  then move(:left)

      when ,,  then exit
      when   then message
      end
    end

    puts 
  end

  def key_in
    input = STDIN.getch
    if input ==  
      2.times {input << STDIN.getch}
    end
    input
  end

  def message
    puts <<~EOM
      Use the arrow-keys or WASD on your keyboard to push board in the given direction.   
      PRESS q TO QUIT (or Ctrl-C or Ctrl-D)
    EOM
  end
end

Board.new"
inmof_1_1,inmof,2048,Game Development,Puzzles,python,T1,Identical Clone,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):    
	char = 
	while char not in actions_dict:    
		char = keyboard.getch()
	return actions_dict[char]

def transpose(field):
	return [list(row) for row in zip(*field)]

def invert(field):
	return [row[::-1] for row in field]

class GameField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.reset()

	def reset(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0 for i in range(self.width)] for j in range(self.height)]
		self.spawn()
		self.spawn()

	def move(self, direction):
		def move_row_left(row):
			def tighten(row): 
				new_row = [i for i in row if i != 0]
				new_row += [0 for i in range(len(row) - len(new_row))]
				return new_row

			def merge(row):
				pair = False
				new_row = []
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					else:
						if i + 1 < len(row) and row[i] == row[i + 1]:
							pair = True
							new_row.append(0)
						else:
							new_row.append(row[i])
				assert len(new_row) == len(row)
				return new_row
			return tighten(merge(tighten(row)))

		moves = {}
		moves['Left']  = lambda field:								\
				[move_row_left(row) for row in field]
		moves['Right'] = lambda field:								\
				invert(moves['Left'](invert(field)))
		moves['Up']    = lambda field:								\
				transpose(moves['Left'](transpose(field)))
		moves['Down']  = lambda field:								\
				transpose(moves['Right'](transpose(field)))

		if direction in moves:
			if self.move_is_possible(direction):
				self.field = moves[direction](self.field)
				self.spawn()
				return True
			else:
				return False

	def is_win(self):
		return any(any(i >= self.win_value for i in row) for row in self.field)

	def is_gameover(self):
		return not any(self.move_is_possible(move) for move in actions)

	def draw(self, screen):
		help_string1 = '(W)Up (S)Down (A)Left (D)Right'
		help_string2 = '     (R)Restart (Q)Exit'
		gameover_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def cast(string):
			screen.addstr(string + '\n')

		def draw_hor_separator():
			top = '' + ('' * self.width + '')[1:]
			mid = '' + ('' * self.width + '')[1:]
			bot = '' + ('' * self.width + '')[1:]
			separator = defaultdict(lambda: mid)
			separator[0], separator[self.height] = top, bot
			if not hasattr(draw_hor_separator, ):
				draw_hor_separator.counter = 0
			cast(separator[draw_hor_separator.counter])
			draw_hor_separator.counter += 1

		def draw_row(row):
			cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '')

		screen.clear()
		cast('SCORE: ' + str(self.score))
		if 0 != self.highscore:
			cast('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_hor_separator()
			draw_row(row)
		draw_hor_separator()
		if self.is_win():
			cast(win_string)
		else:
			if self.is_gameover():
				cast(gameover_string)
			else:
				cast(help_string1)
		cast(help_string2)

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		(i,j) = choice([(i,j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0])
		self.field[i][j] = new_element

	def move_is_possible(self, direction):
		def row_is_left_movable(row): 
			def change(i): 
				if row[i] == 0 and row[i + 1] != 0: 
					return True
				if row[i] != 0 and row[i + 1] == row[i]: 
					return True
				return False
			return any(change(i) for i in range(len(row) - 1))

		check = {}
		check['Left']  = lambda field:								\
				any(row_is_left_movable(row) for row in field)

		check['Right'] = lambda field:								\
				 check['Left'](invert(field))

		check['Up']    = lambda field:								\
				check['Left'](transpose(field))

		check['Down']  = lambda field:								\
				check['Right'](transpose(field))

		if direction in check:
			return check[direction](self.field)
		else:
			return False

def main(stdscr):
	curses.use_default_colors()
	game_field = GameField(win=32)
	state_actions = {} 
	def init():
		game_field.reset()
		return 'Game'

	state_actions['Init'] = init

	def not_game(state):
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		responses = defaultdict(lambda: state)
		responses['Restart'], responses['Exit'] = 'Init', 'Exit'
		return responses[action]

	state_actions['Win'] = lambda: not_game('Win')
	state_actions['Gameover'] = lambda: not_game('Gameover')

	def game():
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if game_field.move(action): 
			if game_field.is_win():
				return 'Win'
			if game_field.is_gameover():
				return 'Gameover'
		return 'Game'

	state_actions['Game'] = game

	state = 'Init'
	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(main)"
inmof_1_2,inmof,2048,Game Development,Puzzles,python,T1,Different Whitespaces,"import curses
from random import randrange, choice
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):
	char = None
	while char not in actions_dict:
		char = keyboard.getch()
	return actions_dict[char]

def transpose(field):
	return [list(row) for row in zip(*field)]

def invert(field):
	return [row[::-1] for row in field]

class GameField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.reset()

	def reset(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0 for i in range(self.width)] for j in range(self.height)]
		self.spawn()
		self.spawn()

	def move(self, direction):
		def move_row_left(row):
			def tighten(row):
				new_row = [i for i in row if i != 0]
				new_row += [0 for i in range(len(row) - len(new_row))]
				return new_row

			def merge(row):
				pair = False
				new_row = []
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					else:
						if i + 1 < len(row) and row[i] == row[i + 1]:
							pair = True
							new_row.append(0)
						else:
							new_row.append(row[i])
				assert len(new_row) == len(row)
				return new_row
			return tighten(merge(tighten(row)))

		moves = {}
		moves['Left']  = lambda field: [move_row_left(row) for row in field]
		moves['Right'] = lambda field: invert(moves['Left'](invert(field)))
		moves['Up']    = lambda field: transpose(moves['Left'](transpose(field)))
		moves['Down']  = lambda field: transpose(moves['Right'](transpose(field)))

		if direction in moves:
			if self.move_is_possible(direction):
				self.field = moves[direction](self.field)
				self.spawn()
				return True
			else:
				return False

	def is_win(self):
		return any(any(i >= self.win_value for i in row) for row in self.field)

	def is_gameover(self):
		return not any(self.move_is_possible(move) for move in actions)

	def draw(self, screen):
		help_string1 = '(W)Up (S)Down (A)Left (D)Right'
		help_string2 = '     (R)Restart (Q)Exit'
		gameover_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def cast(string):
			screen.addstr(string + '\n')

		def draw_hor_separator():
			top = '' + ('' * self.width + '')[1:]
			mid = '' + ('' * self.width + '')[1:]
			bot = '' + ('' * self.width + '')[1:]
			separator = defaultdict(lambda: mid)
			separator[0], separator[self.height] = top, bot
			if not hasattr(draw_hor_separator, ):
				draw_hor_separator.counter = 0
			cast(separator[draw_hor_separator.counter])
			draw_hor_separator.counter += 1

		def draw_row(row):
			cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '')

		screen.clear()
		cast('SCORE: ' + str(self.score))
		if 0 != self.highscore:
			cast('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_hor_separator()
			draw_row(row)
		draw_hor_separator()
		if self.is_win():
			cast(win_string)
		else:
			if self.is_gameover():
				cast(gameover_string)
			else:
				cast(help_string1)
		cast(help_string2)

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		(i,j) = choice([(i,j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0])
		self.field[i][j] = new_element

	def move_is_possible(self, direction):
		def row_is_left_movable(row):
			def change(i):
				if row[i] == 0 and row[i + 1] != 0:
					return True
				if row[i] != 0 and row[i + 1] == row[i]:
					return True
				return False
			return any(change(i) for i in range(len(row) - 1))

		check = {}
		check['Left']  = lambda field: any(row_is_left_movable(row) for row in field)
		check['Right'] = lambda field: check['Left'](invert(field))
		check['Up']    = lambda field: check['Left'](transpose(field))
		check['Down']  = lambda field: check['Right'](transpose(field))

		if direction in check:
			return check[direction](self.field)
		else:
			return False

def main(stdscr):
	curses.use_default_colors()
	game_field = GameField(win=32)
	state_actions = {}
	def init():
		game_field.reset()
		return 'Game'

	state_actions['Init'] = init

	def not_game(state):
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		responses = defaultdict(lambda: state)
		responses['Restart'], responses['Exit'] = 'Init', 'Exit'
		return responses[action]

	state_actions['Win'] = lambda: not_game('Win')
	state_actions['Gameover'] = lambda: not_game('Gameover')

	def game():
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if game_field.move(action):
			if game_field.is_win():
				return 'Win'
			if game_field.is_gameover():
				return 'Gameover'
		return 'Game'

	state_actions['Game'] = game

	state = 'Init'
	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(main)"
inmof_1_3,inmof,2048,Game Development,Puzzles,python,T1,Different Comments,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):    
	char = 
	while char not in actions_dict:    
		char = keyboard.getch()
	return actions_dict[char]

def transpose(field):
	return [list(row) for row in zip(*field)]

def invert(field):
	return [row[::-1] for row in field]

class GameField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.reset()

	def reset(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0 for i in range(self.width)] for j in range(self.height)]
		self.spawn()
		self.spawn()

	def move(self, direction):
		def move_row_left(row):
			def tighten(row): 
				new_row = [i for i in row if i != 0]
				new_row += [0 for i in range(len(row) - len(new_row))]
				return new_row

			def merge(row):
				pair = False
				new_row = []
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					else:
						if i + 1 < len(row) and row[i] == row[i + 1]:
							pair = True
							new_row.append(0)
						else:
							new_row.append(row[i])
				assert len(new_row) == len(row)
				return new_row
			return tighten(merge(tighten(row)))

		moves = {}
		moves['Left']  = lambda field:								\
				[move_row_left(row) for row in field]
		moves['Right'] = lambda field:								\
				invert(moves['Left'](invert(field)))
		moves['Up']    = lambda field:								\
				transpose(moves['Left'](transpose(field)))
		moves['Down']  = lambda field:								\
				transpose(moves['Right'](transpose(field)))

		if direction in moves:
			if self.move_is_possible(direction):
				self.field = moves[direction](self.field)
				self.spawn()
				return True
			else:
				return False

	def is_win(self):
		return any(any(i >= self.win_value for i in row) for row in self.field)

	def is_gameover(self):
		return not any(self.move_is_possible(move) for move in actions)

	def draw(self, screen):
		help_string1 = '(W)Up (S)Down (A)Left (D)Right'
		help_string2 = '     (R)Restart (Q)Exit'
		gameover_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def cast(string):
			screen.addstr(string + '\n')

		def draw_hor_separator():
			top = '' + ('' * self.width + '')[1:]
			mid = '' + ('' * self.width + '')[1:]
			bot = '' + ('' * self.width + '')[1:]
			separator = defaultdict(lambda: mid)
			separator[0], separator[self.height] = top, bot
			if not hasattr(draw_hor_separator, ):
				draw_hor_separator.counter = 0
			cast(separator[draw_hor_separator.counter])
			draw_hor_separator.counter += 1

		def draw_row(row):
			cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '')

		screen.clear()
		cast('SCORE: ' + str(self.score))
		if 0 != self.highscore:
			cast('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_hor_separator()
			draw_row(row)
		draw_hor_separator()
		if self.is_win():
			cast(win_string)
		else:
			if self.is_gameover():
				cast(gameover_string)
			else:
				cast(help_string1)
		cast(help_string2)

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		(i,j) = choice([(i,j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0])
		self.field[i][j] = new_element

	def move_is_possible(self, direction):
		def row_is_left_movable(row): 
			def change(i): 
				if row[i] == 0 and row[i + 1] != 0: 
					return True
				if row[i] != 0 and row[i + 1] == row[i]: 
					return True
				return False
			return any(change(i) for i in range(len(row) - 1))

		check = {}
		check['Left']  = lambda field:								\
				any(row_is_left_movable(row) for row in field)

		check['Right'] = lambda field:								\
				 check['Left'](invert(field))

		check['Up']    = lambda field:								\
				check['Left'](transpose(field))

		check['Down']  = lambda field:								\
				check['Right'](transpose(field))

		if direction in check:
			return check[direction](self.field)
		else:
			return False

def main(stdscr):
	curses.use_default_colors()
	game_field = GameField(win=32)
	state_actions = {} 
	def init():
		game_field.reset()
		return 'Game'

	state_actions['Init'] = init

	def not_game(state):
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		responses = defaultdict(lambda: state)
		responses['Restart'], responses['Exit'] = 'Init', 'Exit'
		return responses[action]

	state_actions['Win'] = lambda: not_game('Win')
	state_actions['Gameover'] = lambda: not_game('Gameover')

	def game():
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if game_field.move(action): 
			if game_field.is_win():
				return 'Win'
			if game_field.is_gameover():
				return 'Gameover'
		return 'Game'

	state_actions['Game'] = game

	state = 'Init'
	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(main)"
inmof_1_4,inmof,2048,Game Development,Puzzles,python,T1,Different Formatting,"import curses
from random import randrange, choice
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):
    char = None
    while char not in actions_dict:
        char = keyboard.getch()
    return actions_dict[char]

def transpose(field):
    return [list(row) for row in zip(*field)]

def invert(field):
    return [row[::-1] for row in field]

class GameField(object):
    def __init__(self, height=4, width=4, win=2048):
        self.height = height
        self.width = width
        self.win_value = win
        self.score = 0
        self.highscore = 0
        self.reset()

    def reset(self):
        if self.score > self.highscore:
            self.highscore = self.score
        self.score = 0
        self.field = [[0 for i in range(self.width)] for j in range(self.height)]
        self.spawn()
        self.spawn()

    def move(self, direction):
        def move_row_left(row):
            def tighten(row):
                new_row = [i for i in row if i != 0]
                new_row += [0 for i in range(len(row) - len(new_row))]
                return new_row

            def merge(row):
                pair = False
                new_row = []
                for i in range(len(row)):
                    if pair:
                        new_row.append(2 * row[i])
                        self.score += 2 * row[i]
                        pair = False
                    else:
                        if i + 1 < len(row) and row[i] == row[i + 1]:
                            pair = True
                            new_row.append(0)
                        else:
                            new_row.append(row[i])
                assert len(new_row) == len(row)
                return new_row
            return tighten(merge(tighten(row)))

        moves = {}
        moves['Left'] = lambda field: [move_row_left(row) for row in field]
        moves['Right'] = lambda field: invert(moves['Left'](invert(field)))
        moves['Up'] = lambda field: transpose(moves['Left'](transpose(field)))
        moves['Down'] = lambda field: transpose(moves['Right'](transpose(field)))

        if direction in moves:
            if self.move_is_possible(direction):
                self.field = moves[direction](self.field)
                self.spawn()
                return True
            else:
                return False

    def is_win(self):
        return any(any(i >= self.win_value for i in row) for row in self.field)

    def is_gameover(self):
        return not any(self.move_is_possible(move) for move in actions)

    def draw(self, screen):
        help_string1 = '(W)Up (S)Down (A)Left (D)Right'
        help_string2 = '     (R)Restart (Q)Exit'
        gameover_string = '           GAME OVER'
        win_string = '          YOU WIN!'

        def cast(string):
            screen.addstr(string + '\n')

        def draw_hor_separator():
            top = '+' + ('-' * self.width + '+')[1:]
            mid = '|' + (' ' * self.width + '|')[1:]
            bot = '+' + ('-' * self.width + '+')[1:]
            separator = defaultdict(lambda: mid)
            separator[0], separator[self.height] = top, bot
            if not hasattr(draw_hor_separator, 'counter'):
                draw_hor_separator.counter = 0
            cast(separator[draw_hor_separator.counter])
            draw_hor_separator.counter += 1

        def draw_row(row):
            cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '|')

        screen.clear()
        cast('SCORE: ' + str(self.score))
        if 0 != self.highscore:
            cast('HIGHSCORE: ' + str(self.highscore))
        for row in self.field:
            draw_hor_separator()
            draw_row(row)
        draw_hor_separator()
        if self.is_win():
            cast(win_string)
        else:
            if self.is_gameover():
                cast(gameover_string)
            else:
                cast(help_string1)
        cast(help_string2)

    def spawn(self):
        new_element = 4 if randrange(100) > 89 else 2
        (i, j) = choice([(i, j) for i in range(self.height) for j in range(self.width) if self.field[i][j] == 0])
        self.field[i][j] = new_element

    def move_is_possible(self, direction):
        def row_is_left_movable(row):
            def change(i):
                if row[i] == 0 and row[i + 1] != 0:
                    return True
                if row[i] != 0 and row[i + 1] == row[i]:
                    return True
                return False
            return any(change(i) for i in range(len(row) - 1))

        check = {}
        check['Left'] = lambda field: any(row_is_left_movable(row) for row in field)
        check['Right'] = lambda field: check['Left'](invert(field))
        check['Up'] = lambda field: check['Left'](transpose(field))
        check['Down'] = lambda field: check['Right'](transpose(field))

        if direction in check:
            return check[direction](self.field)
        else:
            return False

def main(stdscr):
    curses.use_default_colors()
    game_field = GameField(win=32)
    state_actions = {}

    def init():
        game_field.reset()
        return 'Game'

    state_actions['Init'] = init

    def not_game(state):
        game_field.draw(stdscr)
        action = get_user_action(stdscr)
        responses = defaultdict(lambda: state)
        responses['Restart'], responses['Exit'] = 'Init', 'Exit'
        return responses[action]

    state_actions['Win'] = lambda: not_game('Win')
    state_actions['Gameover'] = lambda: not_game('Gameover')

    def game():
        game_field.draw(stdscr)
        action = get_user_action(stdscr)
        if action == 'Restart':
            return 'Init'
        if action == 'Exit':
            return 'Exit'
        if game_field.move(action):
            if game_field.is_win():
                return 'Win'
            if game_field.is_gameover():
                return 'Gameover'
        return 'Game'

    state_actions['Game'] = game

    state = 'Init'
    while state != 'Exit':
        state = state_actions[state]()

curses.wrapper(main)"
inmof_2_1,inmof,2048,Game Development,Puzzles,python,T2,Different Variable Names,"import curses
from random import randrange, choice 
from collections import defaultdict

key_codes = [ord(ch) for ch in 'WASDRQwasdrq']
directions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
direction_map = dict(zip(key_codes, directions * 2))

def get_player_action(keyboard):    
	key_input = 
	while key_input not in direction_map:    
		key_input = keyboard.getch()
	return direction_map[key_input]

def rotate(field):
	return [list(row) for row in zip(*field)]

def reverse(field):
	return [row[::-1] for row in field]

class Board(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.initialize()

	def initialize(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0 for i in range(self.width)] for j in range(self.height)]
		self.create()
		self.create()

	def shift(self, direction):
		def slide_row_left(row):
			def compact(row): 
				new_row = [i for i in row if i != 0]
				new_row += [0 for i in range(len(row) - len(new_row))]
				return new_row

			def combine(row):
				pair = False
				new_row = []
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					else:
						if i + 1 < len(row) and row[i] == row[i + 1]:
							pair = True
							new_row.append(0)
						else:
							new_row.append(row[i])
				assert len(new_row) == len(row)
				return new_row
			return compact(combine(compact(row)))

		shifts = {}
		shifts['Left']  = lambda field:								\
				[slide_row_left(row) for row in field]
		shifts['Right'] = lambda field:								\
				reverse(shifts['Left'](reverse(field)))
		shifts['Up']    = lambda field:								\
				rotate(shifts['Left'](rotate(field)))
		shifts['Down']  = lambda field:								\
				rotate(shifts['Right'](rotate(field)))

		if direction in shifts:
			if self.is_shift_possible(direction):
				self.field = shifts[direction](self.field)
				self.create()
				return True
			else:
				return False

	def is_victory(self):
		return any(any(i >= self.win_value for i in row) for row in self.field)

	def is_over(self):
		return not any(self.is_shift_possible(move) for move in directions)

	def render(self, screen):
		guide_string1 = '(W)Up (S)Down (A)Left (D)Right'
		guide_string2 = '     (R)Restart (Q)Exit'
		game_over_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def display(string):
			screen.addstr(string + '\n')

		def draw_horizontal_separator():
			top = '' + ('' * self.width + '')[1:]
			mid = '' + ('' * self.width + '')[1:]
			bottom = '' + ('' * self.width + '')[1:]
			separator = defaultdict(lambda: mid)
			separator[0], separator[self.height] = top, bottom
			if not hasattr(draw_horizontal_separator, ):
				draw_horizontal_separator.counter = 0
			display(separator[draw_horizontal_separator.counter])
			draw_horizontal_separator.counter += 1

		def draw_row(row):
			display(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '')

		screen.clear()
		display('SCORE: ' + str(self.score))
		if 0 != self.highscore:
			display('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_horizontal_separator()
			draw_row(row)
		draw_horizontal_separator()
		if self.is_victory():
			display(win_string)
		else:
			if self.is_over():
				display(game_over_string)
			else:
				display(guide_string1)
		display(guide_string2)

	def create(self):
		new_tile = 4 if randrange(100) > 89 else 2
		(i,j) = choice([(i,j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0])
		self.field[i][j] = new_tile

	def is_shift_possible(self, direction):
		def row_can_shift_left(row): 
			def alter(i): 
				if row[i] == 0 and row[i + 1] != 0: 
					return True
				if row[i] != 0 and row[i + 1] == row[i]: 
					return True
				return False
			return any(alter(i) for i in range(len(row) - 1))

		checks = {}
		checks['Left']  = lambda field:								\
				any(row_can_shift_left(row) for row in field)

		checks['Right'] = lambda field:								\
				 checks['Left'](reverse(field))

		checks['Up']    = lambda field:								\
				checks['Left'](rotate(field))

		checks['Down']  = lambda field:								\
				checks['Right'](rotate(field))

		if direction in checks:
			return checks[direction](self.field)
		else:
			return False

def run(stdscr):
	curses.use_default_colors()
	game_board = Board(win=32)
	state_map = {} 
	def initialize():
		game_board.initialize()
		return 'Game'

	state_map['Init'] = initialize

	def inactive_game(state):
		game_board.render(stdscr)
		action = get_player_action(stdscr)
		responses = defaultdict(lambda: state)
		responses['Restart'], responses['Exit'] = 'Init', 'Exit'
		return responses[action]

	state_map['Win'] = lambda: inactive_game('Win')
	state_map['Gameover'] = lambda: inactive_game('Gameover')

	def active_game():
		game_board.render(stdscr)
		action = get_player_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if game_board.shift(action): 
			if game_board.is_victory():
				return 'Win'
			if game_board.is_over():
				return 'Gameover'
		return 'Game'

	state_map['Game'] = active_game

	current_state = 'Init'
	while current_state != 'Exit':
		current_state = state_map[current_state]()

curses.wrapper(run)"
inmof_2_2,inmof,2048,Game Development,Puzzles,python,T2,Different Data Types,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):    
	char = None
	while char not in actions_dict:    
		char = keyboard.getch()
	return actions_dict[char]

def transpose(field):
	return [list(row) for row in zip(*field)]

def invert(field):
	return [row[::-1] for row in field]

class GameField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.reset()

	def reset(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0] * self.width for _ in range(self.height)]
		self.spawn()
		self.spawn()

	def move(self, direction):
		def move_row_left(row):
			def tighten(row): 
				new_row = [i for i in row if i != 0]
				new_row += [0] * (len(row) - len(new_row))
				return new_row

			def merge(row):
				pair = False
				new_row = []
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					else:
						if i + 1 < len(row) and row[i] == row[i + 1]:
							pair = True
							new_row.append(0)
						else:
							new_row.append(row[i])
				assert len(new_row) == len(row)
				return new_row
			return tighten(merge(tighten(row)))

		moves = {}
		moves['Left']  = lambda field: [move_row_left(row) for row in field]
		moves['Right'] = lambda field: invert(moves['Left'](invert(field)))
		moves['Up']    = lambda field: transpose(moves['Left'](transpose(field)))
		moves['Down']  = lambda field: transpose(moves['Right'](transpose(field)))

		if direction in moves:
			if self.move_is_possible(direction):
				self.field = moves[direction](self.field)
				self.spawn()
				return True
			else:
				return False

	def is_win(self):
		return any(any(i >= self.win_value for i in row) for row in self.field)

	def is_gameover(self):
		return not any(self.move_is_possible(move) for move in actions)

	def draw(self, screen):
		help_string1 = '(W)Up (S)Down (A)Left (D)Right'
		help_string2 = '     (R)Restart (Q)Exit'
		gameover_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def cast(string):
			screen.addstr(string + '\n')

		def draw_hor_separator():
			top = '' + ('' * self.width + '')[1:]
			mid = '' + ('' * self.width + '')[1:]
			bot = '' + ('' * self.width + '')[1:]
			separator = defaultdict(lambda: mid)
			separator[0], separator[self.height] = top, bot
			if not hasattr(draw_hor_separator, 'counter'):
				draw_hor_separator.counter = 0
			cast(separator[draw_hor_separator.counter])
			draw_hor_separator.counter += 1

		def draw_row(row):
			cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '')

		screen.clear()
		cast('SCORE: ' + str(self.score))
		if 0 != self.highscore:
			cast('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_hor_separator()
			draw_row(row)
		draw_hor_separator()
		if self.is_win():
			cast(win_string)
		else:
			if self.is_gameover():
				cast(gameover_string)
			else:
				cast(help_string1)
		cast(help_string2)

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		(i, j) = choice([(i, j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0])
		self.field[i][j] = new_element

	def move_is_possible(self, direction):
		def row_is_left_movable(row): 
			def change(i): 
				if row[i] == 0 and row[i + 1] != 0: 
					return True
				if row[i] != 0 and row[i + 1] == row[i]: 
					return True
				return False
			return any(change(i) for i in range(len(row) - 1))

		check = {}
		check['Left']  = lambda field: any(row_is_left_movable(row) for row in field)
		check['Right'] = lambda field: check['Left'](invert(field))
		check['Up']    = lambda field: check['Left'](transpose(field))
		check['Down']  = lambda field: check['Right'](transpose(field))

		if direction in check:
			return check[direction](self.field)
		else:
			return False

def main(stdscr):
	curses.use_default_colors()
	game_field = GameField(win=32)
	state_actions = {} 
	def init():
		game_field.reset()
		return 'Game'

	state_actions['Init'] = init

	def not_game(state):
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		responses = defaultdict(lambda: state)
		responses['Restart'], responses['Exit'] = 'Init', 'Exit'
		return responses[action]

	state_actions['Win'] = lambda: not_game('Win')
	state_actions['Gameover'] = lambda: not_game('Gameover')

	def game():
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if game_field.move(action): 
			if game_field.is_win():
				return 'Win'
			if game_field.is_gameover():
				return 'Gameover'
		return 'Game'

	state_actions['Game'] = game

	state = 'Init'
	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(main)"
inmof_2_3,inmof,2048,Game Development,Puzzles,python,T2,Different Function Names,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def fetch_user_action(keyboard):    
	char = 
	while char not in actions_dict:    
		char = keyboard.getch()
	return actions_dict[char]

def rotate(field):
	return [list(row) for row in zip(*field)]

def flip(field):
	return [row[::-1] for row in field]

class PlayField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.reset()

	def reset(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0 for i in range(self.width)] for j in range(self.height)]
		self.spawn()
		self.spawn()

	def shift(self, direction):
		def shift_row_left(row):
			def tighten(row): 
				new_row = [i for i in row if i != 0]
				new_row += [0 for i in range(len(row) - len(new_row))]
				return new_row

			def merge(row):
				pair = False
				new_row = []
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					else:
						if i + 1 < len(row) and row[i] == row[i + 1]:
							pair = True
							new_row.append(0)
						else:
							new_row.append(row[i])
				assert len(new_row) == len(row)
				return new_row
			return tighten(merge(tighten(row)))

		movements = {}
		movements['Left']  = lambda field:								\
				[shift_row_left(row) for row in field]
		movements['Right'] = lambda field:								\
				flip(movements['Left'](flip(field)))
		movements['Up']    = lambda field:								\
				rotate(movements['Left'](rotate(field)))
		movements['Down']  = lambda field:								\
				rotate(movements['Right'](rotate(field)))

		if direction in movements:
			if self.shift_is_possible(direction):
				self.field = movements[direction](self.field)
				self.spawn()
				return True
			else:
				return False

	def is_win(self):
		return any(any(i >= self.win_value for i in row) for row in self.field)

	def is_gameover(self):
		return not any(self.shift_is_possible(move) for move in actions)

	def render(self, screen):
		help_string1 = '(W)Up (S)Down (A)Left (D)Right'
		help_string2 = '     (R)Restart (Q)Exit'
		gameover_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def cast(string):
			screen.addstr(string + '\n')

		def draw_horizontal_separator():
			top = '' + ('' * self.width + '')[1:]
			mid = '' + ('' * self.width + '')[1:]
			bot = '' + ('' * self.width + '')[1:]
			separator = defaultdict(lambda: mid)
			separator[0], separator[self.height] = top, bot
			if not hasattr(draw_horizontal_separator, ):
				draw_horizontal_separator.counter = 0
			cast(separator[draw_horizontal_separator.counter])
			draw_horizontal_separator.counter += 1

		def draw_row(row):
			cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '')

		screen.clear()
		cast('SCORE: ' + str(self.score))
		if 0 != self.highscore:
			cast('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_horizontal_separator()
			draw_row(row)
		draw_horizontal_separator()
		if self.is_win():
			cast(win_string)
		else:
			if self.is_gameover():
				cast(gameover_string)
			else:
				cast(help_string1)
		cast(help_string2)

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		(i,j) = choice([(i,j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0])
		self.field[i][j] = new_element

	def shift_is_possible(self, direction):
		def row_is_left_movable(row): 
			def change(i): 
				if row[i] == 0 and row[i + 1] != 0: 
					return True
				if row[i] != 0 and row[i + 1] == row[i]: 
					return True
				return False
			return any(change(i) for i in range(len(row) - 1))

		check = {}
		check['Left']  = lambda field:								\
				any(row_is_left_movable(row) for row in field)

		check['Right'] = lambda field:								\
				 check['Left'](flip(field))

		check['Up']    = lambda field:								\
				check['Left'](rotate(field))

		check['Down']  = lambda field:								\
				check['Right'](rotate(field))

		if direction in check:
			return check[direction](self.field)
		else:
			return False

def start(stdscr):
	curses.use_default_colors()
	play_field = PlayField(win=32)
	state_actions = {} 
	def init():
		play_field.reset()
		return 'Game'

	state_actions['Init'] = init

	def not_playing(state):
		play_field.render(stdscr)
		action = fetch_user_action(stdscr)
		responses = defaultdict(lambda: state)
		responses['Restart'], responses['Exit'] = 'Init', 'Exit'
		return responses[action]

	state_actions['Win'] = lambda: not_playing('Win')
	state_actions['Gameover'] = lambda: not_playing('Gameover')

	def play():
		play_field.render(stdscr)
		action = fetch_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if play_field.shift(action): 
			if play_field.is_win():
				return 'Win'
			if play_field.is_gameover():
				return 'Gameover'
		return 'Game'

	state_actions['Game'] = play

	state = 'Init'
	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(start)"
inmof_3_1,inmof,2048,Game Development,Puzzles,python,T3,Added Statements,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):    
	char = None
	while char not in actions_dict:    
		char = keyboard.getch()
	return actions_dict[char]

def transpose(field):
	return [list(row) for row in zip(*field)]

def invert(field):
	return [row[::-1] for row in field]

class GameField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height, self.width, self.win_value = height, width, win
		self.score, self.highscore = 0, 0
		self.reset()

	def reset(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0] * self.width for _ in range(self.height)]
		self.spawn()
		self.spawn()

	def move(self, direction):
		def move_row_left(row):
			def tighten(row): 
				new_row = [i for i in row if i != 0]
				new_row += [0] * (len(row) - len(new_row))
				return new_row

			def merge(row):
				pair, new_row = False, []
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					else:
						if i + 1 < len(row) and row[i] == row[i + 1]:
							pair = True
							new_row.append(0)
						else:
							new_row.append(row[i])
				assert len(new_row) == len(row)
				return new_row
			return tighten(merge(tighten(row)))

		moves = {
			'Left': lambda field: [move_row_left(row) for row in field],
			'Right': lambda field: invert(moves['Left'](invert(field))),
			'Up': lambda field: transpose(moves['Left'](transpose(field))),
			'Down': lambda field: transpose(moves['Right'](transpose(field)))
		}

		if direction in moves:
			if self.move_is_possible(direction):
				self.field = moves[direction](self.field)
				self.spawn()
				return True
			else:
				return False

	def is_win(self):
		return any(i >= self.win_value for row in self.field for i in row)

	def is_gameover(self):
		return not any(self.move_is_possible(move) for move in actions)

	def draw(self, screen):
		help_string1 = '(W)Up (S)Down (A)Left (D)Right'
		help_string2 = '     (R)Restart (Q)Exit'
		gameover_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def cast(string):
			screen.addstr(string + '\n')

		def draw_hor_separator():
			top = '+' + ('-' * (5 * self.width - 1)) + '+'
			mid = '|' + (' ' * (5 * self.width)) + '|'
			bot = top
			separator = defaultdict(lambda: mid)
			separator[0], separator[self.height] = top, bot
			if not hasattr(draw_hor_separator, 'counter'):
				draw_hor_separator.counter = 0
			cast(separator[draw_hor_separator.counter])
			draw_hor_separator.counter += 1

		def draw_row(row):
			cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '|')

		screen.clear()
		cast('SCORE: ' + str(self.score))
		if 0 != self.highscore:
			cast('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_hor_separator()
			draw_row(row)
		draw_hor_separator()
		if self.is_win():
			cast(win_string)
		else:
			if self.is_gameover():
				cast(gameover_string)
			else:
				cast(help_string1)
		cast(help_string2)

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		(i, j) = choice([(i, j) for i in range(self.width) for j in range(self.height) if self.field[j][i] == 0])
		self.field[j][i] = new_element

	def move_is_possible(self, direction):
		def row_is_left_movable(row): 
			def change(i): 
				if row[i] == 0 and row[i + 1] != 0: 
					return True
				if row[i] != 0 and row[i + 1] == row[i]: 
					return True
				return False
			return any(change(i) for i in range(len(row) - 1))

		check = {
			'Left': lambda field: any(row_is_left_movable(row) for row in field),
			'Right': lambda field: check['Left'](invert(field)),
			'Up': lambda field: check['Left'](transpose(field)),
			'Down': lambda field: check['Right'](transpose(field))
		}

		if direction in check:
			return check[direction](self.field)
		else:
			return False

def main(stdscr):
	curses.use_default_colors()
	game_field = GameField(win=32)
	state_actions = {}
	def init():
		game_field.reset()
		return 'Game'

	state_actions['Init'] = init

	def not_game(state):
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		responses = defaultdict(lambda: state)
		responses['Restart'], responses['Exit'] = 'Init', 'Exit'
		return responses[action]

	state_actions['Win'] = lambda: not_game('Win')
	state_actions['Gameover'] = lambda: not_game('Gameover')

	def game():
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if game_field.move(action): 
			if game_field.is_win():
				return 'Win'
			if game_field.is_gameover():
				return 'Gameover'
		return 'Game'

	state_actions['Game'] = game

	state = 'Init'
	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(main)"
inmof_3_2,inmof,2048,Game Development,Puzzles,python,T3,Removed Statements,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions_dict = dict(zip(letter_codes, ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit'] * 2))

def get_user_action(keyboard):    
	char = keyboard.getch()
	while char not in actions_dict:    
		char = keyboard.getch()
	return actions_dict[char]

def transpose(field):
	return [list(row) for row in zip(*field)]

def invert(field):
	return [row[::-1] for row in field]

class GameField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.reset()

	def reset(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0] * self.width for _ in range(self.height)]
		self.spawn()
		self.spawn()

	def move(self, direction):
		def move_row_left(row):
			new_row = [i for i in row if i != 0] + [0] * (len(row) - len([i for i in row if i != 0]))
			pair = False
			for i in range(len(new_row)):
				if pair:
					new_row[i - 1] *= 2
					self.score += new_row[i - 1]
					new_row[i] = 0
					pair = False
				elif i + 1 < len(new_row) and new_row[i] == new_row[i + 1]:
					pair = True
					new_row[i] = 0
			return new_row

		moves = {
			'Left': lambda field: [move_row_left(row) for row in field],
			'Right': lambda field: invert(moves['Left'](invert(field))),
			'Up': lambda field: transpose(moves['Left'](transpose(field))),
			'Down': lambda field: transpose(moves['Right'](transpose(field)))
		}

		if direction in moves and self.move_is_possible(direction):
			self.field = moves[direction](self.field)
			self.spawn()
			return True
		return False

	def is_win(self):
		return any(i >= self.win_value for row in self.field for i in row)

	def is_gameover(self):
		return not any(self.move_is_possible(move) for move in ['Left', 'Right', 'Up', 'Down'])

	def draw(self, screen):
		cast = lambda string: screen.addstr(string + '\n')
		def draw_hor_separator(): 
			cast('-' * (self.width * 5 + 1))
		def draw_row(row):
			cast(''.join(f'{num:^5}' if num > 0 else '|     ' for num in row))

		screen.clear()
		cast(f'SCORE: {self.score}')
		if self.highscore:
			cast(f'HIGHSCORE: {self.highscore}')
		for row in self.field:
			draw_hor_separator()
			draw_row(row)
		draw_hor_separator()
		if self.is_win():
			cast('          YOU WIN!')
		elif self.is_gameover():
			cast('           GAME OVER')
		cast('(W)Up (S)Down (A)Left (D)Right (R)Restart (Q)Exit')

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		i, j = choice([(i, j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0])
		self.field[i][j] = new_element

	def move_is_possible(self, direction):
		row_is_left_movable = lambda row: any((row[i] == 0 and row[i + 1] != 0) or (row[i] != 0 and row[i + 1] == row[i]) for i in range(len(row) - 1))
		check = {
			'Left': lambda field: any(row_is_left_movable(row) for row in field),
			'Right': lambda field: check['Left'](invert(field)),
			'Up': lambda field: check['Left'](transpose(field)),
			'Down': lambda field: check['Right'](transpose(field))
		}

		return check[direction](self.field) if direction in check else False

def main(stdscr):
	curses.use_default_colors()
	game_field = GameField(win=32)
	state_actions = {'Init': lambda: game_field.reset() and 'Game'}

	def not_game(state):
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		return {'Restart': 'Init', 'Exit': 'Exit'}.get(action, state)

	state_actions['Win'] = lambda: not_game('Win')
	state_actions['Gameover'] = lambda: not_game('Gameover')

	def game():
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if game_field.move(action): 
			return 'Win' if game_field.is_win() else 'Gameover' if game_field.is_gameover() else 'Game'
		return 'Game'

	state_actions['Game'] = game

	state = 'Init'
	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(main)"
inmof_3_3,inmof,2048,Game Development,Puzzles,python,T3,Reordered Statements,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):    
	char = keyboard.getch()
	while char not in actions_dict:    
		char = keyboard.getch()
	return actions_dict[char]

def transpose(field):
	return [list(row) for row in zip(*field)]

def invert(field):
	return [row[::-1] for row in field]

class GameField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.reset()

	def reset(self):
		if self.score > self.highscore:
			self.highscore = self.score
		self.score = 0
		self.field = [[0 for i in range(self.width)] for j in range(self.height)]
		self.spawn()
		self.spawn()

	def move(self, direction):
		def move_row_left(row):
			def tighten(row): 
				new_row = [i for i in row if i != 0]
				new_row += [0 for i in range(len(row) - len(new_row))]
				return new_row

			def merge(row):
				pair = False
				new_row = []
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					else:
						if i + 1 < len(row) and row[i] == row[i + 1]:
							pair = True
							new_row.append(0)
						else:
							new_row.append(row[i])
				assert len(new_row) == len(row)
				return new_row
			return tighten(merge(tighten(row)))

		moves = {}
		moves['Left']  = lambda field: [move_row_left(row) for row in field]
		moves['Right'] = lambda field: invert(moves['Left'](invert(field)))
		moves['Up']    = lambda field: transpose(moves['Left'](transpose(field)))
		moves['Down']  = lambda field: transpose(moves['Right'](transpose(field)))

		if direction in moves:
			if self.move_is_possible(direction):
				self.field = moves[direction](self.field)
				self.spawn()
				return True
			else:
				return False

	def is_win(self):
		return any(any(i >= self.win_value for i in row) for row in self.field)

	def is_gameover(self):
		return not any(self.move_is_possible(move) for move in actions)

	def draw(self, screen):
		help_string1 = '(W)Up (S)Down (A)Left (D)Right'
		help_string2 = '     (R)Restart (Q)Exit'
		gameover_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def cast(string):
			screen.addstr(string + '\n')

		def draw_hor_separator():
			top = '' + ('' * self.width + '')[1:]
			mid = '' + ('' * self.width + '')[1:]
			bot = '' + ('' * self.width + '')[1:]
			separator = defaultdict(lambda: mid)
			separator[0], separator[self.height] = top, bot
			if not hasattr(draw_hor_separator, 'counter'):
				draw_hor_separator.counter = 0
			cast(separator[draw_hor_separator.counter])
			draw_hor_separator.counter += 1

		def draw_row(row):
			cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row) + '')

		screen.clear()
		cast('SCORE: ' + str(self.score))
		if 0 != self.highscore:
			cast('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_hor_separator()
			draw_row(row)
		draw_hor_separator()
		if self.is_win():
			cast(win_string)
		else:
			if self.is_gameover():
				cast(gameover_string)
			else:
				cast(help_string1)
		cast(help_string2)

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		(i,j) = choice([(i,j) for i in range(self.width) for j in range(self.height) if self.field[j][i] == 0])
		self.field[j][i] = new_element

	def move_is_possible(self, direction):
		def row_is_left_movable(row): 
			def change(i): 
				if row[i] == 0 and row[i + 1] != 0: 
					return True
				if row[i] != 0 and row[i + 1] == row[i]: 
					return True
				return False
			return any(change(i) for i in range(len(row) - 1))

		check = {}
		check['Left']  = lambda field: any(row_is_left_movable(row) for row in field)
		check['Right'] = lambda field: check['Left'](invert(field))
		check['Up']    = lambda field: check['Left'](transpose(field))
		check['Down']  = lambda field: check['Right'](transpose(field))

		if direction in check:
			return check[direction](self.field)
		else:
			return False

def main(stdscr):
	curses.use_default_colors()
	game_field = GameField(win=32)
	state_actions = {} 
	def init():
		game_field.reset()
		return 'Game'

	state_actions['Init'] = init

	def not_game(state):
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		responses = defaultdict(lambda: state)
		responses['Restart'], responses['Exit'] = 'Init', 'Exit'
		return responses[action]

	state_actions['Win'] = lambda: not_game('Win')
	state_actions['Gameover'] = lambda: not_game('Gameover')

	def game():
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		if action == 'Exit':
			return 'Exit'
		if game_field.move(action): 
			if game_field.is_win():
				return 'Win'
			if game_field.is_gameover():
				return 'Gameover'
		return 'Game'

	state_actions['Game'] = game

	state = 'Init'
	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(main)"
inmof_3_4,inmof,2048,Game Development,Puzzles,python,T3,Control Flow Modifications,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):    
	char = keyboard.getch()
	while char not in actions_dict:    
		char = keyboard.getch()
	return actions_dict[char]

def transpose(field):
	return [list(row) for row in zip(*field)]

def invert(field):
	return [row[::-1] for row in field]

class GameField(object):
	def __init__(self, height=4, width=4, win=2048):
		self.height = height
		self.width = width
		self.win_value = win
		self.score = 0
		self.highscore = 0
		self.reset()

	def reset(self):
		self.highscore = max(self.highscore, self.score)
		self.score = 0
		self.field = [[0 for _ in range(self.width)] for _ in range(self.height)]
		self.spawn()
		self.spawn()

	def move(self, direction):
		def move_row_left(row):
			def tighten(row): 
				new_row = [i for i in row if i != 0]
				return new_row + [0] * (len(row) - len(new_row))

			def merge(row):
				new_row, pair = [], False
				for i in range(len(row)):
					if pair:
						new_row.append(2 * row[i])
						self.score += 2 * row[i]
						pair = False
					elif i + 1 < len(row) and row[i] == row[i + 1]:
						pair = True
						new_row.append(0)
					else:
						new_row.append(row[i])
				return new_row
			return tighten(merge(tighten(row)))

		moves = {
			'Left': lambda field: [move_row_left(row) for row in field],
			'Right': lambda field: invert(moves['Left'](invert(field))),
			'Up': lambda field: transpose(moves['Left'](transpose(field))),
			'Down': lambda field: transpose(moves['Right'](transpose(field)))
		}

		if direction in moves and self.move_is_possible(direction):
			self.field = moves[direction](self.field)
			self.spawn()
			return True
		return False

	def is_win(self):
		return any(i >= self.win_value for row in self.field for i in row)

	def is_gameover(self):
		return not any(self.move_is_possible(move) for move in actions)

	def draw(self, screen):
		help_string1 = '(W)Up (S)Down (A)Left (D)Right'
		help_string2 = '     (R)Restart (Q)Exit'
		gameover_string = '           GAME OVER'
		win_string = '          YOU WIN!'
		def cast(string):
			screen.addstr(string + '\n')

		def draw_hor_separator():
			separator = defaultdict(lambda: '|' + ('-' * (self.width * 6 - 1)))
			cast(separator[0])
			if not hasattr(draw_hor_separator, 'counter'):
				draw_hor_separator.counter = 0
			draw_hor_separator.counter += 1

		def draw_row(row):
			cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row))

		screen.clear()
		cast('SCORE: ' + str(self.score))
		if self.highscore:
			cast('HIGHSCORE: ' + str(self.highscore))
		for row in self.field:
			draw_hor_separator()
			draw_row(row)
		draw_hor_separator()
		if self.is_win():
			cast(win_string)
		elif self.is_gameover():
			cast(gameover_string)
		else:
			cast(help_string1)
		cast(help_string2)

	def spawn(self):
		new_element = 4 if randrange(100) > 89 else 2
		(empty_cells := [(i, j) for i in range(self.width) for j in range(self.height) if self.field[i][j] == 0])
		(i, j) = choice(empty_cells) if empty_cells else (None, None)
		if (i, j) != (None, None):
			self.field[i][j] = new_element

	def move_is_possible(self, direction):
		def row_is_left_movable(row): 
			return any(row[i] == 0 and row[i + 1] != 0 or row[i] != 0 and row[i + 1] == row[i] for i in range(len(row) - 1))

		check = {
			'Left': lambda field: any(row_is_left_movable(row) for row in field),
			'Right': lambda field: check['Left'](invert(field)),
			'Up': lambda field: check['Left'](transpose(field)),
			'Down': lambda field: check['Right'](transpose(field))
		}

		return check[direction](self.field) if direction in check else False

def main(stdscr):
	curses.use_default_colors()
	game_field = GameField(win=32)
	state = 'Init'
	state_actions = {
		'Init': lambda: (game_field.reset(), 'Game')[1],
		'Win': lambda: not_game('Win'),
		'Gameover': lambda: not_game('Gameover'),
		'Game': game
	}

	def not_game(state):
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		return {'Restart': 'Init', 'Exit': 'Exit'}.get(action, state)

	def game():
		game_field.draw(stdscr)
		action = get_user_action(stdscr)
		if action == 'Restart':
			return 'Init'
		elif action == 'Exit':
			return 'Exit'
		elif game_field.move(action):
			if game_field.is_win():
				return 'Win'
			elif game_field.is_gameover():
				return 'Gameover'
		return 'Game'

	while state != 'Exit':
		state = state_actions[state]()

curses.wrapper(main)"
inmof_4_1,inmof,2048,Game Development,Puzzles,python,T4,Same Language,"import curses
from random import randrange, choice 
from collections import defaultdict

letter_codes = [ord(ch) for ch in 'WASDRQwasdrq']
actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit']
actions_dict = dict(zip(letter_codes, actions * 2))

def get_user_action(keyboard):    
    char = keyboard.getch()
    while char not in actions_dict:    
        char = keyboard.getch()
    return actions_dict[char]

def transpose(field):
    return [list(row) for row in zip(*field)]

def invert(field):
    return [row[::-1] for row in field]

class GameField:
    def __init__(self, height=4, width=4, win=2048):
        self.height = height
        self.width = width
        self.win_value = win
        self.score = 0
        self.highscore = 0
        self.reset()

    def reset(self):
        self.highscore = max(self.highscore, self.score)
        self.score = 0
        self.field = [[0] * self.width for _ in range(self.height)]
        self.spawn()
        self.spawn()

    def move(self, direction):
        moves = {
            'Left': self.move_row_left,
            'Right': lambda f: invert(self.move_row_left(invert(f))),
            'Up': lambda f: transpose(self.move_row_left(transpose(f))),
            'Down': lambda f: transpose(moves['Right'](transpose(f))),
        }

        if direction in moves and self.move_is_possible(direction):
            self.field = moves[direction](self.field)
            self.spawn()
            return True
        return False

    def move_row_left(self, row):
        def tighten(row): 
            new_row = [i for i in row if i != 0]
            return new_row + [0] * (len(row) - len(new_row))

        def merge(row):
            pair = False
            new_row = []
            for i in range(len(row)):
                if pair:
                    new_row.append(2 * row[i])
                    self.score += 2 * row[i]
                    pair = False
                else:
                    if i + 1 < len(row) and row[i] == row[i + 1]:
                        pair = True
                        new_row.append(0)
                    else:
                        new_row.append(row[i])
            return new_row
        return tighten(merge(tighten(row)))

    def is_win(self):
        return any(i >= self.win_value for row in self.field for i in row)

    def is_gameover(self):
        return not any(self.move_is_possible(move) for move in actions)

    def draw(self, screen):
        help_string1 = '(W)Up (S)Down (A)Left (D)Right'
        help_string2 = '     (R)Restart (Q)Exit'
        gameover_string = '           GAME OVER'
        win_string = '          YOU WIN!'
        
        def cast(string):
            screen.addstr(string + '\n')

        def draw_hor_separator():
            separator = defaultdict(lambda: '-' * (5 * self.width + 1))
            if not hasattr(draw_hor_separator, 'counter'):
                draw_hor_separator.counter = 0
            cast(separator[draw_hor_separator.counter])
            draw_hor_separator.counter += 1

        def draw_row(row):
            cast(''.join('{: ^5} '.format(num) if num > 0 else '|      ' for num in row))

        screen.clear()
        cast('SCORE: ' + str(self.score))
        if self.highscore > 0:
            cast('HIGHSCORE: ' + str(self.highscore))
        for row in self.field:
            draw_hor_separator()
            draw_row(row)
        draw_hor_separator()
        cast(win_string if self.is_win() else gameover_string if self.is_gameover() else help_string1)
        cast(help_string2)

    def spawn(self):
        new_element = 4 if randrange(100) > 89 else 2
        empty_positions = [(i, j) for i in range(self.height) for j in range(self.width) if self.field[i][j] == 0]
        (i, j) = choice(empty_positions)
        self.field[i][j] = new_element

    def move_is_possible(self, direction):
        check = {
            'Left': lambda field: any(self.row_is_left_movable(row) for row in field),
            'Right': lambda field: check['Left'](invert(field)),
            'Up': lambda field: check['Left'](transpose(field)),
            'Down': lambda field: check['Right'](transpose(field)),
        }

        return check[direction](self.field) if direction in check else False

    def row_is_left_movable(self, row):
        return any(row[i] == 0 and row[i + 1] != 0 or row[i] != 0 and row[i + 1] == row[i] for i in range(len(row) - 1))

def main(stdscr):
    curses.use_default_colors()
    game_field = GameField(win=32)

    def state_machine(state):
        states = {
            'Init': lambda: 'Game' if game_field.reset() or True else 'Game',
            'Game': game_loop,
            'Win': not_game,
            'Gameover': not_game
        }
        return states[state]()

    def not_game(state):
        game_field.draw(stdscr)
        action = get_user_action(stdscr)
        return {'Restart': 'Init', 'Exit': 'Exit'}.get(action, state)

    def game_loop():
        game_field.draw(stdscr)
        action = get_user_action(stdscr)
        if action == 'Restart':
            return 'Init'
        if action == 'Exit':
            return 'Exit'
        if game_field.move(action):
            return 'Win' if game_field.is_win() else 'Gameover' if game_field.is_gameover() else 'Game'
        return 'Game'

    state = 'Init'
    while state != 'Exit':
        state = state_machine(state)

curses.wrapper(main)"
inmof_4_2,inmof,2048,Game Development,Puzzles,go,T4,Different Language,"package main

import (
	""bufio""
	""fmt""
	""log""
	""math/rand""
	""os""
	""os/exec""
	""strconv""
	""strings""
	""text/template""
	""time""
	""unicode""

	""golang.org/x/crypto/ssh/terminal""
)

const maxPoints = 2048
const (
	fieldSizeX = 4
	fieldSizeY = 4
)
const tilesAtStart = 2
const probFor2 = 0.9

type button int

const (
	_ button = iota
	up
	down
	right
	left
	quit
)

var labels = func() map[button]rune {
	m := make(map[button]rune, 4)
	m[up] = 'W'
	m[down] = 'S'
	m[right] = 'D'
	m[left] = 'A'
	return m
}()
var keybinding = func() map[rune]button {
	m := make(map[rune]button, 8)
	for b, r := range labels {
		m[r] = b
		if unicode.IsUpper(r) {
			r = unicode.ToLower(r)
		} else {
			r = unicode.ToUpper(r)
		}
		m[r] = b
	}
	m[0x03] = quit
	return m
}()

var model = struct {
	Score int
	Field [fieldSizeY][fieldSizeX]int
}{}

var view = func() *template.Template {
	maxWidth := 1
	for i := maxPoints; i >= 10; i /= 10 {
		maxWidth++
	}

	w := maxWidth + 3
	r := make([]byte, fieldSizeX*w+1)
	for i := range r {
		if i%w == 0 {
			r[i] = '+'
		} else {
			r[i] = '-'
		}
	}
	rawBorder := string(r)

	v, err := template.New("""").Parse(`SCORE: {{.Score}}
{{range .Field}}
` + rawBorder + `
|{{range .}} {{if .}}{{printf ""%` + strconv.Itoa(maxWidth) + `d"" .}}{{else}}` +
		strings.Repeat("" "", maxWidth) + `{{end}} |{{end}}{{end}}
` + rawBorder + `

(` + string(labels[up]) + `)Up (` +
		string(labels[down]) + `)Down (` +
		string(labels[left]) + `)Left (` +
		string(labels[right]) + `)Right
`)
	check(err)
	return v
}()

func check(err error) {
	if err != nil {
		log.Panicln(err)
	}
}

func clear() {
	c := exec.Command(""clear"")
	c.Stdout = os.Stdout
	check(c.Run())
}

func draw() {
	clear()
	check(view.Execute(os.Stdout, model))
}

func addRandTile() (full bool) {
	free := make([]*int, 0, fieldSizeX*fieldSizeY)

	for x := 0; x < fieldSizeX; x++ {
		for y := 0; y < fieldSizeY; y++ {
			if model.Field[y][x] == 0 {
				free = append(free, &model.Field[y][x])
			}
		}
	}

	val := 4
	if rand.Float64() < probFor2 {
		val = 2
	}
	*free[rand.Intn(len(free))] = val

	return len(free) == 1
}

type point struct{ x, y int }

func (p point) get() int      { return model.Field[p.y][p.x] }
func (p point) set(n int)     { model.Field[p.y][p.x] = n }
func (p point) inField() bool { return p.x >= 0 && p.y >= 0 && p.x < fieldSizeX && p.y < fieldSizeY }
func (p *point) next(n point) { p.x += n.x; p.y += n.y }

func controller(key rune) (gameOver bool) {
	b := keybinding[key]

	if b == 0 {
		return false
	}
	if b == quit {
		return true
	}

	var starts []point
	var next point

	switch b {
	case up:
		next = point{0, 1}
		starts = make([]point, fieldSizeX)
		for x := 0; x < fieldSizeX; x++ {
			starts[x] = point{x, 0}
		}
	case down:
		next = point{0, -1}
		starts = make([]point, fieldSizeX)
		for x := 0; x < fieldSizeX; x++ {
			starts[x] = point{x, fieldSizeY - 1}
		}
	case right:
		next = point{-1, 0}
		starts = make([]point, fieldSizeY)
		for y := 0; y < fieldSizeY; y++ {
			starts[y] = point{fieldSizeX - 1, y}
		}
	case left:
		next = point{1, 0}
		starts = make([]point, fieldSizeY)
		for y := 0; y < fieldSizeY; y++ {
			starts[y] = point{0, y}
		}
	}

	moved := false
	winning := false

	for _, s := range starts {
		n := s
		move := func(set int) {
			moved = true
			s.set(set)
			n.set(0)
		}
		for n.next(next); n.inField(); n.next(next) {
			if s.get() != 0 {
				if n.get() == s.get() {
					score := s.get() * 2
					model.Score += score
					winning = score >= maxPoints

					move(score)
					s.next(next)
				} else if n.get() != 0 {
					s.next(next)
					if s.get() == 0 {
						move(n.get())
					}
				}
			} else if n.get() != 0 {
				move(n.get())
			}
		}
	}

	if !moved {
		return false
	}

	lost := false
	if addRandTile() {
		lost = true
	Out:
		for x := 0; x < fieldSizeX; x++ {
			for y := 0; y < fieldSizeY; y++ {
				if (y > 0 && model.Field[y][x] == model.Field[y-1][x]) ||
					(x > 0 && model.Field[y][x] == model.Field[y][x-1]) {
					lost = false
					break Out
				}
			}
		}
	}

	draw()

	if winning {
		fmt.Println(""You win!"")
		return true
	}
	if lost {
		fmt.Println(""Game Over"")
		return true
	}

	return false
}

func main() {
	oldState, err := terminal.MakeRaw(0)
	check(err)
	defer terminal.Restore(0, oldState)

	rand.Seed(time.Now().Unix())

	for i := tilesAtStart; i > 0; i-- {
		addRandTile()
	}
	draw()

	stdin := bufio.NewReader(os.Stdin)

	readKey := func() rune {
		r, _, err := stdin.ReadRune()
		check(err)
		return r
	}

	for !controller(readKey()) {
	}
}"
inmof_4_2,inmof,2048,Game Development,Puzzles,java,T4,Different Language,"import java.awt.*;
import java.awt.event.*;
import java.util.Random;
import javax.swing.*;

public class Game2048 extends JPanel {

    enum State {
        start, won, running, over
    }

    final Color[] colorTable = {
        new Color(0x701710), new Color(0xFFE4C3), new Color(0xfff4d3),
        new Color(0xffdac3), new Color(0xe7b08e), new Color(0xe7bf8e),
        new Color(0xffc4c3), new Color(0xE7948e), new Color(0xbe7e56),
        new Color(0xbe5e56), new Color(0x9c3931), new Color(0x701710)};

    final static int target = 2048;

    static int highest;
    static int score;

    private Color gridColor = new Color(0xBBADA0);
    private Color emptyColor = new Color(0xCDC1B4);
    private Color startColor = new Color(0xFFEBCD);

    private Random rand = new Random();

    private Tile[][] tiles;
    private int side = 4;
    private State gamestate = State.start;
    private boolean checkingAvailableMoves;

    public Game2048() {
        setPreferredSize(new Dimension(900, 700));
        setBackground(new Color(0xFAF8EF));
        setFont(new Font(""SansSerif"", Font.BOLD, 48));
        setFocusable(true);

        addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                startGame();
                repaint();
            }
        });

        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP:
                        moveUp();
                        break;
                    case KeyEvent.VK_DOWN:
                        moveDown();
                        break;
                    case KeyEvent.VK_LEFT:
                        moveLeft();
                        break;
                    case KeyEvent.VK_RIGHT:
                        moveRight();
                        break;
                }
                repaint();
            }
        });
    }

    @Override
    public void paintComponent(Graphics gg) {
        super.paintComponent(gg);
        Graphics2D g = (Graphics2D) gg;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        drawGrid(g);
    }

    void startGame() {
        if (gamestate != State.running) {
            score = 0;
            highest = 0;
            gamestate = State.running;
            tiles = new Tile[side][side];
            addRandomTile();
            addRandomTile();
        }
    }

    void drawGrid(Graphics2D g) {
        g.setColor(gridColor);
        g.fillRoundRect(200, 100, 499, 499, 15, 15);

        if (gamestate == State.running) {

            for (int r = 0; r < side; r++) {
                for (int c = 0; c < side; c++) {
                    if (tiles[r][c] == null) {
                        g.setColor(emptyColor);
                        g.fillRoundRect(215 + c * 121, 115 + r * 121, 106, 106, 7, 7);
                    } else {
                        drawTile(g, r, c);
                    }
                }
            }
        } else {
            g.setColor(startColor);
            g.fillRoundRect(215, 115, 469, 469, 7, 7);

            g.setColor(gridColor.darker());
            g.setFont(new Font(""SansSerif"", Font.BOLD, 128));
            g.drawString(""2048"", 310, 270);

            g.setFont(new Font(""SansSerif"", Font.BOLD, 20));

            if (gamestate == State.won) {
                g.drawString(""you made it!"", 390, 350);

            } else if (gamestate == State.over)
                g.drawString(""game over"", 400, 350);

            g.setColor(gridColor);
            g.drawString(""click to start a new game"", 330, 470);
            g.drawString(""(use arrow keys to move tiles)"", 310, 530);
        }
    }

    void drawTile(Graphics2D g, int r, int c) {
        int value = tiles[r][c].getValue();

        g.setColor(colorTable[(int) (Math.log(value) / Math.log(2)) + 1]);
        g.fillRoundRect(215 + c * 121, 115 + r * 121, 106, 106, 7, 7);
        String s = String.valueOf(value);

        g.setColor(value < 128 ? colorTable[0] : colorTable[1]);

        FontMetrics fm = g.getFontMetrics();
        int asc = fm.getAscent();
        int dec = fm.getDescent();

        int x = 215 + c * 121 + (106 - fm.stringWidth(s)) / 2;
        int y = 115 + r * 121 + (asc + (106 - (asc + dec)) / 2);

        g.drawString(s, x, y);
    }


    private void addRandomTile() {
        int pos = rand.nextInt(side * side);
        int row, col;
        do {
            pos = (pos + 1) % (side * side);
            row = pos / side;
            col = pos % side;
        } while (tiles[row][col] != null);

        int val = rand.nextInt(10) == 0 ? 4 : 2;
        tiles[row][col] = new Tile(val);
    }

    private boolean move(int countDownFrom, int yIncr, int xIncr) {
        boolean moved = false;

        for (int i = 0; i < side * side; i++) {
            int j = Math.abs(countDownFrom - i);

            int r = j / side;
            int c = j % side;

            if (tiles[r][c] == null)
                continue;

            int nextR = r + yIncr;
            int nextC = c + xIncr;

            while (nextR >= 0 && nextR < side && nextC >= 0 && nextC < side) {

                Tile next = tiles[nextR][nextC];
                Tile curr = tiles[r][c];

                if (next == null) {

                    if (checkingAvailableMoves)
                        return true;

                    tiles[nextR][nextC] = curr;
                    tiles[r][c] = null;
                    r = nextR;
                    c = nextC;
                    nextR += yIncr;
                    nextC += xIncr;
                    moved = true;

                } else if (next.canMergeWith(curr)) {

                    if (checkingAvailableMoves)
                        return true;

                    int value = next.mergeWith(curr);
                    if (value > highest)
                        highest = value;
                    score += value;
                    tiles[r][c] = null;
                    moved = true;
                    break;
                } else
                    break;
            }
        }

        if (moved) {
            if (highest < target) {
                clearMerged();
                addRandomTile();
                if (!movesAvailable()) {
                    gamestate = State.over;
                }
            } else if (highest == target)
                gamestate = State.won;
        }

        return moved;
    }

    boolean moveUp() {
        return move(0, -1, 0);
    }

    boolean moveDown() {
        return move(side * side - 1, 1, 0);
    }

    boolean moveLeft() {
        return move(0, 0, -1);
    }

    boolean moveRight() {
        return move(side * side - 1, 0, 1);
    }

    void clearMerged() {
        for (Tile[] row : tiles)
            for (Tile tile : row)
                if (tile != null)
                    tile.setMerged(false);
    }

    boolean movesAvailable() {
        checkingAvailableMoves = true;
        boolean hasMoves = moveUp() || moveDown() || moveLeft() || moveRight();
        checkingAvailableMoves = false;
        return hasMoves;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame f = new JFrame();
            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            f.setTitle(""2048"");
            f.setResizable(true);
            f.add(new Game2048(), BorderLayout.CENTER);
            f.pack();
            f.setLocationRelativeTo(null);
            f.setVisible(true);
        });
    }
}

class Tile {
    private boolean merged;
    private int value;

    Tile(int val) {
        value = val;
    }

    int getValue() {
        return value;
    }

    void setMerged(boolean m) {
        merged = m;
    }

    boolean canMergeWith(Tile other) {
        return !merged && other != null && !other.merged && value == other.getValue();
    }

    int mergeWith(Tile other) {
        if (canMergeWith(other)) {
            value *= 2;
            merged = true;
            return value;
        }
        return -1;
    }
}"
inmof_4_2,inmof,2048,Game Development,Puzzles,javascript,T4,Different Language,"function Tile(pos, val, puzzle){
	this.pos     = pos;
	this.val     = val;
	this.puzzle  = puzzle;
	this.merging = false;

	this.getCol = () => Math.round(this.pos % 4);
	this.getRow = () => Math.floor(this.pos / 4);

	

	this.show = function(){
		let padding = this.merging ? 0 : 5;
		let size = 0.25*width;
		noStroke();
		colorMode(HSB, 255);
		fill(10*(11 - Math.log2(this.val)), 50 + 15*Math.log2(this.val), 200);
		rect(this.getCol()*size + padding, this.getRow()*size + padding, size - 2*padding, size - 2*padding);
		fill(255);
		textSize(0.1*width);
		textAlign(CENTER, CENTER);
		text(this.val, (this.getCol() + 0.5)*size, (this.getRow() + 0.5)*size);
	}

	

	this.move = function(dir){
		let col = this.getCol() + (1 - 2*(dir < 0))*Math.abs(dir)%4;
		let row = this.getRow() + (1 - 2*(dir < 0))*Math.floor(Math.abs(dir)/4);
		let target = this.puzzle.getTile(this.pos + dir);

		if (col < 0 || col > 3 || row < 0 || row > 3) {
			
			return false;
		} else if (target){
			
			if(this.merging || target.merging || target.val !== this.val)
				return false;

			 
			target.val += this.val;
			target.merging = true;
			this.puzzle.score += target.val;
			this.puzzle.removeTile(this);
			return true;
		}

		
		this.pos += dir;
		return true;
	}
}



function Puzzle(){
	this.tiles    = [];
	this.dir      = 0;
	this.score    = 0;
	this.hasMoved = false;
	this.validPositions = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];

	this.getOpenPositions = () => this.validPositions.filter(i => this.tiles.map(x => x.pos).indexOf(i) === -1);
	this.getTile          = pos => this.tiles.filter(x => x.pos === pos)[0];
	this.removeTile       = tile => this.tiles.splice(this.tiles.indexOf(tile), 1);
	this.winCondition     = () => this.tiles.some(x => x.val === 2048);

	

	this.validMoves = function(){
		
		if(this.tiles.length < 16)
			return true;

		
		let res = false;
		this.tiles.sort((x,y) => x.pos - y.pos);
		for(let i = 0; i < 16; i++)
			res = res || ( (i%4 < 3) ? this.tiles[i].val === this.tiles[i+1].val : false )
					  || ( (i  < 12) ? this.tiles[i].val === this.tiles[i+4].val : false );
		return res;
	}

	

	this.checkGameState = function(){
		if(this.winCondition()){
			alert('You win!');
		} else if (!this.validMoves()){
			alert('You Lose!');
			this.restart();
		}
	}

	this.restart = function(){
		this.tiles    = [];
		this.dir      = 0;
		this.score    = 0;
		this.hasMoved = false;
		this.generateTile();
		this.generateTile();
	}

	

	this.show = function(){
		background(200);
		fill(255);
		textSize(0.05*width);
		textAlign(CENTER, TOP);
		text(""SCORE: "" + this.score, 0.5*width, width);

		for(let tile of this.tiles)
			tile.show();
	}

	

	this.animate = function(){
		if(this.dir === 0)
			return;

		
		let moving = false;
		this.tiles.sort((x,y) => this.dir*(y.pos - x.pos));
		for(let tile of this.tiles)
			moving = moving || tile.move(this.dir);

		
		if(this.hasMoved && !moving){
			this.dir = 0;
			this.generateTile();

			for(let tile of this.tiles)
				tile.merging = false;
		} 
		this.hasMoved = moving;
	}

	this.generateTile = function(){
		let positions = this.getOpenPositions();
		let pos       = positions[Math.floor(Math.random()*positions.length)];
		let val       = 2 + 2*Math.floor(Math.random()*1.11);
		this.tiles.push(new Tile(pos, val, this));
	}
	this.generateTile();
	this.generateTile();

	

	this.keyHandler = function(key){
		if      (key === UP_ARROW)    this.dir = -4
		else if (key === DOWN_ARROW)  this.dir = 4
		else if (key === RIGHT_ARROW) this.dir = 1
		else if (key === LEFT_ARROW)  this.dir = -1;
	}
}


let game;

function setup() {
	createCanvas(400, 420);	
	game = new Puzzle();
}



function draw() {
	game.checkGameState();
	game.animate();
	game.show();
}

function keyPressed(){
	game.keyHandler(keyCode);
}"
inmof_4_2,inmof,2048,Game Development,Puzzles,php,T4,Different Language,"<?php

$game = new Game();

while(true) {
    $game->cycle();
}

class Game {
	private $field;
	private $fieldSize;
	private $command;
	private $error;
	private $lastIndexX, $lastIndexY;
	private $score;
	private $finishScore;

	function __construct() {
		$this->field = array();
		$this->fieldSize = 4;
		$this->finishScore = 2048;
		$this->score = 0;
		$this->addNumber();
		$this->render();
	}

	public function cycle() {
		$this->command = strtolower($this->readchar('Use WASD, q exits'));
		$this->cls();

		if($this->processCommand()) {
			$this->addNumber();
		} else {
			if(count($this->getFreeList()) == 0 ) {
				$this->error = 'No options left!, You Lose!!';
			} else {
				$this->error = 'Invalid move, try again!';
			}
		}
		$this->render();
	}

	private function readchar($prompt) {
		readline_callback_handler_install($prompt, function() {});
		$char = stream_get_contents(STDIN, 1);
		readline_callback_handler_remove();
		return $char;
	}

	
	private function addNumber() {
		$freeList = $this->getFreeList();
		if(count($freeList) == 0) {
			return;
		}
		$index = mt_rand(0, count($freeList)-1);
		$nr = (mt_rand(0,9) == 0)? 4 : 2;
		$this->field[$freeList[$index]['x']][$freeList[$index]['y']] = $nr;
		return;
	}

	
	private function getFreeList() {
		$freeList = array();
		for($y =0; $y< $this->fieldSize;$y++) {
			for($x=0; $x < $this->fieldSize; $x++) {
				if(!isset($this->field[$x][$y])) {
					$freeList[] = array('x' => $x, 'y' => $y);
				} elseif($this->field[$x][$y] == $this->finishScore) {
					$this->error = 'You Win!!';
				}
			}
		}
		return $freeList;
	}

	
	private function processCommand() {
		if(!in_array($this->command, array('w','a','s','d','q'))) {
			$this->error = 'Invalid Command';
			return false;
		}
		if($this->command == 'q') {
			echo PHP_EOL. 'Bye!'. PHP_EOL;
			exit;
		}

		
		$axis = 'x';
		$sDir = 1;

		switch($this->command) {
			case 'w':
				$axis = 'y';
				$sDir = -1;
				break;
			case 'a':
				$sDir = -1;
				break;
			case 's':
				$axis = 'y';
				break;
			case 'd':
			break;
		}

		$done = 0;
		
		$done += $this->shift($axis, $sDir);
		
		$done += $this->merge($axis, $sDir * -1);
		
		$done += $this->shift($axis, $sDir);
		return $done >0;
	}

	private function shift($axis, $dir) {
		$totalDone = 0;
		for($i = 0; $i <$this->fieldSize; $i++) {
			$done = 0;
			foreach($this->iterate($axis,$dir) as $xy) {
				if($xy['vDest'] === NULL && $xy['vSrc'] !== NULL) {
					$this->field[$xy['dX']][$xy['dY']] = $xy['vSrc'];
					$this->field[$xy['sX']][$xy['sY']] = NULL;
					$done++;
				}
			}
			$totalDone += $done;
			if($done == 0) {
				
				break;
			}
		}
		return $totalDone;
	}

	private function merge($axis, $dir) {
		$done = 0;
		foreach($this->iterate($axis,$dir) as $xy) {
			if($xy['vDest'] !== NULL && $xy['vDest'] === $xy['vSrc']) {
				$this->field[$xy['sX']][$xy['sY']] += $xy['vDest'];
				$this->field[$xy['dX']][$xy['dY']] = NULL;
				$this->score += $this->field[$xy['sX']][$xy['sY']];
				$done ++;
			}
		}
		return $done;
	}

	
	private function iterate($axis, $dir) {
		$res = array();
		for($y = 0; $y < $this->fieldSize; $y++) {
			for($x=0; $x < $this->fieldSize; $x++) {
				$item = array('sX'=> $x,'sY' => $y, 'dX' => $x, 'dY' => $y, 'vDest' => NULL,'vSrc' => NULL);

				if($axis == 'x') {
					$item['dX'] += $dir;
				} else {
					$item['dY'] += $dir;
				}

				if($item['dX'] >= $this->fieldSize || $item['dY'] >=$this->fieldSize || $item['dX'] < 0 || $item['dY'] < 0) {
					continue;
				}

				$item['vDest'] = (isset($this->field[$item['dX']][$item['dY']]))? $this->field[$item['dX']][$item['dY']] : NULL;
				$item['vSrc'] = (isset($this->field[$item['sX']][$item['sY']]))? $this->field[$item['sX']][$item['sY']] : NULL;
				$res[] = $item;
			}
		}
		if($dir < 0) {
			$res = array_reverse($res);
		}
		return $res;
	}

	

	
	private function cls() {
		echo chr(27).chr(91).'H'.chr(27).chr(91).'J';
	}

	private function render() {
		echo $this->finishScore . '! Current score: '. $this->score .PHP_EOL;

		if(!empty($this->error)) {
			echo $this->error . PHP_EOL;
			$this->error = NULL;
		}
		$this->renderField();
	}

	private function renderField() {
		$width = 5;
		$this->renderVSeperator($width);
		for($y =0; $y < $this->fieldSize; $y ++) {
			for($x = 0;$x < $this->fieldSize; $x++) {
				echo '|';
				if(!isset($this->field[$x][$y])) {
					echo str_repeat(' ', $width);
					continue;
				}
				printf('%'.$width.'s', $this->field[$x][$y]);
			}
			echo '|'. PHP_EOL;
			$this->renderVSeperator($width);
		}
	}

	private function renderVSeperator($width) {
		echo str_repeat('+'. str_repeat('-', $width), $this->fieldSize) .'+' .PHP_EOL;
	}

}"
inmof_4_2,inmof,2048,Game Development,Puzzles,ruby,T4,Different Language,"require 'io/console'

class Board
  def initialize size=4, win_limit=2048, cell_width = 6
    @size = size; @cw = cell_width; @win_limit = win_limit
    @board = Array.new(size) {Array.new(size, 0)}
    @moved = true; @score = 0; @no_more_moves = false
    spawn
  end

  def draw
    print  if @r_vert
    print '    ' if @r_hori
    print '' + (['' * @cw] * @size).join('')  + ''
    @board.each do |row|
      print 
      formated = row.map {|num| num == 0? ' ' * @cw: format(num)}
      print '    ' if @r_hori
      puts '' + formated.join('') + ''
      print '    ' if @r_hori
      print '' + ([' '  * @cw] * @size).join('') + ''
    end
    print 
    print '    ' if @r_hori
    puts '' + (['' * @cw] * @size).join('')  + ''
  end

  def move direction
    case direction
    when :up
      @board = column_map {|c| logic(c)}
      @r_vert = false if $rumble
    when :down
      @board = column_map {|c| logic(c.reverse).reverse} 
      @r_vert = true if $rumble
    when :left 
      @board = row_map {|r| logic(r)}
      @r_hori = false if $rumble
    when :right
      @board = row_map {|r| logic(r.reverse).reverse} 
      @r_hori = true if $rumble
    end
    spawn
    @moved = false
  end

  def print_score
    puts 
    puts  if to_enum.any? {|e| e >= @win_limit}
  end

  def no_more_moves?; @no_more_moves; end
  def won?;  to_enum.any? {|e| e >= @win_limit}; end
  def reset!; initialize @size, @win_limit, @cw; end

  private

  def set x, y, val
    @board[y][x] = val
  end

  def spawn 
    free_pos = to_enum.select{|elem,x,y| elem == 0}.map{|_,x,y| [x,y]}
    unless free_pos.empty?
      set *free_pos.sample, rand > 0.1? 2: 4 if @moved
    else
      snap = @board
      unless @stop
        @stop = true
        %i{up down left right}.each{|s| move(s)}
        @no_more_moves = true if snap.flatten == @board.flatten
        @board = snap
        @stop = false
      end
    end
  end

  def logic list
    jump = false
    result =
    list.reduce([]) do |res, val|
      if res.last == val &&!jump
	res[-1] += val
	@score += val
        jump = true
      elsif val!= 0
	res.push val
        jump = false
      end
      res
    end
    result += [0] * (@size - result.length)
    @moved ||= list!= result
    result
  end

  def column_map
    xboard = @board.transpose
    xboard.map!{|c| yield c }
    xboard.transpose
  end

  def row_map
    @board.map {|r| yield r }
  end

  def to_enum
    @enum ||= Enumerator.new(@size * @size) do |yielder|
      (@size*@size).times do |i|
	yielder.yield (@board[i / @size][i % @size]), (i % @size), (i / @size )
      end
    end
    @enum.rewind
  end

  def format(num)
    if $color
      cstart =  + $colors[Math.log(num, 2)] + 
      cend = 
    else
      cstart = cend = 
    end
    cstart + num.to_s.center(@cw) + cend
  end
end

$color = true
$colors = %W{0 1;97 1;93 1;92 1;96 1;91 1;95 1;94 1;30;47 1;43 1;42
1;46 1;41 1;45 1;44 1;33;43 1;33;42 1;33;41 1;33;44}
$rumble = false

$check_score = true
unless ARGV.empty?
  puts ; exit if %W[-h --help].include?(ARGV[0])
  args = ARGV.map(&:to_i).reject{|n| n == 0}
  b = Board.new(*args) unless args.empty?
  $rumble = true if ARGV.any?{|a| a =~ /rumble/i }
  $color = false if ARGV.any?{|a| a =~ /no.?color/i}
end

b ||= Board.new
puts 
b.draw
puts 
loop do
  input = STDIN.getch
  if input ==  
    2.times {input << STDIN.getch}
  end

  case input
  when ,  then b.move(:up)
  when ,  then b.move(:down)
  when ,  then b.move(:right)
  when ,  then b.move(:left)

  when ,,  then b.print_score; exit

  when  
    puts <<-EOM.gsub(/^\s*/, '')
                                                                                        
      Use the arrow-keys or WASD on your keyboard to push board in the given direction.   
      Tiles with the same number merge into one.                                          
      Get a tile with a value of 
      In case you cannot move or merge any tiles anymore, you loose.                      
      You can start this game with different settings by providing commandline argument:  
      For instance:                                                                       
        %> 
                                                                                        
      PRESS q TO QUIT (or Ctrl-C or Ctrl-D)
    EOM
    input = STDIN.getch
  end

  puts 
  b.draw

  if b.no_more_moves? or $check_score && b.won?
    b.print_score
    if b.no_more_moves?
      puts 
      puts 
      exit if STDIN.gets.chomp.downcase == 
      $check_score = true
      b.reset!
      puts 
      b.draw
    else
      puts 
      exit if STDIN.gets.chomp.downcase == 
      $check_score = false
      puts 
      b.draw
    end
  end
end"
s0lq9_1_1,s0lq9,21 game,Game Development,Card Games,python,T1,Identical Clone,"from random import randint
def start():
	game_count=0
	print(.format(game_count))
	roundno=1
	while game_count<21:
		print(.format(roundno))
		t = select_count(game_count)
		game_count = game_count+t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 0
		t = request_count()
		if not t:
			print('OK,quitting the game')
			return -1
		game_count = game_count+t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 1
		roundno+=1

def select_count(game_count):
	'''selects a random number if the game_count is less than 18. otherwise chooses the winning number'''
	if game_count<18:
		t= randint(1,3)
	else:
		t = 21-game_count
	print(.format(t))
	return t

def request_count():
	'''request user input between 1,2 and 3. It will continue till either quit(q) or one of those numbers is requested.'''
	t=
	while True:
		try:
			t = raw_input('Your choice 1 to 3:')
			if int(t) in [1,2,3]:
				return int(t)
			else:
				print()
		except:
			if t==:
				return None
			else:
				print()

c=0
m=0
r=True
while r:
	o = start()
	if o==-1:
		break
	else:
		c+=1 if o==0 else 0
		m+=1 if o==1 else 0
	print(.format(c,m))
	t = raw_input()
	r = (t==)"
s0lq9_1_2,s0lq9,21 game,Game Development,Card Games,python,T1,Different Whitespaces,"from random import randint
def start():
    game_count=0
    print(.format(game_count))
    roundno=1
    while game_count<21:
        print(.format(roundno))
        t=select_count(game_count)
        game_count=game_count+t
        print(.format(game_count))
        if game_count>=21:
            print()
            return 0
        t=request_count()
        if not t:
            print('OK,quitting the game')
            return -1
        game_count=game_count+t
        print(.format(game_count))
        if game_count>=21:
            print()
            return 1
        roundno+=1

def select_count(game_count):
    if game_count<18:
        t=randint(1,3)
    else:
        t=21-game_count
    print(.format(t))
    return t

def request_count():
    t=
    while True:
        try:
            t=raw_input('Your choice 1 to 3:')
            if int(t) in [1,2,3]:
                return int(t)
            else:
                print()
        except:
            if t==:
                return None
            else:
                print()

c=0
m=0
r=True
while r:
    o=start()
    if o==-1:
        break
    else:
        c+=1 if o==0 else 0
        m+=1 if o==1 else 0
    print(.format(c,m))
    t=raw_input()
    r=(t==)"
s0lq9_1_3,s0lq9,21 game,Game Development,Card Games,python,T1,Different Comments,"from random import randint
def start():
	game_count=0
	print(.format(game_count))
	roundno=1
	while game_count<21:
		print(.format(roundno))
		t = select_count(game_count)
		game_count = game_count+t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 0
		t = request_count()
		if not t:
			print('OK,quitting the game')
			return -1
		game_count = game_count+t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 1
		roundno+=1

def select_count(game_count):
	if game_count<18:
		t= randint(1,3)
	else:
		t = 21-game_count
	print(.format(t))
	return t

def request_count():
	t=
	while True:
		try:
			t = raw_input('Your choice 1 to 3:')
			if int(t) in [1,2,3]:
				return int(t)
			else:
				print()
		except:
			if t==:
				return None
			else:
				print()

c=0
m=0
r=True
while r:
	o = start()
	if o==-1:
		break
	else:
		c+=1 if o==0 else 0
		m+=1 if o==1 else 0
	print(.format(c,m))
	t = raw_input()
	r = (t==)"
s0lq9_1_4,s0lq9,21 game,Game Development,Card Games,python,T1,Different Formatting,"from random import randint

def start():
    game_count = 0
    print(.format(game_count))
    roundno = 1
    while game_count < 21:
        print(.format(roundno))
        t = select_count(game_count)
        game_count = game_count + t
        print(.format(game_count))
        if game_count >= 21:
            print()
            return 0
        t = request_count()
        if not t:
            print('OK, quitting the game')
            return -1
        game_count = game_count + t
        print(.format(game_count))
        if game_count >= 21:
            print()
            return 1
        roundno += 1

def select_count(game_count):
    '''selects a random number if the game_count is less than 18. otherwise chooses the winning number'''
    if game_count < 18:
        t = randint(1, 3)
    else:
        t = 21 - game_count
    print(.format(t))
    return t

def request_count():
    '''request user input between 1,2 and 3. It will continue till either quit(q) or one of those numbers is requested.'''
    t = 
    while True:
        try:
            t = raw_input('Your choice 1 to 3:')
            if int(t) in [1, 2, 3]:
                return int(t)
            else:
                print()
        except:
            if t == :
                return None
            else:
                print()

c = 0
m = 0
r = True
while r:
    o = start()
    if o == -1:
        break
    else:
        c += 1 if o == 0 else 0
        m += 1 if o == 1 else 0
    print(.format(c, m))
    t = raw_input()
    r = (t == )"
s0lq9_2_1,s0lq9,21 game,Game Development,Card Games,python,T2,Different Variable Names,"from random import randint
def begin():
	play_count=0
	print(.format(play_count))
	iteration=1
	while play_count<21:
		print(.format(iteration))
		n = choose_count(play_count)
		play_count = play_count+n
		print(.format(play_count))
		if play_count>=21:
			print()
			return 0
		n = solicit_count()
		if not n:
			print('OK,quitting the game')
			return -1
		play_count = play_count+n
		print(.format(play_count))
		if play_count>=21:
			print()
			return 1
		iteration+=1

def choose_count(play_count):
	if play_count<18:
		n= randint(1,3)
	else:
		n = 21-play_count
	print(.format(n))
	return n

def solicit_count():
	n=
	while True:
		try:
			n = raw_input('Your choice 1 to 3:')
			if int(n) in [1,2,3]:
				return int(n)
			else:
				print()
		except:
			if n==:
				return None
			else:
				print()

 counter=0
 max_score=0
 running=True
 while running:
	 result = begin()
	 if result==-1:
		 break
	 else:
		 counter+=1 if result==0 else 0
		 max_score+=1 if result==1 else 0
	 print(.format(counter,max_score))
	 n = raw_input()
	 running = (n==)"
s0lq9_2_2,s0lq9,21 game,Game Development,Card Games,python,T2,Different Data Types,"from random import randint
def start():
	game_count=0
	print(str(game_count))
	roundno=1
	while game_count<21:
		print(str(roundno))
		t = select_count(game_count)
		game_count = game_count+t
		print(str(game_count))
		if game_count>=21:
			print()
			return 0
		t = request_count()
		if not t:
			print('OK,quitting the game')
			return -1
		game_count = game_count+t
		print(str(game_count))
		if game_count>=21:
			print()
			return 1
		roundno+=1

def select_count(game_count):
	if game_count<18:
		t= randint(1,3)
	else:
		t = 21-game_count
	print(str(t))
	return t

def request_count():
	t=''
	while True:
		try:
			t = input('Your choice 1 to 3:')
			if int(t) in [1,2,3]:
				return int(t)
			else:
				print()
		except:
			if t=='':
				return None
			else:
				print()

c=0
m=0
r=True
while r:
	o = start()
	if o==-1:
		break
	else:
		c+=1 if o==0 else 0
		m+=1 if o==1 else 0
	print(str(c)+','+str(m))
	t = input()
	r = (t=='')"
s0lq9_2_3,s0lq9,21 game,Game Development,Card Games,python,T2,Different Function Names,"from random import randint
def initiate():
	game_count=0
	print(.format(game_count))
	roundno=1
	while game_count<21:
		print(.format(roundno))
		t = choose_count(game_count)
		game_count = game_count+t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 0
		t = obtain_count()
		if not t:
			print('OK,quitting the game')
			return -1
		game_count = game_count+t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 1
		roundno+=1

def choose_count(game_count):
	if game_count<18:
		t= randint(1,3)
	else:
		t = 21-game_count
	print(.format(t))
	return t

def obtain_count():
	t=
	while True:
		try:
			t = raw_input('Your choice 1 to 3:')
			if int(t) in [1,2,3]:
				return int(t)
			else:
				print()
		except:
			if t==:
				return None
			else:
				print()

c=0
m=0
r=True
while r:
	o = initiate()
	if o==-1:
		break
	else:
		c+=1 if o==0 else 0
		m+=1 if o==1 else 0
	print(.format(c,m))
	t = raw_input()
	r = (t==)"
s0lq9_3_1,s0lq9,21 game,Game Development,Card Games,python,T3,Added Statements,"from random import randint
def start():
	game_count=0
	print(""Game Count: {}"".format(game_count))
	roundno=1
	while game_count<21:
		print(""Round Number: {}"".format(roundno))
		t = select_count(game_count)
		game_count = game_count+t
		print(""Current Game Count: {}"".format(game_count))
		if game_count>=21:
			print(""Game Over"")
			return 0
		t = request_count()
		if not t:
			print('OK, quitting the game')
			return -1
		game_count = game_count+t
		print(""Updated Game Count: {}"".format(game_count))
		if game_count>=21:
			print(""Game Finished"")
			return 1
		roundno+=1

def select_count(game_count):
	if game_count<18:
		t= randint(1,3)
	else:
		t = 21-game_count
	print(""Selected Count: {}"".format(t))
	return t

def request_count():
	t=""""
	while True:
		try:
			t = input('Your choice 1 to 3: ')
			if int(t) in [1,2,3]:
				return int(t)
			else:
				print(""Invalid input, please try again."")
		except ValueError:
			if t=="""":
				return None
			else:
				print(""Please enter a valid number."")

c=0
m=0
r=True
while r:
	o = start()
	if o==-1:
		break
	else:
		c+=1 if o==0 else 0
		m+=1 if o==1 else 0
	print(""Total Wins: {}, Total Losses: {}"".format(c,m))
	t = input(""Press Enter to continue or 'q' to quit."")
	r = (t=='')"
s0lq9_3_2,s0lq9,21 game,Game Development,Card Games,python,T3,Removed Statements,"from random import randint
def start():
	game_count=0
	roundno=1
	while game_count<21:
		t = select_count(game_count)
		game_count += t
		if game_count>=21:
			return 0
		t = request_count()
		if not t:
			return -1
		game_count += t
		if game_count>=21:
			return 1
		roundno+=1

def select_count(game_count):
	if game_count<18:
		return randint(1,3)
	return 21-game_count

def request_count():
	while True:
		try:
			t = raw_input('Your choice 1 to 3:')
			if int(t) in [1,2,3]:
				return int(t)
		except:
			if t=='':
				return None

c=0
m=0
r=True
while r:
	o = start()
	if o==-1:
		break
	c += 1 if o==0 else 0
	m += 1 if o==1 else 0
	t = raw_input()
	r = (t=='')"
s0lq9_3_3,s0lq9,21 game,Game Development,Card Games,python,T3,Reordered Statements,"from random import randint
def start():
	roundno=1
	game_count=0
	while game_count<21:
		print(.format(roundno))
		t = select_count(game_count)
		game_count = game_count+t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 0
		t = request_count()
		if not t:
			print('OK,quitting the game')
			return -1
		game_count = game_count+t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 1
		roundno+=1

def select_count(game_count):
	if game_count<18:
		t= randint(1,3)
	else:
		t = 21-game_count
	print(.format(t))
	return t

def request_count():
	t=
	while True:
		try:
			t = raw_input('Your choice 1 to 3:')
			if int(t) in [1,2,3]:
				return int(t)
			else:
				print()
		except:
			if t==:
				return None
			else:
				print()

c=0
m=0
r=True
while r:
	o = start()
	if o==-1:
		break
	else:
		c+=1 if o==0 else 0
		m+=1 if o==1 else 0
	print(.format(c,m))
	t = raw_input()
	r = (t==)"
s0lq9_3_4,s0lq9,21 game,Game Development,Card Games,python,T3,Control Flow Modifications,"from random import randint
def start():
	game_count=0
	print(.format(game_count))
	roundno=1
	for _ in range(21):
		print(.format(roundno))
		t = select_count(game_count)
		game_count += t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 0
		t = request_count()
		if t is None:
			print('OK,quitting the game')
			return -1
		game_count += t
		print(.format(game_count))
		if game_count>=21:
			print()
			return 1
		roundno += 1
		if roundno > 21:
			break

def select_count(game_count):
	if game_count < 18:
		t = randint(1, 3)
	else:
		t = 21 - game_count
	print(.format(t))
	return t

def request_count():
	t = ''
	while True:
		try:
			t = raw_input('Your choice 1 to 3:')
			if int(t) in [1, 2, 3]:
				return int(t)
			else:
				print()
		except:
			if t == '':
				return None
			else:
				print()

c=0
m=0
r=True
while r:
	o = start()
	if o == -1:
		break
	c += 1 if o == 0 else 0
	m += 1 if o == 1 else 0
	print(.format(c, m))
	t = raw_input()
	r = (t == '')"
s0lq9_4_1,s0lq9,21 game,Game Development,Card Games,python,T4,Same Language,"from random import randint

def start_game():
    game_count = 0
    round_number = 1
    while game_count < 21:
        game_count += print_round(round_number, game_count)
        if game_count >= 21:
            print()
            return 0
        user_input = get_user_input()
        if user_input is None:
            print('OK, quitting the game')
            return -1
        game_count += user_input
        if game_count >= 21:
            print()
            return 1
        round_number += 1

def print_round(round_number, game_count):
    print(f""Round: {round_number}"")
    count_selection = select_random_count(game_count)
    print(f""Count selected: {count_selection}"")
    return count_selection

def select_random_count(count):
    if count < 18:
        selection = randint(1, 3)
    else:
        selection = 21 - count
    print(f""Selected count: {selection}"")
    return selection

def get_user_input():
    while True:
        try:
            response = input('Your choice 1 to 3: ')
            if response in ['1', '2', '3']:
                return int(response)
            else:
                print()
        except EOFError:
            return None

total_games = 0
won_games = 0
keep_playing = True

while keep_playing:
    result = start_game()
    if result == -1:
        break
    else:
        total_games += result == 0
        won_games += result == 1
    print(f""Games played: {total_games}, Games won: {won_games}"")
    keep_playing = input() == ''"
s0lq9_4_2,s0lq9,21 game,Game Development,Card Games,go,T4,Different Language,"package main

import (
    ""bufio""
    ""fmt""
    ""log""
    ""math/rand""
    ""os""
    ""strconv""
    ""time""
)

var scanner = bufio.NewScanner(os.Stdin)

var (
    total = 0
    quit  = false
)

func itob(i int) bool {
    if i == 0 {
        return false
    }
    return true
}

func getChoice() {
    for {
        fmt.Print(""Your choice 1 to 3: "")
        scanner.Scan()
        if scerr := scanner.Err(); scerr != nil {
            log.Fatalln(scerr, ""when choosing number"")
        }
        text := scanner.Text()
        if text == ""q"" || text == ""Q"" {
            quit = true
            return
        }
        input, err := strconv.Atoi(text)
        if err != nil {
            fmt.Println(""Invalid number, try again"")
            continue
        }
        newTotal := total + input
        switch {
        case input < 1 || input > 3:
            fmt.Println(""Out of range, try again"")
        case newTotal > 21:
            fmt.Println(""Too big, try again"")
        default:
            total = newTotal
            fmt.Println(""Running total is now"", total)
            return
        }
    }
}

func main() {
    rand.Seed(time.Now().UnixNano())
    computer := itob(rand.Intn(2))
    fmt.Println(""Enter q to quit at any time\n"")
    if computer {
        fmt.Println(""The computer will choose first"")
    } else {
        fmt.Println(""You will choose first"")
    }
    fmt.Println(""\nRunning total is now 0\n"")
    var choice int
    for round := 1; ; round++ {
        fmt.Printf(""ROUND%d:\n\n"", round)
        for i := 0; i < 2; i++ {
            if computer {
                if total < 18 {
                    choice = 1 + rand.Intn(3)
                } else {
                    choice = 21 - total
                }
                total += choice
                fmt.Println(""The computer chooses"", choice)
                fmt.Println(""Running total is now"", total)
                if total == 21 {
                    fmt.Println(""\nSo, commiserations, the computer has won!"")
                    return
                }
            } else {
                getChoice()
                if quit {
                    fmt.Println(""OK, quitting the game"")
                    return
                }
                if total == 21 {
                    fmt.Println(""\nSo, congratulations, you've won!"")
                    return
                }
            }
            fmt.Println()
            computer = !computer
        }
    }
}"
s0lq9_4_2,s0lq9,21 game,Game Development,Card Games,java,T4,Different Language,"import java.util.Random;
import java.util.Scanner;

public class TwentyOneGame {

    public static void main(String[] args) {
        new TwentyOneGame().run(true, 21, new int[] {1, 2, 3});
    }

    public void run(boolean computerPlay, int max, int[] valid) {
        String comma = """";
        for ( int i = 0 ; i < valid.length ; i++ ) {
            comma += valid[i];
            if ( i < valid.length - 2 && valid.length >= 3 ) {
                comma += "", "";
            }
            if ( i == valid.length - 2 ) {
                comma += "" or "";
            }
        }
        System.out.printf(""The%d game.%nEach player chooses to add%s to a running total.%n"" + 
                ""The player whose turn it is when the total reaches%d will win the game.%n"" + 
                ""Winner of the game starts the next game.  Enter q to quit.%n%n"", max, comma, max);
        int cGames = 0;
        int hGames = 0;
        boolean anotherGame = true;
        try (Scanner scanner = new Scanner(System.in);) {
            while ( anotherGame ) {
                Random r = new Random();
                int round = 0;
                int total = 0;
                System.out.printf(""Start game%d%n"", hGames + cGames + 1);
                DONE:
                    while ( true ) {
                        round++;
                        System.out.printf(""ROUND%d:%n%n"", round);
                        for ( int play = 0 ; play < 2 ; play++ ) {
                            if ( computerPlay ) {
                                int guess = 0;"
s0lq9_4_2,s0lq9,21 game,Game Development,Card Games,javascript,T4,Different Language,"<!DOCTYPE html><html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""keywords""    content=""Game 21"">
    <meta name=""description"" content=""
      21 is a two player game, the game is played by choosing a number
      (1, 2, or 3) to be added to the running total. The game is won by
      the player whose chosen number causes the running total to reach
      exactly 21. The running total starts at zero.
    "">
    <!--DCMI metadata (Dublin Core Metadata Initiative)-->
    <meta name=""dc.publisher"" content=""Rosseta Code"">
    <meta name=""dc.date""      content=""2020-07-23"">
    <meta name=""dc.created""   content=""2020-07-23"">
    <meta name=""dc.modified""  content=""2020-07-30"">
    <title>
        21 Game
    </title>
    <!-- Remove the line below in the final/production version. -->
    <meta http-equiv=""cache-control"" content=""no-cache"">

    <style>
      .ui div   { width: 50%; display: inline-flex; justify-content: flex-end; }
      div.total { margin-bottom: 1ch; }
      label     { padding-right: 1ch; }
      button + button { margin-left: 1em; }
    </style>
</head>

<body>
  <h1>
    21 Game in ECMA Script (Java Script)
  </h1>

  <p>
    21 is a two player game, the game is played by choosing a number
    (1, 2, or 3) to be added to the running total. The game is won by
    the player whose chosen number causes the running total to reach
    exactly 21. The running total starts at zero.
  </p>

  <p><span id=""first""></span> Use buttons to play.</p>

  <div class=""ui"">
    <div class=""total"">
      <label for=""human"">human last choice:</label>
      <input type=""text"" id=""human"" readonly>
    </div>
    <div class=""total"">
      <label for=""AI"">AI last choice:</label>
      <input type=""text"" id=""AI"" readonly>
    </div>
    <div class=""total"">
      <label for=""runningTotalText"">running total:</label>
      <input type=""text"" id=""runningTotalText"" readonly>
    </div>
    <div class=""buttons"">
      <button onclick=""choice(1);"" id=""choice1""> one   </button>
      <button onclick=""choice(2);"" id=""choice2""> two   </button>
      <button onclick=""choice(3);"" id=""choice3""> three </button>
      <button onclick=""restart();""> restart </button>
    </div>
  </div>

  <p id=""message""></p>

  <noscript>
    No script, no fun. Turn on Javascript on.
  </noscript>

  <script>"
s0lq9_4_2,s0lq9,21 game,Game Development,Card Games,php,T4,Different Language,"<!DOCTYPE html>
<html lang=>

<head>
    <meta charset=>
    <meta name=    content=>
    <meta name= content=>
    <!--DCMI metadata (Dublin Core Metadata Initiative)-->
    <meta name= content=>
    <meta name=      content=>
    <meta name=   content=>
    <meta name=  content=>
    <title>
        21 Game
    </title>
    <!-- Remove the line below in the final/production version. -->
    <meta http-equiv= content=>

    <style>
      .ui div   { width: 50%; display: inline-flex; justify-content: flex-end; }
      div.total { margin-bottom: 1ch; }
      label     { padding-right: 1ch; }
      button + button { margin-left: 1em; }
    </style>
</head>

<body>

  <h1>
    21 Game in PHP 7
  </h1>

  <p>
    21 is a two player game, the game is played by choosing a number
    (1, 2, or 3) to be added to the running total. The game is won by
    the player whose chosen number causes the running total to reach
    exactly 21. The running total starts at zero.
  </p>


  <?php

    const GOAL = 21;
    const PLAYERS = array('AI', 'human');

    function best_move($n)
    {
      for ($i = 1; $i <= 3; $i++)
        if ($n + $i == GOAL)
          return $i;
      for ($i = 1; $i <= 3; $i++)
        if (($n + $i - 1) % 4 == 0)
          return $i;
      return 1;
    }

    if (isset($_GET['reset']) || !isset($_GET['total']))
    {
      $first = PLAYERS[rand(0, 1)];
      $total = 0;
      $human = 0;
      $ai = 0;
      $message = '';
      if ($first == 'AI')
      {
        $move = best_move($total);
        $ai = $move;
        $total = $total + $move;
      }
    }
    else
    {
      $first   = $_GET['first'];
      $total   = $_GET['total'];
      $human   = $_GET['human'];
      $ai      = $_GET['ai'];
      $message = $_GET['message'];
    }

    if (isset($_GET['move']))
    {
      $move = (int)$_GET['move'];
      $human = $move;
      $total = $total + $move;
      if ($total == GOAL)
        $message = 'The winner is human.';
      else
      {
        $move = best_move($total);
        $ai = $move;
        $total = $total + $move;
        if ($total == GOAL)
          $message = 'The winner is AI.';
      }
    }

    $state = array();
    for ($i = 1; $i <= 3; $i++)
      $state[$i] = $total + $i > GOAL? 'disabled' : '';

    echo <<< END
      <p>
        The first player is $first.
        Use buttons to play.
      </p>
      <form class=>
        <div>
          <input type='hidden' id='first' name='first' value='$first'>
          <input type='hidden' name='message' value='$message'>
        </div>
        <div class='total'>
          <label for='human'>human last choice:</label>
          <input type='text' name='human' readonly value='$human'>
        </div>
        <div class='total'>
          <label for='AI'>AI last choice:</label>
          <input type='text' name='ai' readonly value='$ai'>
        </div>
        <div class='total'>
          <label for='runningTotalText'>running total:</label>
          <input type='text' name='total' readonly value='$total'>
        </div>
        <div class='buttons'>
          <button type='submit' name='move' value='1' {$state[1]}> one   </button>
          <button type='submit' name='move' value='2' {$state[2]}> two   </button>
          <button type='submit' name='move' value='3' {$state[3]}> three </button>
          <button type='submit' name='reset' value='reset'> reset </button>
        </div>
      </form>
      <p>
        $message
      </p>
    END
  ?>

</body>"
s0lq9_4_2,s0lq9,21 game,Game Development,Card Games,ruby,T4,Different Language,"GOAL = 21
MIN_MOVE = 1
MAX_MOVE = 3

DESCRIPTION = 




def best_move(total)
  move = rand(1..3)
  MIN_MOVE.upto(MAX_MOVE) do |i|
    move = i if (total + i - 1) % (MAX_MOVE + 1) == 0
  end
  MIN_MOVE.upto(MAX_MOVE) do |i|
    move = i if total + i == GOAL
  end
  move
end




def get_move
  print 
  answer = gets
  move = answer.to_i
  until move.between?(MIN_MOVE, MAX_MOVE)
    exit if answer.chomp == 'q'
    print 'Invalid choice. Try again: '
    answer = gets
    move = answer.to_i
  end
  move
end




def restart?
  print 'Do you want to restart (y/n)? '
  restart = gets.chomp
  until ['y', 'n'].include?(restart)
    print 'Your answer is not a valid choice. Try again: '
    restart = gets.chomp
  end
  restart == 'y'
end






def game(player)
  total = round = 0
  while total < GOAL
    round += 1
    puts 
    player = (player + 1) % 2
    if player == 0
      move = best_move(total)
      puts 
    else
      move = get_move
    end
    total += move
    puts 
  end
  if player == 0
    puts 'Sorry, the computer has won!'
    return false
  end
  puts 'Well done, you have won!'
  true
end


puts DESCRIPTION
run = true
computer_wins = human_wins = 0
games_counter = player = 1
while run
  puts 
  player = (player + 1) % 2
  if game(player)
    human_wins += 1
  else
    computer_wins += 1
  end
  puts 
  games_counter += 1
  run = restart?
end
puts 'Good bye!'"
u5evd_1_1,u5evd,24 game,Game Development,Puzzles,python,T1,Identical Clone,"'''
 The 24 Game

 Given any four digits in the range 1 to 9, which may have repetitions,
 Using just the +, -, *, and / operators; and the possible use of
 brackets, (), show how to make an answer of 24.

 An answer of  will quit the game.
 An answer of  will generate a new set of four digits.
 Otherwise you are repeatedly asked for an expression until it evaluates to 24

 Note: you cannot form multiple digit numbers from the supplied digits,
 so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.

'''

from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    'four random digits >0 as characters'
    return [str(random.randint(1,9)) for i in range(4)]

def welcome(digits):
    print (__doc__)
    print ( + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(% trial)
        chk = check(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print (, ' '.join(digits))
            continue
        if not chk:
            print (% answer)
        else:
            ans = eval(answer)
            print (, ans)
            if ans == 24:
                print ()
    print ()   

if __name__ == '__main__': main()"
u5evd_1_2,u5evd,24 game,Game Development,Puzzles,python,T1,Different Whitespaces,"from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    return [str(random.randint(1,9)) for i in range(4)]

def welcome(digits):
    print(__doc__)
    print( + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial += 1
        answer = input(% trial)
        chk = check(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print( , ' '.join(digits))
            continue
        if not chk:
            print(% answer)
        else:
            ans = eval(answer)
            print( , ans)
            if ans == 24:
                print()
    print()   

if __name__ == '__main__': main()"
u5evd_1_3,u5evd,24 game,Game Development,Puzzles,python,T1,Different Comments,"from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    return [str(random.randint(1,9)) for i in range(4)]

def welcome(digits):
    print (__doc__)
    print ( + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(% trial)
        chk = check(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print (, ' '.join(digits))
            continue
        if not chk:
            print (% answer)
        else:
            ans = eval(answer)
            print (, ans)
            if ans == 24:
                print ()
    print ()   

if __name__ == '__main__': main()"
u5evd_1_4,u5evd,24 game,Game Development,Puzzles,python,T1,Different Formatting,"```
from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: 
    input = raw_input

def choose4():
    return [str(random.randint(1,9)) for i in range(4)]

def welcome(digits):
    print(__doc__)
    print('+ ' + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial += 1
        answer = input('% trial')
        chk = check(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print(', ' + ' '.join(digits))
            continue
        if not chk:
            print('% answer')
        else:
            ans = eval(answer)
            print(', ' + str(ans))
            if ans == 24:
                print()
    print()

if __name__ == '__main__':
    main()
```"
u5evd_2_1,u5evd,24 game,Game Development,Puzzles,python,T2,Different Variable Names,"from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def select_four():
    return [str(random.randint(1,9)) for j in range(4)]

def greet(numbers):
    print (__doc__)
    print ( + ' '.join(numbers))

def validate(response, numbers):
    permitted = set('() +-*/\t'+''.join(numbers))
    valid = all(char in permitted for char in response) and \
            all(numbers.count(num) == response.count(num) for num in set(numbers)) \
            and not re.search('\d\d', response)
    if valid:
        try:
            ast.parse(response)
        except:
            valid = False
    return valid

def execute():    
    numbers = select_four()
    greet(numbers)
    attempt = 0
    response = ''
    verif = res = False
    while not (verif and res == 24):
        attempt +=1
        response = input(% attempt)
        verif = validate(response, numbers)
        if response.lower() == 'q':
            break
        if response == '!':
            numbers = select_four()
            print (, ' '.join(numbers))
            continue
        if not verif:
            print (% response)
        else:
            res = eval(response)
            print (, res)
            if res == 24:
                print ()
    print ()   

if __name__ == '__main__': execute()"
u5evd_2_2,u5evd,24 game,Game Development,Puzzles,python,T2,Different Data Types,"from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    return [str(random.randint(1,9)) for i in range(4)]

def welcome(digits):
    print (__doc__)
    print (' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except Exception:
            ok = False
    return ok

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(""%d"" % trial)
        chk = check(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print(', '.join(digits))
            continue
        if not chk:
            print(""%s"" % answer)
        else:
            ans = eval(answer)
            print(', %s' % ans)
            if ans == 24:
                print()
    print()   

if __name__ == '__main__': main()"
u5evd_2_3,u5evd,24 game,Game Development,Puzzles,python,T2,Different Function Names,"from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def select4():
    return [str(random.randint(1,9)) for i in range(4)]

def greet(digits):
    print (__doc__)
    print ( + ' '.join(digits))

def validate(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def run():    
    digits = select4()
    greet(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(% trial)
        chk = validate(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = select4()
            print (, ' '.join(digits))
            continue
        if not chk:
            print (% answer)
        else:
            ans = eval(answer)
            print (, ans)
            if ans == 24:
                print ()
    print ()   

if __name__ == '__main__': run()"
u5evd_3_1,u5evd,24 game,Game Development,Puzzles,python,T3,Added Statements,"from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    return [str(random.randint(1,9)) for i in range(4)]

def welcome(digits):
    print (__doc__)
    print ('Digits:', ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input('Attempt %d: ' % trial)
        chk = check(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print('New Digits:', ' '.join(digits))
            continue
        if not chk:
            print('Invalid Expression:', answer)
        else:
            ans = eval(answer)
            print('Result:', ans)
            if ans == 24:
                print('Congratulations! You found 24.')
    print('Thank you for playing!')   

if __name__ == '__main__': main()"
u5evd_3_2,u5evd,24 game,Game Development,Puzzles,python,T3,Removed Statements,"from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    return [str(random.randint(1,9)) for i in range(4)]

def welcome(digits):
    print(__doc__)
    print(' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial += 1
        answer = input(""%d: "" % trial)
        chk = check(answer, digits)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print(' '.join(digits))
            continue
        if not chk:
            print(""Invalid input:"", answer)
        else:
            ans = eval(answer)
            print(ans)
            if ans == 24:
                print(""Congratulations!"")
    print(""Game Over"")

if __name__ == '__main__': main()"
u5evd_3_3,u5evd,24 game,Game Development,Puzzles,python,T3,Reordered Statements,"```
from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    'four random digits >0 as characters'
    return [str(random.randint(1,9)) for i in range(4)]

def welcome(digits):
    print (__doc__)
    print (' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial += 1
        answer = input('% trial')
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print(' ', ' '.join(digits))
            continue
        chk = check(answer, digits)
        if not chk:
            print('% answer')
        else:
            ans = eval(answer)
            print(' ', ans)
            if ans == 24:
                print()
    print()

if __name__ == '__main__': main()
```"
u5evd_3_4,u5evd,24 game,Game Development,Puzzles,python,T3,Control Flow Modifications,"from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    return [str(random.randint(1,9)) for _ in range(4)]

def welcome(digits):
    print(__doc__)
    print('+ ' + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) and \
         not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    
    while True:
        trial += 1
        answer = input(f""Attempt {trial}: "")
        
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print('+ ' + ' '.join(digits))
            continue
        
        chk = check(answer, digits)
        
        if not chk:
            print(f""Invalid expression: {answer}"")
            continue
        
        ans = eval(answer)
        print(f""Result: {ans}"")
        
        if ans == 24:
            print(""Congratulations! You've reached 24."")
            break

if __name__ == '__main__':
    main()"
u5evd_4_1,u5evd,24 game,Game Development,Puzzles,python,T4,Same Language,"```python
from __future__ import division, print_function
import random, ast, re
import sys

if sys.version_info[0] < 3: input = raw_input

def choose4():
    return [str(random.randint(1, 9)) for _ in range(4)]

def welcome(digits):
    print(__doc__)
    print(' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) and \
         not re.search(r'\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
  
    while True:
        trial += 1
        answer = input('%d: ' % trial)
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            print('New digits:', ' '.join(digits))
            continue
        if not check(answer, digits):
            print('Invalid expression:', answer)
            continue
        ans = eval(answer)
        print('Result:', ans)
        if ans == 24:
            print('Congratulations! You reached 24.')
            break

if __name__ == '__main__': 
    main()
```"
u5evd_4_2,u5evd,24 game,Game Development,Puzzles,go,T4,Different Language,"package main

import (
    ""fmt""
    ""math""
    ""math/rand""
    ""time""
)

func main() {
    rand.Seed(time.Now().Unix())
    n := make([]rune, 4)
    for i := range n {
        n[i] = rune(rand.Intn(9) + '1')
    }
    fmt.Printf(""Your numbers:%c\n"", n)
    fmt.Print(""Enter RPN: "")
    var expr string
    fmt.Scan(&expr)
    if len(expr) != 7 {
        fmt.Println(""invalid. expression length must be 7."" +
            "" (4 numbers, 3 operators, no spaces)"")
        return
    }
    stack := make([]float64, 0, 4)
    for _, r := range expr {
        if r >= '0' && r <= '9' {
            if len(n) == 0 {
                fmt.Println(""too many numbers."")
                return
            }
            i := 0
            for n[i] != r {
                i++
                if i == len(n) {
                    fmt.Println(""wrong numbers."")
                    return
                }
            }
            n = append(n[:i], n[i+1:]...)
            stack = append(stack, float64(r-'0'))
            continue
        }
        if len(stack) < 2 {
            fmt.Println(""invalid expression syntax."")
            return
        }
        switch r {
        case '+':
            stack[len(stack)-2] += stack[len(stack)-1]
        case '-':
            stack[len(stack)-2] -= stack[len(stack)-1]
        case '*':
            stack[len(stack)-2] *= stack[len(stack)-1]
        case '/':
            stack[len(stack)-2] /= stack[len(stack)-1]
        default:
            fmt.Printf(""%c invalid.\n"", r)
            return
        }
        stack = stack[:len(stack)-1]
    }
    if math.Abs(stack[0]-24) > 1e-6 {
        fmt.Println(""incorrect."", stack[0], ""!= 24"")
    } else {
        fmt.Println(""correct."")
    }
}"
u5evd_4_2,u5evd,24 game,Game Development,Puzzles,java,T4,Different Language,"import java.util.*;

public class Game24 {
    static Random r = new Random();

    public static void main(String[] args) {

        int[] digits = randomDigits();
        Scanner in = new Scanner(System.in);

        System.out.print(""Make 24 using these digits: "");
        System.out.println(Arrays.toString(digits));
        System.out.print(""> "");

        Stack<Float> s = new Stack<>();
        long total = 0;
        for (char c : in.nextLine().toCharArray()) {
            if ('0' <= c && c <= '9') {
                int d = c - '0';
                total += (1 << (d * 5));
                s.push((float) d);
            } else if (""+/-*"".indexOf(c) != -1) {
                s.push(applyOperator(s.pop(), s.pop(), c));
            }
        }
        if (tallyDigits(digits) != total)
            System.out.print(""Not the same digits. "");
        else if (Math.abs(24 - s.peek()) < 0.001F)
            System.out.println(""Correct!"");
        else
            System.out.print(""Not correct."");
    }

    static float applyOperator(float a, float b, char c) {
        switch (c) {
            case '+':
                return a + b;
            case '-':
                return b - a;
            case '*':
                return a * b;
            case '/':
                return b / a;
            default:
                return Float.NaN;
        }
    }

    static long tallyDigits(int[] a) {
        long total = 0;
        for (int i = 0; i < 4; i++)
            total += (1 << (a[i] * 5));
        return total;
    }

    static int[] randomDigits() {        
        int[] result = new int[4];
        for (int i = 0; i < 4; i++)
            result[i] = r.nextInt(9) + 1;
        return result;
    }
}"
u5evd_4_2,u5evd,24 game,Game Development,Puzzles,javascript,T4,Different Language,"function twentyfour(numbers, input) {
    var invalidChars = /[^\d\+\*\/\s-\(\)]/;

    var validNums = function(str) {"
u5evd_4_2,u5evd,24 game,Game Development,Puzzles,php,T4,Different Language,"The 24 Game

Given any four digits in the range 1 to 9, which may have repetitions,
Using just the +, -, *, and / operators; and the possible use of
brackets, (), show how to make an answer of 24.

An answer of  will quit the game.
An answer of  will generate a new set of four digits.
Otherwise you are repeatedly asked for an expression until it evaluates to 24

Note: you cannot form multiple digit numbers from the supplied digits,
so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.

<?php

while (true) {
    $numbers = make_numbers();

    for ($iteration_num = 1; ; $iteration_num++) {
        echo ;

        $entry = rtrim(fgets(STDIN));

        if ($entry === '!') break;
        if ($entry === 'q') exit;

        $result = play($numbers, $entry);

        if ($result === null) {
            echo ;
            continue;
        }
        elseif ($result != 24) {
            echo ;
            continue;
        }
        else {
            echo ;
            exit;
        }
    }
}

function make_numbers() {
    $numbers = array();

    echo ;

    for ($i = 0; $i < 4; $i++) {
        $number = rand(1, 9);
        
        if (!isset($numbers[$number])) {
            $numbers[$number] = 0;
        }
        $numbers[$number]++;
        print ;
    }

    print ;

    return $numbers;
}

function play($numbers, $expression) {
    $operator = true;
    for ($i = 0, $length = strlen($expression); $i < $length; $i++) {
        $character = $expression[$i];

        if (in_array($character, array('(', ')', ' ', ))) continue;

        $operator = !$operator;

        if (!$operator) {
            if (!empty($numbers[$character])) {
                $numbers[$character]--;
                continue;
            }
            return;
        }
        elseif (!in_array($character, array('+', '-', '*', '/'))) {
            return;
        }
    }

    foreach ($numbers as $remaining) {
        if ($remaining > 0) {
            return;
        }
    }

    return eval();
}
?>"
u5evd_4_2,u5evd,24 game,Game Development,Puzzles,ruby,T4,Different Language,"class Guess < String
  def self.play
    nums = Array.new(4){rand(1..9)}
    loop do
      result = get(nums).evaluate!
      break if result == 24.0
      puts 
    end
    puts 
  end

  def self.get(nums)
    loop do
      print 
      input = gets.chomp
      return new(input) if validate(input, nums)
    end
  end

  def self.validate(guess, nums)
    name, error =
      {
        invalid_character:  ->(str){!str.scan(%r{[^\d\s()+*/-]}).empty? },
        wrong_number:       ->(str){ str.scan(/\d/).map(&:to_i).sort!= nums.sort },
        multi_digit_number: ->(str){ str.match(/\d\d/) }
      }
        .find {|name, validator| validator[guess] }

    error? puts(): true
  end

  def evaluate!
    as_rat = gsub(/(\d)/, '\1r')        
    eval 
  rescue SyntaxError
    
  end
end

Guess.play"
r70gq_1_1,r70gq,24 game/Solve,Game Development,Puzzles,python,T1,Identical Clone,"'''
 The 24 Game Player

 Given any four digits in the range 1 to 9, which may have repetitions,
 Using just the +, -, *, and / operators; and the possible use of
 brackets, (), show how to make an answer of 24.

 An answer of   will quit the game.
 An answer of   will generate a new set of four digits.
 An answer of  will ask you for a new set of four digits.
 An answer of   will compute an expression for the current digits.

 Otherwise you are repeatedly asked for an expression until it evaluates to 24

 Note: you cannot form multiple digit numbers from the supplied digits,
 so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.

'''

from   __future__ import division, print_function
from   itertools  import permutations, combinations, product, \
                         chain
from   pprint     import pprint as pp
from   fractions  import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest


def choose4():
    'four random digits >0 as characters'
    return [str(random.randint(1,9)) for i in range(4)]

def ask4():
    'get four random digits >0 from the player'
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)

def welcome(digits):
    print (__doc__)
    print ( + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def solve(digits):
    
    digilen = len(digits)
    
    exprlen = 2 * digilen - 1
    
    digiperm = sorted(set(permutations(digits)))
    
    opcomb   = list(product('+-*/', repeat=digilen-1))
    
    brackets = ( [()] + [(x,y)
                         for x in range(0, exprlen, 2)
                         for y in range(x+4, exprlen+2, 2)
                         if (x,y) != (0,exprlen+1)]
                 + [(0, 3+1, 4+2, 7+3)] ) 
    for d in digiperm:
        for ops in opcomb:
            if '/' in ops:
                d2 = [('F(%s)'% i) for i in d] 
            else:
                d2 = d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[::]
                for insertpoint, bracket in zip(b, '()'*(len(b)
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [ (term if not term.startswith('F(') else term[2])
                               for term in exp ]
                    ans = ' '.join(exp).rstrip()
                    print (,ans)
                    return ans
    print (, ' '.join(digits))            
    return '!'

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(% trial)
        chk = check(answer, digits)
        if answer == '?':
            solve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            trial = 0
            print (, ' '.join(digits))
            continue
        if answer == '!!':
            digits = ask4()
            trial = 0
            print (, ' '.join(digits))
            continue
        if not chk:
            print (% answer)
        else:
            if '/' in answer:
                
                answer = ''.join( (('F(%s)'% char) if char in '123456789' else char)
                                  for char in answer )
            ans = eval(answer)
            print (, ans)
            if ans == 24:
                print ()
    print ()   

main()"
r70gq_1_2,r70gq,24 game/Solve,Game Development,Puzzles,python,T1,Different Whitespaces,"```
from__future__importdivision,print_function
fromitertoolsimportpermutations,combinations,product,\
chain
frompprintimportpprintaspp
fromfractionsimportFractionasF
importrandom,ast,re
importsys
ifsys.version_info[0]<3:
    input=raw_input
    fromitertoolsimportizip_longestaszip_longest
else:
    fromitertoolsimportzip_longest
defchoose4():
    'four random digits >0 as characters'
    return[str(random.randint(1,9))foriinrange(4)]
defask4():
    'get four random digits >0 from the player'
    digits=''
    whilelen(digits)!=4oronotall(din'123456789'fordindigits):
        digits=input('Enter the digits to solve for: ')
        digits=''.join(digits.strip().split())
    returnlist(digits)
defwelcome(digits):
    print(__doc__)
    print('+ ''.join(digits))
defcheck(answer,digits):
    allowed=set('() +-*/\t' + ''.join(digits))
    ok=all(chinallowedforchinanswer)and\
    all(digits.count(dig)==answer.count(dig)fordiginset(digits))\
    andnotre.search('\d\d',answer)
    ifok:
        try:
            ast.parse(answer)
        except:
            ok=False
    returnok
defsolve(digits):    
    digilen=len(digits)    
    exprlen=2*digilen-1    
    digiperm=sorted(set(permutations(digits)))    
    opcomb=list(product('+-*/',repeat=digilen-1))    
    brackets=([()] + [(x,y)forxinrange(0,exprlen,2)foryinrange(x+4,exprlen+2,2)if(x,y)!=(0,exprlen+1)]+[(0,3+1,4+2,7+3)]) 
    fordin digiperm:
        foropsin opcomb:
            if'/'in ops:
                d2=[('F(%s)'%i)foriin d] 
            else:
                d2=d
            ex=list(chain.from_iterable(zip_longest(d2,ops,fillvalue='')))
            forbin brackets:
                exp=ex[::]
                forinsertpoint,bracketinzip(b,'()'*(len(b)):
                    exp.insert(insertpoint,bracket)
                txt=''.join(exp)
                try:
                    num=eval(txt)
                exceptZeroDivisionError:
                    continue
                ifnum==24:
                    if'/'in ops:
                        exp=[(termifnotterm.startswith('F(')elseterm[2])forderminexp]
                    ans=' '.join(exp).rstrip()
                    print( ,ans)
                    returnans
    print(,' '.join(digits))            
    return'!'
defmain():    
    digits=choose4()
    welcome(digits)
    trial=0
    answer=''
    chk=ans=False
    while not(chkandans==24):
        trial+=1
        answer=input(%trial)
        chk=check(answer,digits)
        ifanswer=='?':
            solve(digits)
            answer='!'
        ifanswer.lower()=='q':
            break
        ifanswer=='!':
            digits=choose4()
            trial=0
            print(,' '.join(digits))
            continue
        ifanswer=='!!':
            digits=ask4()
            trial=0
            print(,' '.join(digits))
            continue
        ifnotchk:
            print(%answer)
        else:
            if'/'in answer:
                
                answer=''.join((('F(%s)'%char)ifcharin'123456789'elsechar)fordacharinanswer)
            ans=eval(answer)
            print( ,ans)
            ifans==24:
                print()
    print()   
main()
```"
r70gq_1_3,r70gq,24 game/Solve,Game Development,Puzzles,python,T1,Different Comments,"```
from   __future__ import division, print_function
from   itertools  import permutations, combinations, product, \
                         chain
from   pprint     import pprint as pp
from   fractions  import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest


def choose4():
    'Generate four random digits in string format'
    return [str(random.randint(1,9)) for i in range(4)]

def ask4():
    'Request four digits from the player'
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)

def welcome(digits):
    print (__doc__)
    print ( + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def solve(digits):
    
    digilen = len(digits)
    
    exprlen = 2 * digilen - 1
    
    digiperm = sorted(set(permutations(digits)))
    
    opcomb   = list(product('+-*/', repeat=digilen-1))
    
    brackets = ( [()] + [(x,y)
                         for x in range(0, exprlen, 2)
                         for y in range(x+4, exprlen+2, 2)
                         if (x,y) != (0,exprlen+1)]
                 + [(0, 3+1, 4+2, 7+3)] ) 
    for d in digiperm:
        for ops in opcomb:
            if '/' in ops:
                d2 = [('F(%s)'% i) for i in d] 
            else:
                d2 = d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[::]
                for insertpoint, bracket in zip(b, '()'*(len(b)
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [ (term if not term.startswith('F(') else term[2])
                               for term in exp ]
                    ans = ' '.join(exp).rstrip()
                    print (,ans)
                    return ans
    print (, ' '.join(digits))            
    return '!'

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(% trial)
        chk = check(answer, digits)
        if answer == '?':
            solve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            trial = 0
            print (, ' '.join(digits))
            continue
        if answer == '!!':
            digits = ask4()
            trial = 0
            print (, ' '.join(digits))
            continue
        if not chk:
            print (% answer)
        else:
            if '/' in answer:
                
                answer = ''.join( (('F(%s)'% char) if char in '123456789' else char)
                                  for char in answer )
            ans = eval(answer)
            print (, ans)
            if ans == 24:
                print ()
    print ()   

main()
```"
r70gq_1_4,r70gq,24 game/Solve,Game Development,Puzzles,python,T1,Different Formatting,"```
from __future__ import division, print_function
from itertools import permutations, combinations, product, chain
from pprint import pprint as pp
from fractions import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest

def choose4():
    return [str(random.randint(1, 9)) for i in range(4)]

def ask4():
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)

def welcome(digits):
    print(__doc__)
    print(' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def solve(digits):
    digilen = len(digits)
    exprlen = 2 * digilen - 1
    digiperm = sorted(set(permutations(digits)))
    opcomb = list(product('+-*/', repeat=digilen - 1))
    brackets = ([()] + [(x, y) for x in range(0, exprlen, 2) for y in range(x + 4, exprlen + 2, 2) if (x, y) != (0, exprlen + 1)] + [(0, 3 + 1, 4 + 2, 7 + 3)])
    
    for d in digiperm:
        for ops in opcomb:
            if '/' in ops:
                d2 = [('F(%s)' % i) for i in d]
            else:
                d2 = d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[::]
                for insertpoint, bracket in zip(b, '()' * (len(b))):
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [(term if not term.startswith('F(') else term[2]) for term in exp]
                    ans = ' '.join(exp).rstrip()
                    print(ans)
                    return ans
    print(' '.join(digits))
    return '!'

def main():
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial += 1
        answer = input('% trial')
        chk = check(answer, digits)
        if answer == '?':
            solve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            trial = 0
            print(' '.join(digits))
            continue
        if answer == '!!':
            digits = ask4()
            trial = 0
            print(' '.join(digits))
            continue
        if not chk:
            print(answer)
        else:
            if '/' in answer:
                answer = ''.join((('F(%s)' % char) if char in '123456789' else char) for char in answer)
            ans = eval(answer)
            print(ans)
            if ans == 24:
                print()
    print()

main()
```"
r70gq_2_1,r70gq,24 game/Solve,Game Development,Puzzles,python,T2,Different Variable Names,"'''
 The 24 Game Player

 Given any four digits in the range 1 to 9, which may have repetitions,
 Using just the +, -, *, and / operators; and the possible use of
 brackets, (), show how to make an answer of 24.

 An answer of   will quit the game.
 An answer of   will generate a new set of four digits.
 An answer of  will ask you for a new set of four digits.
 An answer of   will compute an expression for the current digits.

 Otherwise you are repeatedly asked for an expression until it evaluates to 24

 Note: you cannot form multiple digit numbers from the supplied digits,
 so an answer of 12+12 when given 1, 2, 2, and 1 would not be allowed.

'''

from   __future__ import division, print_function
from   itertools  import permutations, combinations, product, \
                         chain
from   pprint     import pprint as pp
from   fractions  import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest


def select4():
    'four random digits >0 as characters'
    return [str(random.randint(1,9)) for _ in range(4)]

def query4():
    'get four random digits >0 from the player'
    nums = ''
    while len(nums) != 4 or not all(d in '123456789' for d in nums):
        nums = input('Enter the digits to solve for: ')
        nums = ''.join(nums.strip().split())
    return list(nums)

def greet(nums):
    print (__doc__)
    print ( + ' '.join(nums))

def validate(answer, nums):
    allowed = set('() +-*/\t'+''.join(nums))
    valid = all(ch in allowed for ch in answer) and \
         all(nums.count(num) == answer.count(num) for num in set(nums)) \
         and not re.search('\d\d', answer)
    if valid:
        try:
            ast.parse(answer)
        except:
            valid = False
    return valid

def compute(nums):
    
    numlen = len(nums)
    
    explen = 2 * numlen - 1
    
    numperm = sorted(set(permutations(nums)))
    
    opcomb   = list(product('+-*/', repeat=numlen-1))
    
    brackets = ( [()] + [(x,y)
                         for x in range(0, explen, 2)
                         for y in range(x+4, explen+2, 2)
                         if (x,y) != (0,explen+1)]
                 + [(0, 3+1, 4+2, 7+3)] ) 
    for n in numperm:
        for ops in opcomb:
            if '/' in ops:
                n2 = [('F(%s)'% i) for i in n] 
            else:
                n2 = n
            exp = list(chain.from_iterable(zip_longest(n2, ops, fillvalue='')))
            for b in brackets:
                expr = exp[::]
                for insertpoint, bracket in zip(b, '()'*(len(b)
                    expr.insert(insertpoint, bracket)
                txt = ''.join(expr)
                try:
                    result = eval(txt)
                except ZeroDivisionError:
                    continue
                if result == 24:
                    if '/' in ops:
                        expr = [ (term if not term.startswith('F(') else term[2])
                               for term in expr ]
                    answer = ' '.join(expr).rstrip()
                    print (,answer)
                    return answer
    print (, ' '.join(nums))            
    return '!'

def main():    
    nums = select4()
    greet(nums)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(% trial)
        chk = validate(answer, nums)
        if answer == '?':
            compute(nums)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            nums = select4()
            trial = 0
            print (, ' '.join(nums))
            continue
        if answer == '!!':
            nums = query4()
            trial = 0
            print (, ' '.join(nums))
            continue
        if not chk:
            print (% answer)
        else:
            if '/' in answer:
                
                answer = ''.join( (('F(%s)'% char) if char in '123456789' else char)
                                  for char in answer )
            ans = eval(answer)
            print (, ans)
            if ans == 24:
                print ()
    print ()   

main()
'''"
r70gq_2_2,r70gq,24 game/Solve,Game Development,Puzzles,python,T2,Different Data Types,"from __future__ import division, print_function
from itertools import permutations, combinations, product, chain
from pprint import pprint as pp
from fractions import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest

def choose4():
    return [str(random.randint(1, 9)) for i in range(4)]

def ask4():
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)

def welcome(digits):
    print(__doc__)
    print(' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def solve(digits):
    digilen = len(digits)
    exprlen = 2 * digilen - 1
    digiperm = sorted(set(permutations(digits)))
    opcomb = list(product('+-*/', repeat=digilen - 1))
    brackets = ([()] + [(x, y)
                         for x in range(0, exprlen, 2)
                         for y in range(x + 4, exprlen + 2, 2)
                         if (x, y) != (0, exprlen + 1)]
                + [(0, 3 + 1, 4 + 2, 7 + 3)]) 
    for d in digiperm:
        for ops in opcomb:
            if '/' in ops:
                d2 = [('F(%s)' % i) for i in d]
            else:
                d2 = d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[:]
                for insertpoint, bracket in zip(b, '()' * (len(b))):
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [(term if not term.startswith('F(') else term[2])
                                for term in exp]
                    ans = ' '.join(exp).rstrip()
                    print(ans)
                    return ans
    print(' '.join(digits))
    return '!'

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial += 1
        answer = input(f'{trial}: ')
        chk = check(answer, digits)
        if answer == '?':
            solve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            trial = 0
            print(' '.join(digits))
            continue
        if answer == '!!':
            digits = ask4()
            trial = 0
            print(' '.join(digits))
            continue
        if not chk:
            print(f'Invalid expression: {answer}')
        else:
            if '/' in answer:
                answer = ''.join((('F(%s)' % char) if char in '123456789' else char)
                                 for char in answer)
            ans = eval(answer)
            print(ans)
            if ans == 24:
                print()
    print()   

main()"
r70gq_2_3,r70gq,24 game/Solve,Game Development,Puzzles,python,T2,Different Function Names,"from   __future__ import division, print_function
from   itertools  import permutations, combinations, product, \
                         chain
from   pprint     import pprint as pp
from   fractions  import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest


def select4():
    return [str(random.randint(1,9)) for i in range(4)]

def request4():
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)

def greet(digits):
    print (__doc__)
    print ( + ' '.join(digits))

def validate(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def resolve(digits):
    
    digilen = len(digits)
    
    exprlen = 2 * digilen - 1
    
    digiperm = sorted(set(permutations(digits)))
    
    opcomb   = list(product('+-*/', repeat=digilen-1))
    
    brackets = ( [()] + [(x,y)
                         for x in range(0, exprlen, 2)
                         for y in range(x+4, exprlen+2, 2)
                         if (x,y) != (0,exprlen+1)]
                 + [(0, 3+1, 4+2, 7+3)] ) 
    for d in digiperm:
        for ops in opcomb:
            if '/' in ops:
                d2 = [('F(%s)'% i) for i in d] 
            else:
                d2 = d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[::]
                for insertpoint, bracket in zip(b, '()'*(len(b)
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [ (term if not term.startswith('F(') else term[2])
                               for term in exp ]
                    ans = ' '.join(exp).rstrip()
                    print (,ans)
                    return ans
    print (, ' '.join(digits))            
    return '!'

def run():    
    digits = select4()
    greet(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(% trial)
        chk = validate(answer, digits)
        if answer == '?':
            resolve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = select4()
            trial = 0
            print (, ' '.join(digits))
            continue
        if answer == '!!':
            digits = request4()
            trial = 0
            print (, ' '.join(digits))
            continue
        if not chk:
            print (% answer)
        else:
            if '/' in answer:
                
                answer = ''.join( (('F(%s)'% char) if char in '123456789' else char)
                                  for char in answer )
            ans = eval(answer)
            print (, ans)
            if ans == 24:
                print ()
    print ()   

run()"
r70gq_3_1,r70gq,24 game/Solve,Game Development,Puzzles,python,T3,Added Statements,"```
from __future__ import division, print_function
from itertools import permutations, combinations, product, chain
from pprint import pprint as pp
from fractions import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest

def choose4():
    return [str(random.randint(1,9)) for _ in range(4)]

def ask4():
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)

def welcome(digits):
    print(__doc__)
    print('Digits:', ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def solve(digits):
    digilen = len(digits)
    exprlen = 2 * digilen - 1
    digiperm = sorted(set(permutations(digits)))
    opcomb   = list(product('+-*/', repeat=digilen-1))
    
    brackets = ([()] + [(x, y)
                         for x in range(0, exprlen, 2)
                         for y in range(x + 4, exprlen + 2, 2)
                         if (x, y) != (0, exprlen + 1)] +
                [(0, 3 + 1, 4 + 2, 7 + 3)])
    
    for d in digiperm:
        for ops in opcomb:
            if '/' in ops:
                d2 = [('F(%s)' % i) for i in d]
            else:
                d2 = d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[:]
                for insertpoint, bracket in zip(b, '()' * (len(b) // 2)):
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [(term if not term.startswith('F(') else term[2])
                               for term in exp]
                    ans = ' '.join(exp).rstrip()
                    print('Expression found:', ans)
                    return ans
    print('No solution for:', ' '.join(digits))            
    return '!'

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    
    while not (chk and ans == 24):
        trial += 1
        answer = input(f'Trial {trial}: ')
        chk = check(answer, digits)
        
        if answer == '?':
            solve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            trial = 0
            print('New digits:', ' '.join(digits))
            continue
        if answer == '!!':
            digits = ask4()
            trial = 0
            print('New user digits:', ' '.join(digits))
            continue
        if not chk:
            print('Invalid expression:', answer)
        else:
            if '/' in answer:
                answer = ''.join((('F(%s)' % char) if char in '123456789' else char) for char in answer)
            ans = eval(answer)
            print('Result:', ans)
            if ans == 24:
                print('Congratulations! You found 24.')
    print('Game over.')   

main()
```"
r70gq_3_2,r70gq,24 game/Solve,Game Development,Puzzles,python,T3,Removed Statements,"from __future__ import division, print_function
from itertools import permutations, product, chain
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input

def choose4():
    return [str(random.randint(1,9)) for i in range(4)]

def ask4():
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)

def welcome(digits):
    print (__doc__)
    print(' ' + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def solve(digits):
    digiperm = sorted(set(permutations(digits)))
    opcomb = list(product('+-*/', repeat=3))
    brackets = [()] + [(x,y) for x in range(0, 9, 2) for y in range(x+4, 11, 2) if (x,y) != (0,12)]
    
    for d in digiperm:
        for ops in opcomb:
            d2 = [('F(%s)' % i) for i in d] if '/' in ops else d
            ex = list(chain.from_iterable(zip(d2, ops + ('',))))
            for b in brackets:
                exp = ex[:]
                for insertpoint, bracket in zip(b, '()'*(len(b))):
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    if eval(txt) == 24:
                        print(' '.join(exp).rstrip())
                        return
                except ZeroDivisionError:
                    continue
    print(' '.join(digits))            

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    while True:
        trial += 1
        answer = input(f'Trial {trial}: ')
        if answer == '?':
            solve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            trial = 0
            print(' '.join(digits))
            continue
        if not check(answer, digits):
            print(answer)
        else:
            ans = eval(answer.replace('F(', '').replace(')', '')) if 'F(' in answer else eval(answer)
            print(ans)
            if ans == 24:
                print()
    print()   

main()"
r70gq_3_3,r70gq,24 game/Solve,Game Development,Puzzles,python,T3,Reordered Statements,"```python
from   __future__ import division, print_function
from   itertools  import permutations, combinations, product, \
                         chain
from   pprint     import pprint as pp
from   fractions  import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest


def choose4():
    return [str(random.randint(1,9)) for i in range(4)]

def ask4():
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ')
        digits = ''.join(digits.strip().split())
    return list(digits)

def welcome(digits):
    print (__doc__)
    print ( + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t'+''.join(digits))
    ok = all(ch in allowed for ch in answer) and \
         all(digits.count(dig) == answer.count(dig) for dig in set(digits)) \
         and not re.search('\d\d', answer)
    if ok:
        try:
            ast.parse(answer)
        except:
            ok = False
    return ok

def solve(digits):
    digilen = len(digits)
    exprlen = 2 * digilen - 1
    digiperm = sorted(set(permutations(digits)))
    opcomb   = list(product('+-*/', repeat=digilen-1))
    brackets = ( [()] + [(x,y)
                         for x in range(0, exprlen, 2)
                         for y in range(x+4, exprlen+2, 2)
                         if (x,y) != (0,exprlen+1)]
                 + [(0, 3+1, 4+2, 7+3)] ) 
    for d in digiperm:
        for ops in opcomb:
            if '/' in ops:
                d2 = [('F(%s)'% i) for i in d] 
            else:
                d2 = d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[::]
                for insertpoint, bracket in zip(b, '()'*(len(b))):
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [ (term if not term.startswith('F(') else term[2])
                               for term in exp ]
                    ans = ' '.join(exp).rstrip()
                    print (,ans)
                    return ans
    print (, ' '.join(digits))            
    return '!'

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = ans = False
    while not (chk and ans == 24):
        trial +=1
        answer = input(% trial)
        chk = check(answer, digits)
        if answer == '?':
            solve(digits)
            answer = '!'
        if answer.lower() == 'q':
            break
        if answer == '!':
            digits = choose4()
            trial = 0
            print (, ' '.join(digits))
            continue
        if answer == '!!':
            digits = ask4()
            trial = 0
            print (, ' '.join(digits))
            continue
        if not chk:
            print (% answer)
        else:
            if '/' in answer:                
                answer = ''.join( (('F(%s)'% char) if char in '123456789' else char)
                                  for char in answer )
            ans = eval(answer)
            print (, ans)
            if ans == 24:
                print ()
    print ()   

main()
```"
r70gq_3_4,r70gq,24 game/Solve,Game Development,Puzzles,python,T3,Control Flow Modifications,"```python
from __future__ import division, print_function
from itertools import permutations, combinations, product, chain
from pprint import pprint as pp
from fractions import Fraction as F
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest

def choose4():
    return [str(random.randint(1,9)) for _ in range(4)]

def ask4():
    while True:
        digits = input('Enter the digits to solve for: ').strip().replace("" "", """")
        if len(digits) == 4 and all(d in '123456789' for d in digits):
            return list(digits)

def welcome(digits):
    print(__doc__)
    print(' ' + ' '.join(digits))

def check(answer, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    if all(ch in allowed for ch in answer) and \
       all(digits.count(dig) == answer.count(dig) for dig in set(digits)) and \
       not re.search('\d\d', answer):
        try:
            ast.parse(answer)
            return True
        except:
            return False
    return False

def solve(digits):
    digilen = len(digits)
    exprlen = 2 * digilen - 1
    digiperm = sorted(set(permutations(digits)))
    opcomb = list(product('+-*/', repeat=digilen - 1))
    brackets = ([()] + [(x, y) for x in range(0, exprlen, 2) 
                        for y in range(x + 4, exprlen + 2, 2) 
                        if (x, y) != (0, exprlen + 1)] 
                        + [(0, 3 + 1, 4 + 2, 7 + 3)])
    
    for d in digiperm:
        for ops in opcomb:
            d2 = [('F(%s)' % i) for i in d] if '/' in ops else d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[:]
                for insertpoint, bracket in zip(b, '()' * (len(b))):
                    exp.insert(insertpoint, bracket)
                txt = ''.join(exp)
                try:
                    num = eval(txt)
                except ZeroDivisionError:
                    continue
                if num == 24:
                    if '/' in ops:
                        exp = [(term if not term.startswith('F(') else term[2]) for term in exp]
                    ans = ' '.join(exp).rstrip()
                    print(', ', ans)
                    return ans
    print(', ', ' '.join(digits))
    return '!'

def main():    
    digits = choose4()
    welcome(digits)
    trial = 0
    answer = ''
    chk = False
    ans = 0
    while not (chk and ans == 24):
        trial += 1
        answer = input('% trial')
        chk = check(answer, digits)
        if answer == '?':
            solve(digits)
            answer = '!'
        elif answer.lower() == 'q':
            break
        elif answer == '!':
            digits = choose4()
            trial = 0
            print(', ', ' '.join(digits))
            continue
        elif answer == '!!':
            digits = ask4()
            trial = 0
            print(', ', ' '.join(digits))
            continue
        if not chk:
            print('% answer')
        else:
            answer = ''.join((('F(%s)' % char) if char in '123456789' else char) for char in answer) if '/' in answer else answer
            ans = eval(answer)
            print(', ', ans)
            if ans == 24:
                print()
    print()

main()
```"
r70gq_4_1,r70gq,24 game/Solve,Game Development,Puzzles,python,T4,Same Language,"```python
from __future__ import division, print_function
from itertools import permutations, product, chain
import random, ast, re
import sys

if sys.version_info[0] < 3:
    input = raw_input
    from itertools import izip_longest as zip_longest
else:
    from itertools import zip_longest

def choose_digits():
    return [str(random.randint(1, 9)) for _ in range(4)]

def take_input():
    digits = ''
    while len(digits) != 4 or not all(d in '123456789' for d in digits):
        digits = input('Enter the digits to solve for: ').strip().replace("" "", """")
    return list(digits)

def greeting(digits):
    print(__doc__)
    print(' '.join(digits))

def validate_expression(expression, digits):
    allowed = set('() +-*/\t' + ''.join(digits))
    valid = all(ch in allowed for ch in expression) and \
            all(digits.count(dig) == expression.count(dig) for dig in set(digits)) and \
            not re.search(r'\d\d', expression)
    if valid:
        try:
            ast.parse(expression)
        except:
            valid = False
    return valid

def compute(digits):
    digilen = len(digits)
    exprlen = 2 * digilen - 1
    digiperm = sorted(set(permutations(digits)))
    opcomb = list(product('+-*/', repeat=digilen - 1))
    brackets = [()]+[(x, y) for x in range(0, exprlen, 2) for y in range(x + 4, exprlen + 2, 2)] + [(0, 3 + 1, 4 + 2, 7 + 3)]

    for d in digiperm:
        for ops in opcomb:
            d2 = [('F(%s)' % i) for i in d] if '/' in ops else d
            ex = list(chain.from_iterable(zip_longest(d2, ops, fillvalue='')))
            for b in brackets:
                exp = ex[:]
                for insertpoint, bracket in zip(b, '()' * len(b)):
                    exp.insert(insertpoint, bracket)
                expression = ''.join(exp)
                try:
                    result = eval(expression)
                except ZeroDivisionError:
                    continue
                if result == 24:
                    if '/' in ops:
                        exp = [term if not term.startswith('F(') else term[2] for term in exp]
                    ans = ' '.join(exp).rstrip()
                    print(ans)
                    return ans
    print(' '.join(digits))
    return '!'

def run_game():
    digits = choose_digits()
    greeting(digits)
    trial = 0
    expression = ''
    valid_input = False
    answer = False
    
    while not (valid_input and answer == 24):
        trial += 1
        expression = input(f'{trial}: ')
        valid_input = validate_expression(expression, digits)
        
        if expression == '?':
            compute(digits)
            expression = '!'
        elif expression.lower() == 'q':
            break
        elif expression == '!':
            digits = choose_digits()
            trial = 0
            print(' '.join(digits))
            continue
        elif expression == '!!':
            digits = take_input()
            trial = 0
            print(' '.join(digits))
            continue
        
        if not valid_input:
            print(expression)
        else:
            if '/' in expression:
                expression = ''.join((f'F({char})' if char in '123456789' else char) for char in expression)
            answer = eval(expression)
            print(answer)
            if answer == 24:
                print()

    print()

run_game()
```"
r70gq_4_2,r70gq,24 game/Solve,Game Development,Puzzles,go,T4,Different Language,"package main

import (
	""fmt""
	""math/rand""
	""time""
)

const (
	op_num = iota
	op_add
	op_sub
	op_mul
	op_div
)

type frac struct {
	num, denom int
}"
r70gq_4_2,r70gq,24 game/Solve,Game Development,Puzzles,java,T4,Different Language,"import java.util.*;

public class Game24Player {
    final String[] patterns = {""nnonnoo"", ""nnonono"", ""nnnoono"", ""nnnonoo"",
        ""nnnnooo""};
    final String ops = ""+-*/^"";

    String solution;
    List<Integer> digits;

    public static void main(String[] args) {
        new Game24Player().play();
    }

    void play() {
        digits = getSolvableDigits();

        Scanner in = new Scanner(System.in);
        while (true) {
            System.out.print(""Make 24 using these digits: "");
            System.out.println(digits);
            System.out.println(""(Enter 'q' to quit, 's' for a solution)"");
            System.out.print(""> "");

            String line = in.nextLine();
            if (line.equalsIgnoreCase(""q"")) {
                System.out.println(""\nThanks for playing"");
                return;
            }

            if (line.equalsIgnoreCase(""s"")) {
                System.out.println(solution);
                digits = getSolvableDigits();
                continue;
            }

            char[] entry = line.replaceAll(""[^*+-/)(\\d]"", """").toCharArray();

            try {
                validate(entry);

                if (evaluate(infixToPostfix(entry))) {
                    System.out.println(""\nCorrect! Want to try another? "");
                    digits = getSolvableDigits();
                } else {
                    System.out.println(""\nNot correct."");
                }

            } catch (Exception e) {
                System.out.printf(""%n%s Try again.%n"", e.getMessage());
            }
        }
    }

    void validate(char[] input) throws Exception {
        int total1 = 0, parens = 0, opsCount = 0;

        for (char c : input) {
            if (Character.isDigit(c))
                total1 += 1 << (c - '0') * 4;
            else if (c == '(')
                parens++;
            else if (c == ')')
                parens--;
            else if (ops.indexOf(c) != -1)
                opsCount++;
            if (parens < 0)
                throw new Exception(""Parentheses mismatch."");
        }

        if (parens != 0)
            throw new Exception(""Parentheses mismatch."");

        if (opsCount != 3)
            throw new Exception(""Wrong number of operators."");

        int total2 = 0;
        for (int d : digits)
            total2 += 1 << d * 4;

        if (total1 != total2)
            throw new Exception(""Not the same digits."");
    }

    boolean evaluate(char[] line) throws Exception {
        Stack<Float> s = new Stack<>();
        try {
            for (char c : line) {
                if ('0' <= c && c <= '9')
                    s.push((float) c - '0');
                else
                    s.push(applyOperator(s.pop(), s.pop(), c));
            }
        } catch (EmptyStackException e) {
            throw new Exception(""Invalid entry."");
        }
        return (Math.abs(24 - s.peek()) < 0.001F);
    }

    float applyOperator(float a, float b, char c) {
        switch (c) {
            case '+':
                return a + b;
            case '-':
                return b - a;
            case '*':
                return a * b;
            case '/':
                return b / a;
            default:
                return Float.NaN;
        }
    }

    List<Integer> randomDigits() {
        Random r = new Random();
        List<Integer> result = new ArrayList<>(4);
        for (int i = 0; i < 4; i++)
            result.add(r.nextInt(9) + 1);
        return result;
    }

    List<Integer> getSolvableDigits() {
        List<Integer> result;
        do {
            result = randomDigits();
        } while (!isSolvable(result));
        return result;
    }

    boolean isSolvable(List<Integer> digits) {
        Set<List<Integer>> dPerms = new HashSet<>(4 * 3 * 2);
        permute(digits, dPerms, 0);

        int total = 4 * 4 * 4;
        List<List<Integer>> oPerms = new ArrayList<>(total);
        permuteOperators(oPerms, 4, total);

        StringBuilder sb = new StringBuilder(4 + 3);

        for (String pattern : patterns) {
            char[] patternChars = pattern.toCharArray();

            for (List<Integer> dig : dPerms) {
                for (List<Integer> opr : oPerms) {

                    int i = 0, j = 0;
                    for (char c : patternChars) {
                        if (c == 'n')
                            sb.append(dig.get(i++));
                        else
                            sb.append(ops.charAt(opr.get(j++)));
                    }

                    String candidate = sb.toString();
                    try {
                        if (evaluate(candidate.toCharArray())) {
                            solution = postfixToInfix(candidate);
                            return true;
                        }
                    } catch (Exception ignored) {
                    }
                    sb.setLength(0);
                }
            }
        }
        return false;
    }

    String postfixToInfix(String postfix) {
        class Expression {
            String op, ex;
            int prec = 3;

            Expression(String e) {
                ex = e;
            }

            Expression(String e1, String e2, String o) {
                ex = String.format(""%s%s%s"", e1, o, e2);
                op = o;
                prec = ops.indexOf(o) / 2;
            }
        }

        Stack<Expression> expr = new Stack<>();

        for (char c : postfix.toCharArray()) {
            int idx = ops.indexOf(c);
            if (idx != -1) {

                Expression r = expr.pop();
                Expression l = expr.pop();

                int opPrec = idx / 2;

                if (l.prec < opPrec)
                    l.ex = '(' + l.ex + ')';

                if (r.prec <= opPrec)
                    r.ex = '(' + r.ex + ')';

                expr.push(new Expression(l.ex, r.ex, """" + c));
            } else {
                expr.push(new Expression("""" + c));
            }
        }
        return expr.peek().ex;
    }

    char[] infixToPostfix(char[] infix) throws Exception {
        StringBuilder sb = new StringBuilder();
        Stack<Integer> s = new Stack<>();
        try {
            for (char c : infix) {
                int idx = ops.indexOf(c);
                if (idx != -1) {
                    if (s.isEmpty())
                        s.push(idx);
                    else {
                        while (!s.isEmpty()) {
                            int prec2 = s.peek() / 2;
                            int prec1 = idx / 2;
                            if (prec2 >= prec1)
                                sb.append(ops.charAt(s.pop()));
                            else
                                break;
                        }
                        s.push(idx);
                    }
                } else if (c == '(') {
                    s.push(-2);
                } else if (c == ')') {
                    while (s.peek() != -2)
                        sb.append(ops.charAt(s.pop()));
                    s.pop();
                } else {
                    sb.append(c);
                }
            }
            while (!s.isEmpty())
                sb.append(ops.charAt(s.pop()));

        } catch (EmptyStackException e) {
            throw new Exception(""Invalid entry."");
        }
        return sb.toString().toCharArray();
    }

    void permute(List<Integer> lst, Set<List<Integer>> res, int k) {
        for (int i = k; i < lst.size(); i++) {
            Collections.swap(lst, i, k);
            permute(lst, res, k + 1);
            Collections.swap(lst, k, i);
        }
        if (k == lst.size())
            res.add(new ArrayList<>(lst));
    }

    void permuteOperators(List<List<Integer>> res, int n, int total) {
        for (int i = 0, npow = n * n; i < total; i++)
            res.add(Arrays.asList((i / npow), (i % npow) / n, i % n));
    }
}"
r70gq_4_2,r70gq,24 game/Solve,Game Development,Puzzles,javascript,T4,Different Language,"var ar=[],order=[0,1,2],op=[],val=[];
var NOVAL=9999,oper=""+-*/"",out;

function rnd(n){return Math.floor(Math.random()*n)}

function say(s){
 try{document.write(s+""<br>"")}
 catch(e){WScript.Echo(s)}
}

function getvalue(x,dir){
 var r=NOVAL;
 if(dir>0)++x;
 while(1){
  if(val[x]!=NOVAL){
   r=val[x];
   val[x]=NOVAL;
   break;
  }
  x+=dir;
 }
 return r*1;
}

function calc(){
 var c=0,l,r,x;
 val=ar.join('/').split('/');
 while(c<3){
  x=order[c];
  l=getvalue(x,-1);
  r=getvalue(x,1);
  switch(op[x]){
   case 0:val[x]=l+r;break;
   case 1:val[x]=l-r;break;
   case 2:val[x]=l*r;break;
   case 3:
   if(!r||l%r)return 0;
   val[x]=l/r;
  }
  ++c;
 }
 return getvalue(-1,1);
}

function shuffle(s,n){
 var x=n,p=eval(s),r,t;
 while(x--){
  r=rnd(n);
  t=p[x];
  p[x]=p[r];
  p[r]=t;
 }
}

function parenth(n){
 while(n>0)--n,out+='(';
 while(n<0)++n,out+=')';
}

function getpriority(x){
 for(var z=3;z--;)if(order[z]==x)return 3-z;
 return 0;
}

function showsolution(){
 var x=0,p=0,lp=0,v=0;
 while(x<4){
  if(x<3){
   lp=p;
   p=getpriority(x);
   v=p-lp;
   if(v>0)parenth(v);
  }
  out+=ar[x];
  if(x<3){
   if(v<0)parenth(v);
   out+=oper.charAt(op[x]);
  }
  ++x;
 }
 parenth(-p);
 say(out);
}

function solve24(s){
 var z=4,r;
 while(z--)ar[z]=s.charCodeAt(z)-48;
 out="""";
 for(z=100000;z--;){
  r=rnd(256);
  op[0]=r&3;
  op[1]=(r>>2)&3;
  op[2]=(r>>4)&3;
  shuffle(""ar"",4);
  shuffle(""order"",3);
  if(calc()!=24)continue;
  showsolution();
  break;
 }
}

solve24(""1234"");
solve24(""6789"");
solve24(""1127"");"
r70gq_4_2,r70gq,24 game/Solve,Game Development,Puzzles,ruby,T4,Different Language,"class TwentyFourGame
  EXPRESSIONS = [
    '((%dr%s%dr)%s%dr)%s%dr',
    '(%dr%s (%dr%s%dr))%s%dr',
    '(%dr%s%dr)%s (%dr%s%dr)',
    '%dr%s ((%dr%s%dr)%s%dr)',
    '%dr%s (%dr%s (%dr%s%dr))',
  ]

  OPERATORS = [:+,:-,:*,:/].repeated_permutation(3).to_a

  def self.solve(digits)
    solutions = []
    perms = digits.permutation.to_a.uniq
    perms.product(OPERATORS, EXPRESSIONS) do |(a,b,c,d), (op1,op2,op3), expr|
      
      text = expr % [a, op1, b, op2, c, op3, d]
      value = eval(text)  rescue next                 
      solutions << text.delete()  if value == 24
    end
    solutions
  end
end


digits = ARGV.map do |arg| 
  begin
    Integer(arg)
  rescue ArgumentError
    raise 
  end
end
digits.size == 4 or raise 

solutions = TwentyFourGame.solve(digits)
if solutions.empty?
  puts 
else
  puts 
  puts solutions.sort
end"
1a6pc_1_1,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T1,Identical Clone,"import itertools

def all_equal(a,b,c,d,e,f,g):
    return a+b == b+c+d == d+e+f == f+g

def foursquares(lo,hi,unique,show):
    solutions = 0
    if unique:
        uorn = 
        citer = itertools.combinations(range(lo,hi+1),7)
    else:
        uorn = 
        citer =  itertools.combinations_with_replacement(range(lo,hi+1),7)

    for c in citer:
            for p in set(itertools.permutations(c)):
                if all_equal(*p):
                    solutions += 1
                    if show:
                        print str(p)[1:-1]

    print str(solutions)++uorn++str(lo)++str(hi)
    print"
1a6pc_1_2,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T1,Different Whitespaces,"import itertools

def all_equal(a,b,c,d,e,f,g):
 return a+b == b+c+d == d+e+f == f+g

def foursquares(lo,hi,unique,show):
 solutions = 0
 if unique:
  uorn = ''
  citer = itertools.combinations(range(lo,hi+1),7)
 else:
  uorn = ''
  citer = itertools.combinations_with_replacement(range(lo,hi+1),7)

 for c in citer:
  for p in set(itertools.permutations(c)):
   if all_equal(*p):
    solutions += 1
    if show:
     print str(p)[1:-1]

 print str(solutions)+uorn+str(lo)+str(hi)
 print"
1a6pc_1_3,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T1,Different Comments,"import itertools

def all_equal(a,b,c,d,e,f,g):
    return a+b == b+c+d == d+e+f == f+g

def foursquares(lo,hi,unique,show):
    solutions = 0
    if unique:
        uorn = """"
        citer = itertools.combinations(range(lo,hi+1),7)
    else:
        uorn = """"
        citer = itertools.combinations_with_replacement(range(lo,hi+1),7)

    for c in citer:
        for p in set(itertools.permutations(c)):
            if all_equal(*p):
                solutions += 1
                if show:
                    print str(p)[1:-1]

    print str(solutions) + uorn + str(lo) + str(hi)
    print"
1a6pc_1_4,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T1,Different Formatting,"import itertools
def all_equal(a, b, c, d, e, f, g):
    return a + b == b + c + d == d + e + f == f + g
def foursquares(lo, hi, unique, show):
    solutions = 0
    if unique:
        uorn = 
        citer = itertools.combinations(range(lo, hi + 1), 7)
    else:
        uorn = 
        citer = itertools.combinations_with_replacement(range(lo, hi + 1), 7)
    for c in citer:
        for p in set(itertools.permutations(c)):
            if all_equal(*p):
                solutions += 1
                if show:
                    print str(p)[1:-1]
    print str(solutions) + uorn + str(lo) + str(hi)
    print"
1a6pc_2_1,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T2,Different Variable Names,"import itertools

def all_identical(x,y,z,u,v,w,q):
    return x+y == y+z+u == u+v+w == w+q

def four_squares(start,end,distinct,display):
    count = 0
    if distinct:
        unique_count = 
        iterator = itertools.combinations(range(start,end+1),7)
    else:
        unique_count = 
        iterator = itertools.combinations_with_replacement(range(start,end+1),7)

    for combination in iterator:
            for perm in set(itertools.permutations(combination)):
                if all_identical(*perm):
                    count += 1
                    if display:
                        print(str(perm)[1:-1])

    print(str(count) + unique_count + str(start) + str(end))
    print"
1a6pc_2_2,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T2,Different Data Types,"import itertools

def all_equal(a:int,b:int,c:int,d:int,e:int,f:int,g:int) -> bool:
    return a+b == b+c+d == d+e+f == f+g

def foursquares(lo:int,hi:int,unique:bool,show:bool) -> None:
    solutions:int = 0
    if unique:
        uorn:int = 0
        citer = itertools.combinations(range(lo,hi+1),7)
    else:
        uorn:int = 1
        citer =  itertools.combinations_with_replacement(range(lo,hi+1),7)

    for c in citer:
            for p in set(itertools.permutations(c)):
                if all_equal(*p):
                    solutions += 1
                    if show:
                        print(str(p)[1:-1])

    print(str(solutions) + str(uorn) + str(lo) + str(hi))
    print()"
1a6pc_2_3,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T2,Different Function Names,"import itertools

def check_all_equal(a,b,c,d,e,f,g):
    return a+b == b+c+d == d+e+f == f+g

def find_foursquares(lo,hi,unique,show):
    solutions = 0
    if unique:
        uorn = 
        citer = itertools.combinations(range(lo,hi+1),7)
    else:
        uorn = 
        citer =  itertools.combinations_with_replacement(range(lo,hi+1),7)

    for c in citer:
            for p in set(itertools.permutations(c)):
                if check_all_equal(*p):
                    solutions += 1
                    if show:
                        print str(p)[1:-1]

    print str(solutions)++uorn++str(lo)++str(hi)
    print"
1a6pc_3_1,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T3,Added Statements,"import itertools

def all_equal(a,b,c,d,e,f,g):
    return a+b == b+c+d == d+e+f == f+g

def foursquares(lo,hi,unique,show):
    solutions = 0
    uorn = ""Unique Counts: "" if unique else ""All Counts: ""
    citer = itertools.combinations(range(lo,hi+1),7) if unique else itertools.combinations_with_replacement(range(lo,hi+1),7)

    for c in citer:
        for p in set(itertools.permutations(c)):
            if all_equal(*p):
                solutions += 1
                if show:
                    print(str(p)[1:-1])

    print(str(solutions) + uorn + str(lo) + "" to "" + str(hi))
    print()"
1a6pc_3_2,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T3,Removed Statements,"import itertools

def all_equal(a,b,c,d,e,f,g):
    return a+b == b+c+d == d+e+f == f+g

def foursquares(lo,hi,unique,show):
    solutions = 0
    citer = itertools.combinations(range(lo,hi+1),7) if unique else itertools.combinations_with_replacement(range(lo,hi+1),7)

    for c in citer:
        for p in set(itertools.permutations(c)):
            if all_equal(*p):
                solutions += 1
                if show:
                    print(str(p)[1:-1])

    print(str(solutions) + str(lo) + str(hi))"
1a6pc_3_3,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T3,Reordered Statements,"import itertools

def all_equal(a,b,c,d,e,f,g):
    return a+b == b+c+d == d+e+f == f+g

def foursquares(lo,hi,unique,show):
    solutions = 0
    if unique:
        citer = itertools.combinations(range(lo,hi+1),7)
        uorn = 
    else:
        citer = itertools.combinations_with_replacement(range(lo,hi+1),7)
        uorn = 

    for c in citer:
        for p in set(itertools.permutations(c)):
            if all_equal(*p):
                solutions += 1
                if show:
                    print str(p)[1:-1]

    print str(solutions)++uorn++str(lo)++str(hi)
    print"
1a6pc_3_4,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T3,Control Flow Modifications,"import itertools

def all_equal(a,b,c,d,e,f,g):
    return a+b == b+c+d == d+e+f == f+g

def foursquares(lo, hi, unique, show):
    solutions = 0
    uorn = 0
    citer = itertools.combinations(range(lo, hi+1), 7) if unique else itertools.combinations_with_replacement(range(lo, hi+1), 7)

    for c in citer:
        permutations = set(itertools.permutations(c))
        for p in permutations:
            if all_equal(*p):
                solutions += 1
                if show:
                    print(str(p)[1:-1])
                    
    print(str(solutions) + str(uorn) + str(lo) + str(hi))"
1a6pc_4_1,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,python,T4,Same Language,"import itertools

def all_equal(*args):
    return args[0] + args[1] == args[1] + args[2] == args[3] + args[4] + args[5] == args[5] + args[6]

def foursquares(lo, hi, unique, show):
    solutions = 0
    citer = itertools.combinations(range(lo, hi + 1), 7) if unique else itertools.combinations_with_replacement(range(lo, hi + 1), 7)

    for c in citer:
        for p in itertools.permutations(c):
            if all_equal(*p):
                solutions += 1
                if show:
                    print(str(p)[1:-1])
    
    print(f""{solutions}{'' if unique else ' unique'} {lo} {hi}"")"
1a6pc_4_2,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,go,T4,Different Language,"package main

import ""fmt""

func main(){
	n, c := getCombs(1,7,true)
	fmt.Printf(""%d unique solutions in 1 to 7\n"",n)
	fmt.Println(c)
	n, c = getCombs(3,9,true)
	fmt.Printf(""%d unique solutions in 3 to 9\n"",n)
	fmt.Println(c)
	n, _ = getCombs(0,9,false)
	fmt.Printf(""%d non-unique solutions in 0 to 9\n"",n)
}

func getCombs(low,high int,unique bool) (num int,validCombs [][]int){
	for a := low; a <= high; a++ {
		for b := low; b <= high; b++ {
			for c := low; c <= high; c++ {
				for d := low; d <= high; d++ {
					for e := low; e <= high; e++ {
						for f := low; f <= high; f++ {
							for g := low; g <= high; g++ {
								if validComb(a,b,c,d,e,f,g) {
									if !unique || isUnique(a,b,c,d,e,f,g) {
										num++
										validCombs = append(validCombs,[]int{a,b,c,d,e,f,g})
									}
								}
							}
						}
					}
				}
			}
		}
	}
	return
}
func isUnique(a,b,c,d,e,f,g int) (res bool) {
	data := make(map[int]int)
	data[a]++
	data[b]++
	data[c]++
	data[d]++
	data[e]++
	data[f]++
	data[g]++
	return len(data) == 7
}
func validComb(a,b,c,d,e,f,g int) bool{
	square1 := a + b
	square2 := b + c + d
	square3 := d + e + f
	square4 := f + g
	return square1 == square2 && square2 == square3 && square3 == square4
}"
1a6pc_4_2,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,java,T4,Different Language,"import java.util.Arrays;

public class FourSquares {
    public static void main(String[] args) {
        fourSquare(1, 7, true, true);
        fourSquare(3, 9, true, true);
        fourSquare(0, 9, false, false);
    }

    private static void fourSquare(int low, int high, boolean unique, boolean print) {
        int count = 0;

        if (print) {
            System.out.println(""a b c d e f g"");
        }
        for (int a = low; a <= high; ++a) {
            for (int b = low; b <= high; ++b) {
                if (notValid(unique, a, b)) continue;

                int fp = a + b;
                for (int c = low; c <= high; ++c) {
                    if (notValid(unique, c, a, b)) continue;
                    for (int d = low; d <= high; ++d) {
                        if (notValid(unique, d, a, b, c)) continue;
                        if (fp != b + c + d) continue;

                        for (int e = low; e <= high; ++e) {
                            if (notValid(unique, e, a, b, c, d)) continue;
                            for (int f = low; f <= high; ++f) {
                                if (notValid(unique, f, a, b, c, d, e)) continue;
                                if (fp != d + e + f) continue;

                                for (int g = low; g <= high; ++g) {
                                    if (notValid(unique, g, a, b, c, d, e, f)) continue;
                                    if (fp != f + g) continue;

                                    ++count;
                                    if (print) {
                                        System.out.printf(""%d%d%d%d%d%d%d%n"", a, b, c, d, e, f, g);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (unique) {
            System.out.printf(""There are%d unique solutions in [%d,%d]%n"", count, low, high);
        } else {
            System.out.printf(""There are%d non-unique solutions in [%d,%d]%n"", count, low, high);
        }
    }

    private static boolean notValid(boolean unique, int needle, int... haystack) {
        return unique && Arrays.stream(haystack).anyMatch(p -> p == needle);
    }
}"
1a6pc_4_2,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,javascript,T4,Different Language,(() => {
1a6pc_4_2,1a6pc,4-rings or 4-squares puzzle,Game Development,Puzzles,ruby,T4,Different Language,"def four_squares(low, high, unique=true, show=unique)
  f = -> (a,b,c,d,e,f,g) {[a+b, b+c+d, d+e+f, f+g].uniq.size == 1}
  if unique
    uniq = 
    solutions = [*low..high].permutation(7).select{|ary| f.call(*ary)}
  else
    uniq = 
    solutions = [*low..high].repeated_permutation(7).select{|ary| f.call(*ary)}
  end
  if show
    puts  + [*..].join()
    solutions.each{|ary| p ary}
  end
  puts 
  puts
end

[[1,7], [3,9]].each do |low, high|
  four_squares(low, high)
end
four_squares(0, 9, false)"
36bzc_1_1,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T1,Identical Clone,"cache = [[1]]
def cumu(n):
    for l in range(len(cache), n+1):
        r = [0]
        for x in range(1, l+1):
            r.append(r[-1] + cache[l-x][min(x, l-x)])
        cache.append(r)
    return cache[n]

def row(n):
    r = cumu(n)
    return [r[i+1] - r[i] for i in range(n)]

print 
for x in range(1, 11): print %x, row(x)


print 
for x in [23, 123, 1234, 12345]: print x, cumu(x)[-1]"
36bzc_1_2,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T1,Different Whitespaces,"cache=[[1]]
def cumu(n):
 for l in range(len(cache),n+1):
  r=[0]
  for x in range(1,l+1):
   r.append(r[-1]+cache[l-x][min(x,l-x)])
  cache.append(r)
 return cache[n]
def row(n):
 r=cumu(n)
 return[r[i+1]-r[i]for i in range(n)]
print 
for x in range(1,11):print %x,row(x)
print 
for x in [23,123,1234,12345]:print x,cumu(x)[-1]"
36bzc_1_3,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T1,Different Comments,"cache = [[1]]
def cumu(n):
    for l in range(len(cache), n+1):
        r = [0]
        for x in range(1, l+1):
            r.append(r[-1] + cache[l-x][min(x, l-x)])
        cache.append(r)
    return cache[n]

def row(n):
    r = cumu(n)
    return [r[i+1] - r[i] for i in range(n)]

print 
for x in range(1, 11): print %x, row(x)

print 
for x in [23, 123, 1234, 12345]: print x, cumu(x)[-1]"
36bzc_1_4,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T1,Different Formatting,"cache = [[1]] 

def cumu(n): 
    for l in range(len(cache), n + 1): 
        r = [0] 
        for x in range(1, l + 1): 
            r.append(r[-1] + cache[l - x][min(x, l - x)]) 
        cache.append(r) 
    return cache[n] 

def row(n): 
    r = cumu(n) 
    return [r[i + 1] - r[i] for i in range(n)] 

print 
for x in range(1, 11): 
    print % x, row(x) 

print 
for x in [23, 123, 1234, 12345]: 
    print x, cumu(x)[-1] "
36bzc_2_1,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T2,Different Variable Names,"storage = [[1]]
def cumulative(m):
    for line in range(len(storage), m+1):
        result = [0]
        for elem in range(1, line+1):
            result.append(result[-1] + storage[line-elem][min(elem, line-elem)])
        storage.append(result)
    return storage[m]

def sequence(m):
    res = cumulative(m)
    return [res[i+1] - res[i] for i in range(m)]

print 
for x in range(1, 11): print %x, sequence(x)


print 
for x in [23, 123, 1234, 12345]: print x, cumulative(x)[-1]"
36bzc_2_2,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T2,Different Data Types,"cache = [[1]]
def cumu(n: int) -> list:
    for l in range(len(cache), n + 1):
        r = [0]
        for x in range(1, l + 1):
            r.append(r[-1] + cache[l - x][min(x, l - x)])
        cache.append(r)
    return cache[n]

def row(n: int) -> list:
    r = cumu(n)
    return [r[i + 1] - r[i] for i in range(n)]

print()
for x in range(1, 11): print(x, row(x))

print()
for x in [23, 123, 1234, 12345]: print(x, cumu(x)[-1])"
36bzc_2_3,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T2,Different Function Names,"cache = [[1]]
def accumulate(n):
    for l in range(len(cache), n+1):
        r = [0]
        for x in range(1, l+1):
            r.append(r[-1] + cache[l-x][min(x, l-x)])
        cache.append(r)
    return cache[n]

def get_row(n):
    r = accumulate(n)
    return [r[i+1] - r[i] for i in range(n)]

print 
for x in range(1, 11): print %x, get_row(x)

print 
for x in [23, 123, 1234, 12345]: print x, accumulate(x)[-1]"
36bzc_3_1,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T3,Added Statements,"cache = [[1]]
def cumu(n):
    for l in range(len(cache), n+1):
        r = [0]
        for x in range(1, l+1):
            r.append(r[-1] + cache[l-x][min(x, l-x)])
        cache.append(r)
    return cache[n]

def row(n):
    r = cumu(n)
    return [r[i + 1] - r[i] for i in range(n)]

print()
for x in range(1, 11): print(x, row(x))

print()
for x in [23, 123, 1234, 12345]: print(x, cumu(x)[-1])"
36bzc_3_2,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T3,Removed Statements,"cache = [[1]]
def cumu(n):
    for l in range(len(cache), n+1):
        r = [0]
        for x in range(1, l+1):
            r.append(r[-1] + cache[l-x][min(x, l-x)])
        cache.append(r)
    return cache[n]

def row(n):
    r = cumu(n)
    return [r[i+1] - r[i] for i in range(n)]

for x in range(1, 11): print row(x)

for x in [23, 123, 1234, 12345]: print x, cumu(x)[-1]"
36bzc_3_3,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T3,Reordered Statements,"cache = [[1]]
def row(n):
    r = cumu(n)
    return [r[i+1] - r[i] for i in range(n)]

def cumu(n):
    for l in range(len(cache), n+1):
        r = [0]
        for x in range(1, l+1):
            r.append(r[-1] + cache[l-x][min(x, l-x)])
        cache.append(r)
    return cache[n]

print 
for x in range(1, 11): print %x, row(x)

print 
for x in [23, 123, 1234, 12345]: print x, cumu(x)[-1]"
36bzc_3_4,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T3,Control Flow Modifications,"cache = [[1]]
def cumu(n):
    for l in range(len(cache), n + 1):
        r = [0]
        for x in range(l, 0, -1):
            r.append(r[-1] + cache[l - x][min(x, l - x)])
        cache.append(r)
    return cache[n]

def row(n):
    r = cumu(n)
    return [r[i + 1] - r[i] for i in range(n)]

print()
for x in range(1, 11):
    print(x, row(x))

print()
for x in [23, 123, 1234, 12345]:
    print(x, cumu(x)[-1])"
36bzc_4_1,36bzc,9 billion names of God the integer,Mathematics,Number Theory,python,T4,Same Language,"cache = [[1]]

def cumu(n):
    for l in range(len(cache), n + 1):
        r = [0]
        for x in range(1, l + 1):
            r.append(r[-1] + cache[l - x][min(x, l - x)])
        cache.append(r)
    return cache[n]

def row(n):
    r = cumu(n)
    return [r[i + 1] - r[i] for i in range(n)]

print_result = lambda: [print(x, row(x)) for x in range(1, 11)]
print_result()

print_cumu = lambda: [print(x, cumu(x)[-1]) for x in [23, 123, 1234, 12345]]
print_cumu()"
36bzc_4_2,36bzc,9 billion names of God the integer,Mathematics,Number Theory,go,T4,Different Language,"package main

import (
	""fmt""
	""math/big""
)

func main() {

	intMin := func(a, b int) int {
		if a < b {
			return a
		} else {
			return b
		}
	}

	var cache = [][]*big.Int{{big.NewInt(1)}}

	cumu := func(n int) []*big.Int {
		for y := len(cache); y <= n; y++ {
			row := []*big.Int{big.NewInt(0)}
			for x := 1; x <= y; x++ {
				cacheValue := cache[y-x][intMin(x, y-x)]
				row = append(row, big.NewInt(0).Add(row[len(row)-1], cacheValue))
			}
			cache = append(cache, row)
		}
		return cache[n]
	}

	row := func(n int) {
		e := cumu(n)
		for i := 0; i < n; i++ {
			fmt.Printf(""%v "", (big.NewInt(0).Sub(e[i+1], e[i])).Text(10))
		}
		fmt.Println()
	}

	fmt.Println(""rows:"")
	for x := 1; x < 11; x++ {
		row(x)
	}
	fmt.Println()

	fmt.Println(""sums:"")
	for _, num := range [...]int{23, 123, 1234, 12345} {
		r := cumu(num)
		fmt.Printf(""%d%v\n"", num, r[len(r)-1].Text(10))
	}
}"
36bzc_4_2,36bzc,9 billion names of God the integer,Mathematics,Number Theory,java,T4,Different Language,"import java.math.BigInteger;
import java.util.*;
import static java.util.Arrays.asList;
import static java.util.stream.Collectors.toList;
import static java.util.stream.IntStream.range;
import static java.lang.Math.min;

public class Test {

    static List<BigInteger> cumu(int n) {
        List<List<BigInteger>> cache = new ArrayList<>();
        cache.add(asList(BigInteger.ONE));

        for (int L = cache.size(); L < n + 1; L++) {
            List<BigInteger> r = new ArrayList<>();
            r.add(BigInteger.ZERO);
            for (int x = 1; x < L + 1; x++)
                r.add(r.get(r.size() - 1).add(cache.get(L - x).get(min(x, L - x))));
            cache.add(r);
        }
        return cache.get(n);
    }

    static List<BigInteger> row(int n) {
        List<BigInteger> r = cumu(n);
        return range(0, n).mapToObj(i -> r.get(i + 1).subtract(r.get(i)))
                .collect(toList());
    }

    public static void main(String[] args) {
        System.out.println(""Rows:"");
        for (int x = 1; x < 11; x++)
            System.out.printf(""%2d:%s%n"", x, row(x));

        System.out.println(""\nSums:"");
        for (int x : new int[]{23, 123, 1234}) {
            List<BigInteger> c = cumu(x);
            System.out.printf(""%s%s%n"", x, c.get(c.size() - 1));
        }
    }
}"
36bzc_4_2,36bzc,9 billion names of God the integer,Mathematics,Number Theory,javascript,T4,Different Language,"(function () {
    var cache = [
        [1]
    ];"
36bzc_4_2,36bzc,9 billion names of God the integer,Mathematics,Number Theory,ruby,T4,Different Language,"def g(n,g)
  return 1 unless 1 < g and g < n-1
  (2..g).inject(1){|res,q| res + (q > n-g? 0: g(n-g,q))}
end

(1..25).each {|n|
  puts (1..n).map {|g|  % g(n,g)}.join
}"
jhq7p_1_1,jhq7p,A+B,Mathematics,Arithmetic,python,T1,Identical Clone,"try: raw_input
except: raw_input = input

print(sum(map(int, raw_input().split())))"
jhq7p_1_2,jhq7p,A+B,Mathematics,Arithmetic,python,T1,Different Whitespaces,"try:raw_input
except:raw_input=input
print(sum(map(int,raw_input().split())))"
jhq7p_1_3,jhq7p,A+B,Mathematics,Arithmetic,python,T1,Different Comments,"try: input = raw_input
except: pass

print(sum(map(int, input().split())))"
jhq7p_1_4,jhq7p,A+B,Mathematics,Arithmetic,python,T1,Different Formatting,"try: 
    raw_input 
except: 
    raw_input = input

print(sum(map(int, raw_input().split())))"
jhq7p_2_1,jhq7p,A+B,Mathematics,Arithmetic,python,T2,Different Variable Names,"try: user_input = raw_input
except: user_input = input

print(sum(map(int, user_input().split())))"
jhq7p_2_2,jhq7p,A+B,Mathematics,Arithmetic,python,T2,Different Data Types,"try: input
except: input = raw_input

print(sum(map(float, input().split())))"
jhq7p_2_3,jhq7p,A+B,Mathematics,Arithmetic,python,T2,Different Function Names,"try: user_input
except: user_input = input

print(sum(map(int, user_input().split())))"
jhq7p_3_1,jhq7p,A+B,Mathematics,Arithmetic,python,T3,Added Statements,"try: 
    raw_input
except NameError: 
    raw_input = input

numbers = raw_input().split()
total = sum(map(int, numbers))
print(total)"
jhq7p_3_2,jhq7p,A+B,Mathematics,Arithmetic,python,T3,Removed Statements,"raw_input = input
print(sum(map(int, raw_input().split())))"
jhq7p_3_3,jhq7p,A+B,Mathematics,Arithmetic,python,T3,Reordered Statements,"try: 
    raw_input = input
except: 
    pass

print(sum(map(int, raw_input().split())))"
jhq7p_3_4,jhq7p,A+B,Mathematics,Arithmetic,python,T3,Control Flow Modifications,"try: 
    input = raw_input
except NameError: 
    pass

print(sum(int(num) for num in input().split()))"
jhq7p_4_1,jhq7p,A+B,Mathematics,Arithmetic,python,T4,Same Language,"raw_input = input if 'raw_input' not in globals() else raw_input
numbers = list(map(int, raw_input().split()))
print(sum(numbers))"
jhq7p_4_2,jhq7p,A+B,Mathematics,Arithmetic,go,T4,Different Language,"package main

import ""fmt""

func main() {
    var a, b int
    fmt.Scan(&a, &b)
    fmt.Println(a + b)
}"
jhq7p_4_2,jhq7p,A+B,Mathematics,Arithmetic,java,T4,Different Language,"import java.util.Scanner;

public class Sum2 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);"
jhq7p_4_2,jhq7p,A+B,Mathematics,Arithmetic,javascript,T4,Different Language,"<html>
<body>
<div id='input'></div>
<div id='output'></div>
<script type='text/javascript'>
var a = window.prompt('enter A number', '');
var b = window.prompt('enter B number', '');
document.getElementById('input').innerHTML = a + ' ' + b;

var sum = Number(a) + Number(b);
document.getElementById('output').innerHTML = sum;
</script>
</body>
</html>"
jhq7p_4_2,jhq7p,A+B,Mathematics,Arithmetic,php,T4,Different Language,"fscanf(STDIN, , $a, $b); 
echo ($a + $b) . ;"
jhq7p_4_2,jhq7p,A+B,Mathematics,Arithmetic,ruby,T4,Different Language,puts gets.split.sum(&:to_i)
z37tt_1_1,z37tt,ABC problem,Mathematics,Number Theory,python,T1,Identical Clone,"'''
Note that this code is broken, e.g., it won't work when 
blocks = [(, ), (,)] and the word is , where the answer
should be True, but the code returns False.
'''
blocks = [(, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, )]


def can_make_word(word, block_collection=blocks):
    
    if not word:
        return False

    blocks_remaining = block_collection[:]
    for char in word.upper():
        for block in blocks_remaining:
            if char in block:
                blocks_remaining.remove(block)
                break
        else:
            return False
    return True


if __name__ == :
    import doctest
    doctest.testmod()
    print(.join(% (w, can_make_word(w)) for w in
                    [, , , , , 
                     , , ]))"
z37tt_1_2,z37tt,ABC problem,Mathematics,Number Theory,python,T1,Different Whitespaces,"blocks = [(, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, )]

def can_make_word(word, block_collection=blocks):
 if not word:
  return False
 blocks_remaining = block_collection[:]
 for char in word.upper():
  for block in blocks_remaining:
   if char in block:
    blocks_remaining.remove(block)
    break
  else:
   return False
 return True

if __name__ == :
 import doctest
 doctest.testmod()
 print(.join(% (w, can_make_word(w)) for w in
  [, , , , , 
   , , ]))"
z37tt_1_3,z37tt,ABC problem,Mathematics,Number Theory,python,T1,Different Comments,"```
blocks = [(, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, )]


def can_make_word(word, block_collection=blocks):
    
    if not word:
        return False

    available_blocks = block_collection[:]
    for char in word.upper():
        for block in available_blocks:
            if char in block:
                available_blocks.remove(block)
                break
        else:
            return False
    return True


if __name__ == :
    import doctest
    doctest.testmod()
    print(.join(% (w, can_make_word(w)) for w in
                    [, , , , , 
                     , , ]))
```"
z37tt_1_4,z37tt,ABC problem,Mathematics,Number Theory,python,T1,Different Formatting,"```
blocks = [
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, ),
    (, )
]

def can_make_word(word, block_collection=blocks):
    if not word:
        return False
    blocks_remaining = block_collection[:]
    for char in word.upper():
        for block in blocks_remaining:
            if char in block:
                blocks_remaining.remove(block)
                break
        else:
            return False
    return True

if __name__ == :
    import doctest
    doctest.testmod()
    print(.join(% (w, can_make_word(w)) for w in [, , , , , , , ]))
```"
z37tt_2_1,z37tt,ABC problem,Mathematics,Number Theory,python,T2,Different Variable Names,"```
shapes = [(, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, )]


def can_form_word(term, shape_group=shapes):
    
    if not term:
        return False

    available_shapes = shape_group[:]
    for letter in term.upper():
        for shape in available_shapes:
            if letter in shape:
                available_shapes.remove(shape)
                break
        else:
            return False
    return True


if __name__ == """":
    import doctest
    doctest.testmod()
    print("", "".join(f""{w}: {can_form_word(w)}"" for w in
                    ["""", """", """", """", """", 
                     """", """", """"]))
```"
z37tt_2_2,z37tt,ABC problem,Mathematics,Number Theory,python,T2,Different Data Types,"```python
blocks = [('A', 'B'),
          ('C', 'D'),
          ('E', 'F'),
          ('G', 'H'),
          ('I', 'J'),
          ('K', 'L'),
          ('M', 'N'),
          ('O', 'P'),
          ('Q', 'R'),
          ('S', 'T'),
          ('U', 'V'),
          ('W', 'X'),
          ('Y', 'Z'),
          ('AA', 'BB'),
          ('CC', 'DD'),
          ('EE', 'FF'),
          ('GG', 'HH'),
          ('II', 'JJ'),
          ('KK', 'LL'),
          ('MM', 'NN')]


def can_make_word(word, block_collection=blocks):
    
    if not word:
        return False

    blocks_remaining = list(block_collection)
    for char in word.upper():
        for block in blocks_remaining:
            if char in block:
                blocks_remaining.remove(block)
                break
        else:
            return False
    return True


if __name__ == '__main__':
    import doctest
    doctest.testmod()
    print('\n'.join('%s: %s' % (w, can_make_word(w)) for w in
                    [""TEST"", ""WORD"", ""EXAMPLES"", ""BLOCK"", ""CAN"", 
                     ""MAKE"", ""THIS""]))
```"
z37tt_2_3,z37tt,ABC problem,Mathematics,Number Theory,python,T2,Different Function Names,"```
blocks = [(, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, )]


def can_form_word(word, block_set=blocks):
    
    if not word:
        return False

    blocks_left = block_set[:]
    for char in word.upper():
        for block in blocks_left:
            if char in block:
                blocks_left.remove(block)
                break
        else:
            return False
    return True


if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
    print("", "".join(""%s: %s"" % (w, can_form_word(w)) for w in
                    ["""", """", """", """", """", 
                     """", """", """"]))
```"
z37tt_3_1,z37tt,ABC problem,Mathematics,Number Theory,python,T3,Added Statements,"```
blocks = [(""A"", ""B""),
          (""C"", ""D""),
          (""E"", ""F""),
          (""G"", ""H""),
          (""I"", ""J""),
          (""K"", ""L""),
          (""M"", ""N""),
          (""O"", ""P""),
          (""Q"", ""R""),
          (""S"", ""T""),
          (""U"", ""V""),
          (""W"", ""X""),
          (""Y"", ""Z""),
          (""1"", ""2""),
          (""3"", ""4""),
          (""5"", ""6""),
          (""7"", ""8""),
          (""9"", ""0""),
          (""@"", ""#""),
          (""$"", ""%"")]


def can_make_word(word, block_collection=blocks):
    
    if not word:
        return False

    blocks_remaining = block_collection[:]
    for char in word.upper():
        for block in blocks_remaining:
            if char in block:
                blocks_remaining.remove(block)
                break
        else:
            return False
    return True


if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
    print(""\n"".join(f""{w}: {can_make_word(w)}"" for w in
                    [""AB"", ""CD"", ""EF"", ""GH"", ""IJ"", 
                     ""KL"", ""MN""]))
```"
z37tt_3_2,z37tt,ABC problem,Mathematics,Number Theory,python,T3,Removed Statements,"```
blocks = [(), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), ()]

def can_make_word(word, block_collection=blocks):
    if not word:
        return False

    blocks_remaining = block_collection[:]
    for char in word.upper():
        for block in blocks_remaining:
            if char in block:
                blocks_remaining.remove(block)
                break
        else:
            return False
    return True

if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
    print(""\n"".join(f""{w}: {can_make_word(w)}"" for w in ["""", """", """", """", """", """", """", """"]))
```"
z37tt_3_3,z37tt,ABC problem,Mathematics,Number Theory,python,T3,Reordered Statements,"```
blocks = [(, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, )]


def can_make_word(word, block_collection=blocks):
    
    if not word:
        return False

    for char in word.upper():
        blocks_remaining = block_collection[:]
        for block in blocks_remaining:
            if char in block:
                blocks_remaining.remove(block)
                break
        else:
            return False
    return True


if __name__ == __main__:
    import doctest
    doctest.testmod()
    print('\n'.join('%s: %s' % (w, can_make_word(w)) for w in
                    ['example', 'test', 'word', 'blocks', 'python', 
                     'code', 'function']))
```"
z37tt_3_4,z37tt,ABC problem,Mathematics,Number Theory,python,T3,Control Flow Modifications,"```
blocks = [(, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, ),
          (, )]


def can_make_word(word, block_collection=blocks):
    
    if word == """":
        return False

    blocks_remaining = list(block_collection)
    for char in word.upper():
        found = False
        for block in blocks_remaining:
            if char in block:
                blocks_remaining.remove(block)
                found = True
                break
        if not found:
            return False
    return True


if __name__ == ""__main__"":
    import doctest
    doctest.testmod()
    print('\n'.join(f""{w}: {can_make_word(w)}"" for w in
                    ["""", """", """", """", """",
                     """", """", """"]))
```"
z37tt_4_1,z37tt,ABC problem,Mathematics,Number Theory,python,T4,Same Language,"blocks = [('A', 'B'),
          ('C', 'D'),
          ('E', 'F'),
          ('G', 'H'),
          ('I', 'J'),
          ('K', 'L'),
          ('M', 'N'),
          ('O', 'P'),
          ('Q', 'R'),
          ('S', 'T'),
          ('U', 'V'),
          ('W', 'X'),
          ('Y', 'Z'),
          ('A', 'C'),
          ('D', 'F'),
          ('G', 'H'),
          ('I', 'L'),
          ('M', 'O'),
          ('Q', 'T'),
          ('U', 'W')]

def can_make_word(word, block_collection=blocks):
    if not word:
        return False
    blocks_used = set()
    for char in word.upper():
        found_block = False
        for i, block in enumerate(block_collection):
            if char in block and i not in blocks_used:
                blocks_used.add(i)
                found_block = True
                break
        if not found_block:
            return False
    return True

if __name__ == '__main__':
    import doctest
    doctest.testmod()
    print('\n'.join(f""{w}: {can_make_word(w)}"" for w in 
                    ['AB', 'CD', 'EF', 'GH', 'XZ', 
                     'AC', 'DF']))"
z37tt_4_2,z37tt,ABC problem,Mathematics,Number Theory,go,T4,Different Language,"package main

import (
	""fmt""
	""strings""
)

func newSpeller(blocks string) func(string) bool {
	bl := strings.Fields(blocks)
	return func(word string) bool {
		return r(word, bl)
	}
}

func r(word string, bl []string) bool {
	if word == """" {
		return true
	}
	c := word[0] | 32
	for i, b := range bl {
		if c == b[0]|32 || c == b[1]|32 {
			bl[i], bl[0] = bl[0], b
			if r(word[1:], bl[1:]) == true {
				return true
			}
			bl[i], bl[0] = bl[0], bl[i]
		}
	}
	return false
}

func main() {
	sp := newSpeller(
		""BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM"")
	for _, word := range []string{
		""A"", ""BARK"", ""BOOK"", ""TREAT"", ""COMMON"", ""SQUAD"", ""CONFUSE""} {
		fmt.Println(word, sp(word))
	}
}"
z37tt_4_2,z37tt,ABC problem,Mathematics,Number Theory,java,T4,Different Language,"import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class ABC {

    public static void main(String[] args) {
        List<String> blocks = Arrays.asList(
                ""BO"", ""XK"", ""DQ"", ""CP"", ""NA"",
                ""GT"", ""RE"", ""TG"", ""QD"", ""FS"",
                ""JW"", ""HU"", ""VI"", ""AN"", ""OB"",
                ""ER"", ""FS"", ""LY"", ""PC"", ""ZM"");

        for (String word: Arrays.asList("""", ""A"", ""BARK"", ""BOOK"", ""TREAT"", ""COMMON"", ""SQUAD"", ""CONFUSE"")) {
            System.out.printf(""%s:%s%n"", word.isEmpty() ? ""\""\"""": word, canMakeWord(word, blocks));
        }
    }

    public static boolean canMakeWord(String word, List<String> blocks) {
        if (word.isEmpty())
            return true;

        char c = word.charAt(0);
        for (int i = 0; i < blocks.size(); i++) {
            String b = blocks.get(i);
            if (b.charAt(0) != c && b.charAt(1) != c)
                continue;
            Collections.swap(blocks, 0, i);
            if (canMakeWord(word.substring(1), blocks.subList(1, blocks.size())))
                return true;
            Collections.swap(blocks, 0, i);
        }

        return false;
    }
}"
z37tt_4_2,z37tt,ABC problem,Mathematics,Number Theory,javascript,T4,Different Language,"var blocks = ""BO XK DQ CP NA GT RE TG QD FS JW HU VI AN OB ER FS LY PC ZM"";

function CheckWord(blocks, word) {"
z37tt_4_2,z37tt,ABC problem,Mathematics,Number Theory,php,T4,Different Language,"<?php
$words = array(, , , , , , );

function canMakeWord($word) {
    $word = strtoupper($word);
    $blocks = array(
            , , , , ,
            , , , , ,
            , , , , ,
            , , , , ,
    );

    foreach (str_split($word) as $char) {
        foreach ($blocks as $k => $block) {
            if (strpos($block, $char) !== FALSE) {
                unset($blocks[$k]);
                continue(2);
            }
        }
        return false;
    }
    return true;
}

foreach ($words as $word) {
    echo $word.': ';
    echo canMakeWord($word)?  : ;
    echo ;
}"
z37tt_4_2,z37tt,ABC problem,Mathematics,Number Theory,ruby,T4,Different Language,"words = %w(A BaRK BOoK tREaT COmMOn SqUAD CoNfuSE) << 

words.each do |word|
  blocks = 
  res = word.each_char.all?{|c| blocks.sub!(/\w?
  puts 
end"
8i80o_1_1,8i80o,AKS test for primes,Mathematics,Number Theory,python,T1,Identical Clone,"def expand_x_1(n): 

    c =1
    for i in range(n
        c = c*(n-i)
        yield c

def aks(p):
    if p==2:
        return True

    for i in expand_x_1(p):
        if i% p:

            return False
    return True"
8i80o_1_2,8i80o,AKS test for primes,Mathematics,Number Theory,python,T1,Different Whitespaces,"def expand_x_1(n):

 c =1
 for i in range(n):
  c = c*(n-i)
  yield c

def aks(p):
 if p==2:
  return True

 for i in expand_x_1(p):
  if i% p:

   return False
 return True"
8i80o_1_3,8i80o,AKS test for primes,Mathematics,Number Theory,python,T1,Different Comments,"def expand_x_1(n): 

    c = 1
    for i in range(n):
        c = c * (n - i)
        yield c

def aks(p):
    if p == 2:
        return True

    for i in expand_x_1(p):
        if i % p:
            return False
    return True"
8i80o_1_4,8i80o,AKS test for primes,Mathematics,Number Theory,python,T1,Different Formatting,"def expand_x_1(n): 
    c = 1
    for i in range(n):
        c = c * (n - i)
        yield c

def aks(p):
    if p == 2:
        return True
    for i in expand_x_1(p):
        if i % p:
            return False
    return True"
8i80o_2_1,8i80o,AKS test for primes,Mathematics,Number Theory,python,T2,Different Variable Names,"def extend_y_1(m): 

    d =1
    for j in range(m):
        d = d*(m-j)
        yield d

def bks(q):
    if q==2:
        return True

    for j in extend_y_1(q):
        if j% q:
            return False
    return True"
8i80o_2_2,8i80o,AKS test for primes,Mathematics,Number Theory,python,T2,Different Data Types,"def expand_x_1(n): 

    c = 1.0
    for i in range(n):
        c = c * (n - i)
        yield c

def aks(p):
    if p == 2:
        return True

    for i in expand_x_1(float(p)):
        if i % float(p):

            return False
    return True"
8i80o_2_3,8i80o,AKS test for primes,Mathematics,Number Theory,python,T2,Different Function Names,"def expand_y_1(n): 

    c =1
    for i in range(n):
        c = c*(n-i)
        yield c

def bks(p):
    if p==2:
        return True

    for i in expand_y_1(p):
        if i% p:

            return False
    return True"
8i80o_3_1,8i80o,AKS test for primes,Mathematics,Number Theory,python,T3,Added Statements,"def expand_x_1(n): 

    c = 1
    for i in range(n):
        c = c * (n - i)
        yield c

def aks(p):
    if p == 2:
        return True

    results = list(expand_x_1(p))
    for i in results:
        if i % p:
            return False
    return True"
8i80o_3_2,8i80o,AKS test for primes,Mathematics,Number Theory,python,T3,Removed Statements,"def expand_x_1(n): 
    for i in range(n):
        yield (c := c * (n - i))

def aks(p):
    if p == 2:
        return True
    return all(i % p == 0 for i in expand_x_1(p))"
8i80o_3_3,8i80o,AKS test for primes,Mathematics,Number Theory,python,T3,Reordered Statements,"def expand_x_1(n): 
    c = 1
    for i in range(n):
        yield c
        c = c * (n - i)

def aks(p):
    if p == 2:
        return True
    for i in expand_x_1(p):
        if i % p:
            return False
    return True"
8i80o_3_4,8i80o,AKS test for primes,Mathematics,Number Theory,python,T3,Control Flow Modifications,"def expand_x_1(n): 
    c = 1
    i = 0
    while i < n:
        c = c * (n - i)
        yield c
        i += 1

def aks(p):
    if p != 2:
        for i in expand_x_1(p):
            if i % p != 0:
                return False
        return True
    return True"
8i80o_4_1,8i80o,AKS test for primes,Mathematics,Number Theory,python,T4,Same Language,"def expand_x_1(n): 
    for i in range(n):
        yield (c := c * (n - i)) if 'c' in locals() else (locals()['c'] := 1) * (n - i)

def aks(p):
    if p == 2:
        return True

    for i in expand_x_1(p):
        if i % p:
            return False
    return True"
8i80o_4_2,8i80o,AKS test for primes,Mathematics,Number Theory,go,T4,Different Language,"package main

import ""fmt""

func bc(p int) []int64 {
    c := make([]int64, p+1)
    r := int64(1)
    for i, half := 0, p/2; i <= half; i++ {
        c[i] = r
        c[p-i] = r
        r = r * int64(p-i) / int64(i+1)
    }
    for i := p - 1; i >= 0; i -= 2 {
        c[i] = -c[i]
    }
    return c
}

func main() {
    for p := 0; p <= 7; p++ {
        fmt.Printf(""%d: %s\n"", p, pp(bc(p)))
    }
    for p := 2; p < 50; p++ {
        if aks(p) {
            fmt.Print(p, "" "")
        }
    }
    fmt.Println()
}

var e = []rune("""")

func pp(c []int64) (s string) {
    if len(c) == 1 {
        return fmt.Sprint(c[0])
    }
    p := len(c) - 1
    if c[p] != 1 {
        s = fmt.Sprint(c[p])
    }
    for i := p; i > 0; i-- {
        s += ""x""
        if i != 1 {
            s += string(e[i-2])
        }
        if d := c[i-1]; d < 0 {
            s += fmt.Sprintf("" -%d"", -d)
        } else {
            s += fmt.Sprintf("" +%d"", d)
        }
    }
    return
}

func aks(p int) bool {
    c := bc(p)
    c[p]--
    c[0]++
    for _, d := range c {
        if d%int64(p) != 0 {
            return false
        }
    }
    return true
}"
8i80o_4_2,8i80o,AKS test for primes,Mathematics,Number Theory,java,T4,Different Language,"public class AksTest {
    private static final long[] c = new long[64];

    public static void main(String[] args) {
        for (int n = 0; n < 10; n++) {
            coeff(n);
            show(n);
        }

        System.out.print(""Primes:"");
        for (int n = 1; n < c.length; n++)
            if (isPrime(n))
                System.out.printf(""%d"", n);

        System.out.println();
    }

    static void coeff(int n) {
        c[0] = 1;
        for (int i = 0; i < n; c[0] = -c[0], i++) {
            c[1 + i] = 1;
            for (int j = i; j > 0; j--)
                c[j] = c[j - 1] - c[j];
        }
    }

    static boolean isPrime(int n) {
        coeff(n);
        c[0]++;
        c[n]--;

        int i = n;
        while (i-- != 0 && c[i] % n == 0)
            continue;
        return i < 0;
    }

    static void show(int n) {
        System.out.print(""(x-1)^"" + n + "" ="");
        for (int i = n; i >= 0; i--) {
            System.out.print("" + "" + c[i] + ""x^"" + i);
        }
        System.out.println();
    }
}"
8i80o_4_2,8i80o,AKS test for primes,Mathematics,Number Theory,javascript,T4,Different Language,"var i, p, pascal, primerow, primes, show, _i;

pascal = function() {
  var a;
  a = [];
  return function() {
    var b, i;
    if (a.length === 0) {
      return a = [1];
    } else {
      b = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = a.length - 1; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(a[i] + a[i + 1]);
        }
        return _results;
      })();
      return a = [1].concat(b).concat([1]);
    }
  };
};

show = function(a) {
  var degree, i, sgn, show_x, str, _i, _ref;
  show_x = function(e) {
    switch (e) {
      case 0:
        return """";
      case 1:
        return ""x"";
      default:
        return ""x^"" + e;
    }
  };
  degree = a.length - 1;
  str = ""(x - 1)^"" + degree + "" ="";
  sgn = 1;
  for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
    str += ' ' + (sgn > 0 ? ""+"" : ""-"") + ' ' + a[i] + show_x(degree - i);
    sgn = -sgn;
  }
  return str;
};

primerow = function(row) {
  var degree;
  degree = row.length - 1;
  return row.slice(1, degree).every(function(x) {
    return x % degree === 0;
  });
};

p = pascal();

for (i = _i = 0; _i <= 7; i = ++_i) {
  console.log(show(p()));
}

p = pascal();

p();

p();

primes = (function() {
  var _j, _results;
  _results = [];
  for (i = _j = 1; _j <= 49; i = ++_j) {
    if (primerow(p())) {
      _results.push(i + 1);
    }
  }
  return _results;
})();

console.log("""");

console.log(""The primes upto 50 are: "" + primes);"
8i80o_4_2,8i80o,AKS test for primes,Mathematics,Number Theory,ruby,T4,Different Language,"require 'polynomial'

def x_minus_1_to_the(p)
  return Polynomial.new(-1,1)**p
end

def prime?(p)
  return false if p < 2
  (x_minus_1_to_the(p) - Polynomial.from_string()).coefs.all?{|n| n%p==0}
end

8.times do |n|
  
  
  puts 
end

puts , 50.times.select {|n| prime? n}.join(',')"
5cux_1_1,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T1,Identical Clone,"def validate(diagram):

    

    rawlines = diagram.splitlines()
    lines = []
    for line in rawlines:
        if line != '':
            lines.append(line)

    

    if len(lines) == 0:
        print('diagram has no non-empty lines!')
        return None

    width = len(lines[0])
    cols = (width - 1) 

    if cols not in [8, 16, 32, 64]: 
        print('number of columns should be 8, 16, 32 or 64')
        return None

    if len(lines)%2 == 0:
        print('number of non-empty lines should be odd')
        return None

    if lines[0] != (('+--' * cols)+'+'):
            print('incorrect header line')
            return None

    for i in range(len(lines)):
        line=lines[i]
        if i == 0:
            continue
        elif i%2 == 0:
            if line != lines[0]:
                print('incorrect separator line')
                return None
        elif len(line) != width:
            print('inconsistent line widths')
            return None
        elif line[0] != '|' or line[width-1] != '|':
            print()    
            return None

    return lines



def decode(lines):
    print()
    print()

    startbit = 0

    results = []

    for line in lines:
        infield=False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1) 
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    reslist = [name, bits, startbit, endbit]
                    results.append(reslist)
                    spaces = 0
                    name = ''
                    startbit += bits

    return results

def unpack(results, hex):
    print()
    print(hex)
    print()
    bin = f'{int(hex, 16):0>{4*len(hex)}b}'
    print(bin)
    print()
    print()
    print()
    for r in results:
        name = r[0]
        size = r[1]
        startbit = r[2]
        endbit = r[3]
        bitpattern = bin[startbit:endbit+1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))


diagram = 

lines = validate(diagram)

if lines == None:
    print()
else:
    print()
    print()
    print()
    for line in lines:
        print(line)

    print()
    print()
    print()

    results = decode(lines)    

    

    hex =  

    unpack(results, hex)"
5cux_1_2,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T1,Different Whitespaces,"def validate(diagram):
 rawlines = diagram.splitlines() 
 lines = [] 
 for line in rawlines: 
  if line != '': 
   lines.append(line) 
 if len(lines) == 0: 
  print('diagram has no non-empty lines!') 
  return None 
 width = len(lines[0]) 
 cols = (width - 1) 
 if cols not in [8, 16, 32, 64]: 
  print('number of columns should be 8, 16, 32 or 64') 
  return None 
 if len(lines)%2 == 0: 
  print('number of non-empty lines should be odd') 
  return None 
 if lines[0] != (('+--' * cols)+'+'): 
  print('incorrect header line') 
  return None 
 for i in range(len(lines)): 
  line=lines[i] 
  if i == 0: 
   continue 
  elif i%2 == 0: 
   if line != lines[0]: 
    print('incorrect separator line') 
    return None 
  elif len(line) != width: 
   print('inconsistent line widths') 
   return None 
  elif line[0] != '|' or line[width-1] != '|': 
   print() 
   return None 
 return lines 
def decode(lines): 
 print() 
 print() 
 startbit = 0 
 results = [] 
 for line in lines: 
  infield=False 
  for c in line: 
   if not infield and c == '|': 
    infield = True 
    spaces = 0 
    name = '' 
   elif infield: 
    if c == ' ': 
     spaces += 1 
    elif c != '|': 
     name += c 
    else: 
     bits = (spaces + len(name) + 1) 
     endbit = startbit + bits - 1 
     print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit)) 
     reslist = [name, bits, startbit, endbit] 
     results.append(reslist) 
     spaces = 0 
     name = '' 
     startbit += bits 
 return results 
def unpack(results, hex): 
 print() 
 print(hex) 
 print() 
 bin = f'{int(hex, 16):0>{4*len(hex)}b}' 
 print(bin) 
 print() 
 print() 
 print() 
 for r in results: 
  name = r[0] 
  size = r[1] 
  startbit = r[2] 
  endbit = r[3] 
  bitpattern = bin[startbit:endbit+1] 
  print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern)) 
diagram =  
lines = validate(diagram) 
if lines == None: 
 print() 
else: 
 print() 
 print() 
 print() 
 for line in lines: 
  print(line) 
 print() 
 print() 
 print() 
 results = decode(lines) 
 hex =  
unpack(results, hex)"
5cux_1_3,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T1,Different Comments,"def validate(diagram):

    rawlines = diagram.splitlines()
    lines = []
    for line in rawlines:
        if line != '':
            lines.append(line)

    if len(lines) == 0:
        print('diagram has no non-empty lines!')
        return None

    width = len(lines[0])
    cols = (width - 1) 

    if cols not in [8, 16, 32, 64]: 
        print('number of columns should be 8, 16, 32 or 64')
        return None

    if len(lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None

    if lines[0] != (('+--' * cols) + '+'):
        print('incorrect header line')
        return None

    for i in range(len(lines)):
        line = lines[i]
        if i == 0:
            continue
        elif i % 2 == 0:
            if line != lines[0]:
                print('incorrect separator line')
                return None
        elif len(line) != width:
            print('inconsistent line widths')
            return None
        elif line[0] != '|' or line[width - 1] != '|':
            print()    
            return None

    return lines



def decode(lines):
    print()
    print()

    startbit = 0

    results = []

    for line in lines:
        infield = False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1) 
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    reslist = [name, bits, startbit, endbit]
                    results.append(reslist)
                    spaces = 0
                    name = ''
                    startbit += bits

    return results

def unpack(results, hex):
    print()
    print(hex)
    print()
    bin = f'{int(hex, 16):0>{4*len(hex)}b}'
    print(bin)
    print()
    print()
    print()
    for r in results:
        name = r[0]
        size = r[1]
        startbit = r[2]
        endbit = r[3]
        bitpattern = bin[startbit:endbit + 1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))


diagram = 

lines = validate(diagram)

if lines == None:
    print()
else:
    print()
    print()
    print()
    for line in lines:
        print(line)

    print()
    print()
    print()

    results = decode(lines)    

    hex =  

    unpack(results, hex)"
5cux_1_4,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T1,Different Formatting,"def validate(diagram):
    rawlines = diagram.splitlines()
    lines = []
    for line in rawlines:
        if line != '':
            lines.append(line)
    if len(lines) == 0:
        print('diagram has no non-empty lines!')
        return None
    width = len(lines[0])
    cols = (width - 1) 
    if cols not in [8, 16, 32, 64]: 
        print('number of columns should be 8, 16, 32 or 64')
        return None
    if len(lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None
    if lines[0] != (('+--' * cols) + '+'):
        print('incorrect header line')
        return None
    for i in range(len(lines)):
        line = lines[i]
        if i == 0:
            continue
        elif i % 2 == 0:
            if line != lines[0]:
                print('incorrect separator line')
                return None
        elif len(line) != width:
            print('inconsistent line widths')
            return None
        elif line[0] != '|' or line[width - 1] != '|':
            print()    
            return None
    return lines

def decode(lines):
    print()
    print()
    startbit = 0
    results = []
    for line in lines:
        infield = False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1) 
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    reslist = [name, bits, startbit, endbit]
                    results.append(reslist)
                    spaces = 0
                    name = ''
                    startbit += bits
    return results

def unpack(results, hex):
    print()
    print(hex)
    print()
    bin = f'{int(hex, 16):0>{4 * len(hex)}b}'
    print(bin)
    print()
    print()
    print()
    for r in results:
        name = r[0]
        size = r[1]
        startbit = r[2]
        endbit = r[3]
        bitpattern = bin[startbit:endbit + 1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))

diagram = 

lines = validate(diagram)

if lines == None:
    print()
else:
    print()
    print()
    print()
    for line in lines:
        print(line)
    print()
    print()
    print()
    results = decode(lines)    
    hex =  
    unpack(results, hex)"
5cux_2_1,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T2,Different Variable Names,"def check_structure(layout):

    content_lines = layout.splitlines()
    filtered_lines = []
    for item in content_lines:
        if item != '':
            filtered_lines.append(item)

    if len(filtered_lines) == 0:
        print('layout has no non-empty lines!')
        return None

    length = len(filtered_lines[0])
    column_count = (length - 1)

    if column_count not in [8, 16, 32, 64]: 
        print('number of columns should be 8, 16, 32 or 64')
        return None

    if len(filtered_lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None

    if filtered_lines[0] != (('+--' * column_count) + '+'):
        print('incorrect header line')
        return None

    for index in range(len(filtered_lines)):
        current_line = filtered_lines[index]
        if index == 0:
            continue
        elif index % 2 == 0:
            if current_line != filtered_lines[0]:
                print('incorrect separator line')
                return None
        elif len(current_line) != length:
            print('inconsistent line widths')
            return None
        elif current_line[0] != '|' or current_line[length - 1] != '|':
            print()    
            return None

    return filtered_lines

def parse(filtered_lines):
    print()
    print()

    initial_bit = 0

    output = []

    for current_line in filtered_lines:
        in_field = False
        for character in current_line:
            if not in_field and character == '|':
                in_field = True
                space_count = 0
                identifier = ''
            elif in_field:
                if character == ' ':
                    space_count += 1
                elif character != '|':
                    identifier += character
                else:
                    total_bits = (space_count + len(identifier) + 1) 
                    finish_bit = initial_bit + total_bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(identifier, total_bits, initial_bit, finish_bit))
                    result_list = [identifier, total_bits, initial_bit, finish_bit]
                    output.append(result_list)
                    space_count = 0
                    identifier = ''
                    initial_bit += total_bits

    return output

def display(output, hex_value):
    print()
    print(hex_value)
    print()
    binary_string = f'{int(hex_value, 16):0>{4*len(hex_value)}b}'
    print(binary_string)
    print()
    print()
    print()
    for item in output:
        identifier = item[0]
        length = item[1]
        start_bit = item[2]
        finish_bit = item[3]
        pattern = binary_string[start_bit:finish_bit + 1]
        print('{0:7}    {1:2d}  {2:16}'.format(identifier, length, pattern))

layout = 

filtered_lines = check_structure(layout)

if filtered_lines == None:
    print()
else:
    print()
    print()
    print()
    for item in filtered_lines:
        print(item)

    print()
    print()
    print()

    output = parse(filtered_lines)

    hex_value = 

    display(output, hex_value)"
5cux_2_2,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T2,Different Data Types,"def validate(diagram):

    rawlines = diagram.splitlines()
    lines = []
    for line in rawlines:
        if line != '':
            lines.append(line)

    if len(lines) == 0:
        print('diagram has no non-empty lines!')
        return None

    width = len(lines[0])
    cols = (width - 1) 

    if cols not in [8, 16, 32, 64]: 
        print('number of columns should be 8, 16, 32 or 64')
        return None

    if len(lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None

    if lines[0] != (('+--' * cols) + '+'):
        print('incorrect header line')
        return None

    for i in range(len(lines)):
        line = lines[i]
        if i == 0:
            continue
        elif i % 2 == 0:
            if line != lines[0]:
                print('incorrect separator line')
                return None
        elif len(line) != width:
            print('inconsistent line widths')
            return None
        elif line[0] != '|' or line[width - 1] != '|':
            print()    
            return None

    return lines


def decode(lines):
    print()
    print()

    startbit = 0

    results = []

    for line in lines:
        infield = False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1) 
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    reslist = [name, bits, startbit, endbit]
                    results.append(reslist)
                    spaces = 0
                    name = ''
                    startbit += bits

    return results

def unpack(results, hex_value):
    print()
    print(hex_value)
    print()
    bin_value = f'{int(hex_value, 16):0>{4*len(hex_value)}b}'
    print(bin_value)
    print()
    print()
    print()
    for r in results:
        name = r[0]
        size = r[1]
        startbit = r[2]
        endbit = r[3]
        bitpattern = bin_value[startbit:endbit+1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))


diagram = 

lines = validate(diagram)

if lines is None:
    print()
else:
    print()
    print()
    print()
    for line in lines:
        print(line)

    print()
    print()
    print()

    results = decode(lines)    

    hex_value =  

    unpack(results, hex_value)"
5cux_2_3,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T2,Different Function Names,"def check(diagram):

    rawlines = diagram.splitlines()
    lines = []
    for line in rawlines:
        if line != '':
            lines.append(line)

    if len(lines) == 0:
        print('diagram has no non-empty lines!')
        return None

    width = len(lines[0])
    cols = (width - 1) 

    if cols not in [8, 16, 32, 64]: 
        print('number of columns should be 8, 16, 32 or 64')
        return None

    if len(lines)%2 == 0:
        print('number of non-empty lines should be odd')
        return None

    if lines[0] != (('+--' * cols)+'+'):
            print('incorrect header line')
            return None

    for i in range(len(lines)):
        line=lines[i]
        if i == 0:
            continue
        elif i%2 == 0:
            if line != lines[0]:
                print('incorrect separator line')
                return None
        elif len(line) != width:
            print('inconsistent line widths')
            return None
        elif line[0] != '|' or line[width-1] != '|':
            print()    
            return None

    return lines

def interpret(lines):
    print()
    print()

    startbit = 0

    results = []

    for line in lines:
        infield=False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1) 
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    reslist = [name, bits, startbit, endbit]
                    results.append(reslist)
                    spaces = 0
                    name = ''
                    startbit += bits

    return results

def reveal(results, hex):
    print()
    print(hex)
    print()
    bin = f'{int(hex, 16):0>{4*len(hex)}b}'
    print(bin)
    print()
    print()
    print()
    for r in results:
        name = r[0]
        size = r[1]
        startbit = r[2]
        endbit = r[3]
        bitpattern = bin[startbit:endbit+1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))


diagram = 

lines = check(diagram)

if lines == None:
    print()
else:
    print()
    print()
    print()
    for line in lines:
        print(line)

    print()
    print()
    print()

    results = interpret(lines)    

    hex =  

    reveal(results, hex)"
5cux_3_1,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T3,Added Statements,"def validate(diagram):
    rawlines = diagram.splitlines()
    lines = [line for line in rawlines if line]
    if not lines:
        print('diagram has no non-empty lines!')
        return None
    width = len(lines[0])
    cols = (width - 1)
    if cols not in [8, 16, 32, 64]: 
        print('number of columns should be 8, 16, 32 or 64')
        return None
    if len(lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None
    if lines[0] != (('+--' * cols) + '+'):
        print('incorrect header line')
        return None
    for i in range(len(lines)):
        line = lines[i]
        if i == 0:
            continue
        elif i % 2 == 0:
            if line != lines[0]:
                print('incorrect separator line')
                return None
        elif len(line) != width:
            print('inconsistent line widths')
            return None
        elif line[0] != '|' or line[width - 1] != '|':
            print()
            return None
    return lines

def decode(lines):
    print()
    print()
    startbit = 0
    results = []
    for line in lines:
        infield = False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1)
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    reslist = [name, bits, startbit, endbit]
                    results.append(reslist)
                    spaces = 0
                    name = ''
                    startbit += bits
    return results

def unpack(results, hex_value):
    print()
    print(hex_value)
    print()
    bin_value = f'{int(hex_value, 16):0>{4*len(hex_value)}b}'
    print(bin_value)
    print()
    print()
    print()
    for r in results:
        name, size, startbit, endbit = r
        bitpattern = bin_value[startbit:endbit + 1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))

diagram = 

lines = validate(diagram)

if lines is None:
    print()
else:
    print()
    print()
    print()
    for line in lines:
        print(line)

    print()
    print()
    print()

    results = decode(lines)    
    hex_value =  

    unpack(results, hex_value)"
5cux_3_2,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T3,Removed Statements,"def validate(diagram):
    lines = [line for line in diagram.splitlines() if line]
    if not lines:
        print('diagram has no non-empty lines!')
        return None
    width = len(lines[0])
    cols = (width - 1)
    if cols not in [8, 16, 32, 64]:
        print('number of columns should be 8, 16, 32 or 64')
        return None
    if len(lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None
    if lines[0] != (('+--' * cols) + '+'):
        print('incorrect header line')
        return None
    for i in range(1, len(lines)):
        line = lines[i]
        if i % 2 == 0 and line != lines[0]:
            print('incorrect separator line')
            return None
        if len(line) != width or line[0] != '|' or line[width - 1] != '|':
            return None
    return lines

def decode(lines):
    results = []
    startbit = 0
    for line in lines:
        infield = False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1)
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    results.append([name, bits, startbit, endbit])
                    startbit += bits
    return results

def unpack(results, hex):
    bin = f'{int(hex, 16):0>{4*len(hex)}b}'
    for r in results:
        name, size, startbit, endbit = r
        bitpattern = bin[startbit:endbit + 1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))

diagram = 

lines = validate(diagram)

if lines:
    results = decode(lines)    

    hex =  

    unpack(results, hex)"
5cux_3_3,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T3,Reordered Statements,"def validate(diagram):
    rawlines = diagram.splitlines()
    lines = []
    for line in rawlines:
        if line != '':
            lines.append(line)

    if len(lines) == 0:
        print('diagram has no non-empty lines!')
        return None

    if len(lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None

    width = len(lines[0])
    cols = (width - 1)

    if cols not in [8, 16, 32, 64]: 
        print('number of columns should be 8, 16, 32 or 64')
        return None

    if lines[0] != (('+--' * cols) + '+'):
        print('incorrect header line')
        return None

    for i in range(len(lines)):
        line = lines[i]
        if i == 0:
            continue
        elif i % 2 == 0:
            if line != lines[0]:
                print('incorrect separator line')
                return None
        elif len(line) != width:
            print('inconsistent line widths')
            return None
        elif line[0] != '|' or line[width - 1] != '|':
            print()
            return None

    return lines

def decode(lines):
    print()
    print()

    startbit = 0
    results = []

    for line in lines:
        infield = False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1)
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    reslist = [name, bits, startbit, endbit]
                    results.append(reslist)
                    spaces = 0
                    name = ''
                    startbit += bits

    return results

def unpack(results, hex):
    print()
    print(hex)
    print()
    bin = f'{int(hex, 16):0<{4*len(hex)}b}'
    print(bin)
    print()
    print()
    print()
    for r in results:
        name = r[0]
        size = r[1]
        startbit = r[2]
        endbit = r[3]
        bitpattern = bin[startbit:endbit + 1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))

diagram = 

lines = validate(diagram)

if lines is None:
    print()
else:
    print()
    print()
    print()
    for line in lines:
        print(line)

    print()
    print()
    print()

    results = decode(lines)

    hex =  

    unpack(results, hex)"
5cux_3_4,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T3,Control Flow Modifications,"def validate(diagram):
    rawlines = diagram.splitlines()
    lines = [line for line in rawlines if line != '']

    if not lines:
        print('diagram has no non-empty lines!')
        return None

    width = len(lines[0])
    cols = (width - 1)

    if cols not in [8, 16, 32, 64]:
        print('number of columns should be 8, 16, 32 or 64')
        return None

    if len(lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None

    if lines[0] != (('+--' * cols) + '+'):
        print('incorrect header line')
        return None

    for i in range(1, len(lines)):
        line = lines[i]
        if (i % 2 == 0 and line != lines[0]) or \
           (len(line) != width) or \
           (line[0] != '|' or line[width - 1] != '|'):
            print('incorrect or inconsistent line')
            return None

    return lines

def decode(lines):
    results = []
    startbit = 0

    for line in lines:
        infield = False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = (spaces + len(name) + 1)
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    results.append([name, bits, startbit, endbit])
                    startbit += bits
                    infield = False

    return results

def unpack(results, hex):
    bin = f'{int(hex, 16):0>{4 * len(hex)}b}'

    for r in results:
        name = r[0]
        size = r[1]
        startbit = r[2]
        endbit = r[3]
        bitpattern = bin[startbit:endbit + 1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))

diagram = 

lines = validate(diagram)

if lines is None:
    print()
else:
    for line in lines:
        print(line)

    results = decode(lines)

    hex = 

    unpack(results, hex)"
5cux_4_1,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,python,T4,Same Language,"def validate(diagram):
    lines = [line for line in diagram.splitlines() if line]

    if not lines:
        print('diagram has no non-empty lines!')
        return None

    width = len(lines[0])
    cols = width - 1

    if cols not in [8, 16, 32, 64]:
        print('number of columns should be 8, 16, 32 or 64')
        return None

    if len(lines) % 2 == 0:
        print('number of non-empty lines should be odd')
        return None

    if lines[0] != ('+--' * cols) + '+':
        print('incorrect header line')
        return None

    for i in range(1, len(lines)):
        line = lines[i]
        if i % 2 == 0 and line != lines[0]:
            print('incorrect separator line')
            return None
        if len(line) != width:
            print('inconsistent line widths')
            return None
        if line[0] != '|' or line[width - 1] != '|':
            print()
            return None

    return lines

def decode(lines):
    print('\n\n')
    startbit = 0
    results = []

    for line in lines:
        infield = False
        for c in line:
            if not infield and c == '|':
                infield = True
                spaces = 0
                name = ''
            elif infield:
                if c == ' ':
                    spaces += 1
                elif c != '|':
                    name += c
                else:
                    bits = spaces + len(name) + 1
                    endbit = startbit + bits - 1
                    print('{0:7}    {1:2d}     {2:2d}   {3:2d}'.format(name, bits, startbit, endbit))
                    results.append([name, bits, startbit, endbit])
                    startbit += bits
                    spaces = 0
                    name = ''

    return results

def unpack(results, hex):
    print('\n{}\n'.format(hex))
    bin_str = f'{int(hex, 16):0>{4 * len(hex)}b}'
    print(bin_str + '\n\n')

    for r in results:
        name, size, startbit, endbit = r
        bitpattern = bin_str[startbit:endbit + 1]
        print('{0:7}    {1:2d}  {2:16}'.format(name, size, bitpattern))

diagram = 
lines = validate(diagram)

if lines is None:
    print()
else:
    print('\n\n\n')
    for line in lines:
        print(line)

    print('\n\n\n')
    results = decode(lines)

    hex = 
    unpack(results, hex)"
5cux_4_2,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,go,T4,Different Language,"package main

import (
    ""fmt""
    ""log""
    ""math/big""
    ""strings""
)

type result struct {
    name  string
    size  int
    start int
    end   int
}

func (r result) String() string {
    return fmt.Sprintf(""%-7s  %2d   %3d  %3d"", r.name, r.size, r.start, r.end)
}

func validate(diagram string) []string {
    var lines []string
    for _, line := range strings.Split(diagram, ""\n"") {
        line = strings.Trim(line, "" \t"")
        if line != """" {
            lines = append(lines, line)
        }
    }
    if len(lines) == 0 {
        log.Fatal(""diagram has no non-empty lines!"")
    }
    width := len(lines[0])
    cols := (width - 1) / 3
    if cols != 8 && cols != 16 && cols != 32 && cols != 64 {
        log.Fatal(""number of columns should be 8, 16, 32 or 64"")
    }
    if len(lines)%2 == 0 {
        log.Fatal(""number of non-empty lines should be odd"")
    }
    if lines[0] != strings.Repeat(""+--"", cols)+""+"" {
        log.Fatal(""incorrect header line"")
    }
    for i, line := range lines {
        if i == 0 {
            continue
        } else if i%2 == 0 {
            if line != lines[0] {
                log.Fatal(""incorrect separator line"")
            }
        } else if len(line) != width {
            log.Fatal(""inconsistent line widths"")
        } else if line[0] != '|' || line[width-1] != '|' {
            log.Fatal(""non-separator lines must begin and end with '|'"")
        }
    }
    return lines
}

func decode(lines []string) []result {
    fmt.Println(""Name     Bits  Start  End"")
    fmt.Println(""=======  ====  =====  ==="")
    start := 0
    width := len(lines[0])
    var results []result
    for i, line := range lines {
        if i%2 == 0 {
            continue
        }
        line := line[1 : width-1]
        for _, name := range strings.Split(line, ""|"") {
            size := (len(name) + 1) / 3
            name = strings.TrimSpace(name)
            res := result{name, size, start, start + size - 1}
            results = append(results, res)
            fmt.Println(res)
            start += size
        }
    }
    return results
}

func unpack(results []result, hex string) {
    fmt.Println(""\nTest string in hex:"")
    fmt.Println(hex)
    fmt.Println(""\nTest string in binary:"")
    bin := hex2bin(hex)
    fmt.Println(bin)
    fmt.Println(""\nUnpacked:\n"")
    fmt.Println(""Name     Size  Bit pattern"")
    fmt.Println(""=======  ====  ================"")
    for _, res := range results {
        fmt.Printf(""%-7s  %2d  %s\n"", res.name, res.size, bin[res.start:res.end+1])
    }
}

func hex2bin(hex string) string {
    z := new(big.Int)
    z.SetString(hex, 16)
    return fmt.Sprintf(""%0*b"", 4*len(hex), z)
}

func main() {
    const diagram = `
        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
         |                      ID                       |
        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
        |QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
        |                    QDCOUNT                    |
        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

        |                    ANCOUNT                    |
        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
        |                    NSCOUNT                    |
        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
        |                    ARCOUNT                    |
        +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    `
    lines := validate(diagram)
    fmt.Println(""Diagram after trimming whitespace and removal of blank lines:\n"")
    for _, line := range lines {
        fmt.Println(line)
    }
    fmt.Println(""\nDecoded:\n"")
    results := decode(lines)
    hex := ""78477bbf5496e12e1bf169a4"""
5cux_4_2,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,java,T4,Different Language,"import java.math.BigInteger;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class AsciiArtDiagramConverter {

    private static final String TEST = ""+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n"" +
            ""|                      ID                       |\r\n"" +
            ""+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n"" +
            ""|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |\r\n"" +
            ""+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n"" +
            ""|                    QDCOUNT                    |\r\n"" +
            ""+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n"" +
            ""|                    ANCOUNT                    |\r\n"" +
            ""+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n"" +
            ""|                    NSCOUNT                    |\r\n"" +
            ""+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\r\n"" +
            ""|                    ARCOUNT                    |\r\n"" +
            ""+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+"";

    public static void main(String[] args) {
        validate(TEST);
        display(TEST);
        Map<String,List<Integer>> asciiMap = decode(TEST);
        displayMap(asciiMap);
        displayCode(asciiMap, ""78477bbf5496e12e1bf169a4"");
    }

    private static void displayCode(Map<String,List<Integer>> asciiMap, String hex) {
        System.out.printf(""%nTest string in hex:%n%s%n%n"", hex);

        String bin = new BigInteger(hex,16).toString(2);"
5cux_4_2,5cux,ASCII art diagram converter,Programming Concepts,Text Processing,ruby,T4,Different Language,"header = <<HEADER
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ID                       |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    QDCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ANCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    NSCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ARCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
HEADER

Item = Struct.new(:name, :bits, :range)
RE = /\| *\w+ */

i = 0
table = header.scan(RE).map{|m| Item.new( m.delete(), b = m.size/3, i...(i += b)) }

teststr = 
padding = table.sum(&:bits)
binstr  = teststr.hex.to_s(2).rjust(padding, )

table.each{|el| p el.values}; puts
table.each{|el| puts  % [el.name, el.bits, binstr[el.range] ]}"
kb6hf_1_1,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T1,Identical Clone,"def shortest_abbreviation_length(line, list_size):
    words = line.split()
    word_count = len(words)
    
    if word_count != list_size:
        raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')

    
    abbreviation_length = 1
    abbreviations = set()
    while(True):
        abbreviations = {word[:abbreviation_length] for word in words}
        if len(abbreviations) == list_size:
            return abbreviation_length
        abbreviation_length += 1
        abbreviations.clear()

def automatic_abbreviations(filename, words_per_line):
    with open(filename) as file:
        for line in file:
            line = line.rstrip()
            if len(line) > 0:
                length = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()

automatic_abbreviations('daysOfWeek.txt', 7)"
kb6hf_1_2,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T1,Different Whitespaces,"def shortest_abbreviation_length(line,list_size):
 words=line.split()
 word_count=len(words)
 if word_count!=list_size:
  raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')
 abbreviation_length=1
 abbreviations=set()
 while(True):
  abbreviations={word[:abbreviation_length]for word in words}
  if len(abbreviations)==list_size:
   return abbreviation_length
  abbreviation_length+=1
  abbreviations.clear()
def automatic_abbreviations(filename,words_per_line):
 with open(filename)as file:
  for line in file:
   line=line.rstrip()
   if len(line)>0:
    length=shortest_abbreviation_length(line,words_per_line)
    print(f'{length:2} {line}')
   else:
    print()
automatic_abbreviations('daysOfWeek.txt',7)"
kb6hf_1_3,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T1,Different Comments,"def shortest_abbreviation_length(line, list_size):
    words = line.split()
    word_count = len(words)
    
    if word_count != list_size:
        raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')

    
    abbreviation_length = 1
    abbreviations = set()
    while(True):
        abbreviations = {word[:abbreviation_length] for word in words}
        if len(abbreviations) == list_size:
            return abbreviation_length
        abbreviation_length += 1
        abbreviations.clear()

def automatic_abbreviations(filename, words_per_line):
    with open(filename) as file:
        for line in file:
            line = line.rstrip()
            if len(line) > 0:
                length = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()

automatic_abbreviations('daysOfWeek.txt', 7)"
kb6hf_1_4,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T1,Different Formatting,"def shortest_abbreviation_length(line, list_size):
    words = line.split()
    word_count = len(words)
    if word_count != list_size:
        raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')
    abbreviation_length = 1
    abbreviations = set()
    while True:
        abbreviations = {word[:abbreviation_length] for word in words}
        if len(abbreviations) == list_size:
            return abbreviation_length
        abbreviation_length += 1
        abbreviations.clear()

def automatic_abbreviations(filename, words_per_line):
    with open(filename) as file:
        for line in file:
            line = line.rstrip()
            if len(line) > 0:
                length = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()

automatic_abbreviations('daysOfWeek.txt', 7)"
kb6hf_2_1,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T2,Different Variable Names,"def min_abbreviation_length(text, total_words):
    elements = text.split()
    count = len(elements)
    
    if count != total_words:
        raise ValueError(f'Not enough entries, expected {total_words} found {count}')

    
    abbr_length = 1
    abbr_set = set()
    while(True):
        abbr_set = {element[:abbr_length] for element in elements}
        if len(abbr_set) == total_words:
            return abbr_length
        abbr_length += 1
        abbr_set.clear()

def generate_abbreviations(file_path, words_each_line):
    with open(file_path) as data_file:
        for text in data_file:
            text = text.rstrip()
            if len(text) > 0:
                size = min_abbreviation_length(text, words_each_line)
                print(f'{size:2} {text}')
            else:
                print()

generate_abbreviations('daysOfWeek.txt', 7)"
kb6hf_2_2,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T2,Different Data Types,"def shortest_abbreviation_length(line: str, list_size: int) -> int:
    words: list[str] = line.split()
    word_count: int = len(words)
    
    if word_count != list_size:
        raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')

    
    abbreviation_length: int = 1
    abbreviations: set[str] = set()
    while(True):
        abbreviations = {word[:abbreviation_length] for word in words}
        if len(abbreviations) == list_size:
            return abbreviation_length
        abbreviation_length += 1
        abbreviations.clear()

def automatic_abbreviations(filename: str, words_per_line: int) -> None:
    with open(filename) as file:
        for line in file:
            line: str = line.rstrip()
            if len(line) > 0:
                length: int = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()

automatic_abbreviations('daysOfWeek.txt', 7)"
kb6hf_2_3,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T2,Different Function Names,"def minimum_abbreviation_length(text, expected_count):
    terms = text.split()
    total_count = len(terms)
    
    if total_count != expected_count:
        raise ValueError(f'Not enough entries, expected {expected_count} found {total_count}')

    
    abbr_length = 1
    unique_abbrs = set()
    while(True):
        unique_abbrs = {term[:abbr_length] for term in terms}
        if len(unique_abbrs) == expected_count:
            return abbr_length
        abbr_length += 1
        unique_abbrs.clear()

def generate_abbreviations(file_path, number_of_words):
    with open(file_path) as f:
        for text in f:
            text = text.rstrip()
            if len(text) > 0:
                abbr_len = minimum_abbreviation_length(text, number_of_words)
                print(f'{abbr_len:2} {text}')
            else:
                print()

generate_abbreviations('daysOfWeek.txt', 7)"
kb6hf_3_1,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T3,Added Statements,"def shortest_abbreviation_length(line, list_size):
    words = line.split()
    word_count = len(words)

    if word_count != list_size:
        raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')

    abbreviation_length = 1
    abbreviations = set()
    while True:
        abbreviations = {word[:abbreviation_length] for word in words}
        if len(abbreviations) == list_size:
            return abbreviation_length
        abbreviation_length += 1

def automatic_abbreviations(filename, words_per_line):
    with open(filename) as file:
        lines = file.readlines()
        for line in lines:
            line = line.rstrip()
            if line:
                length = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()

automatic_abbreviations('daysOfWeek.txt', 7)"
kb6hf_3_2,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T3,Removed Statements,"def shortest_abbreviation_length(line, list_size):
    words = line.split()
    
    if len(words) != list_size:
        raise ValueError(f'Not enough entries, expected {list_size} found {len(words)}')

    abbreviation_length = 1
    while True:
        abbreviations = {word[:abbreviation_length] for word in words}
        if len(abbreviations) == list_size:
            return abbreviation_length
        abbreviation_length += 1

def automatic_abbreviations(filename, words_per_line):
    with open(filename) as file:
        for line in file:
            line = line.rstrip()
            if line:
                length = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()

automatic_abbreviations('daysOfWeek.txt', 7)"
kb6hf_3_3,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T3,Reordered Statements,"def shortest_abbreviation_length(line, list_size):
    words = line.split()
    word_count = len(words)
    
    if word_count != list_size:
        raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')

    abbreviation_length = 1
    while True:
        abbreviations = {word[:abbreviation_length] for word in words}
        if len(abbreviations) == list_size:
            return abbreviation_length
        abbreviation_length += 1

def automatic_abbreviations(filename, words_per_line):
    with open(filename) as file:
        for line in file:
            line = line.rstrip()
            if len(line) > 0:
                length = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()

automatic_abbreviations('daysOfWeek.txt', 7)"
kb6hf_3_4,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T3,Control Flow Modifications,"def shortest_abbreviation_length(line, list_size):
    words = line.split()
    word_count = len(words)
    
    if word_count == list_size:
        abbreviation_length = 1
        while True:
            abbreviations = {word[:abbreviation_length] for word in words}
            if len(abbreviations) == list_size:
                return abbreviation_length
            abbreviation_length += 1
    raise ValueError(f'Not enough entries, expected {list_size} found {word_count}')

def automatic_abbreviations(filename, words_per_line):
    with open(filename) as file:
        lines = file.readlines()
        for line in lines:
            line = line.rstrip()
            if line:
                length = shortest_abbreviation_length(line, words_per_line)
                print(f'{length:2} {line}')
            else:
                print()

automatic_abbreviations('daysOfWeek.txt', 7)"
kb6hf_4_1,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,python,T4,Same Language,"def get_abbreviation_length(words, expected_count):
    abbreviation_length = 1
    while len({word[:abbreviation_length] for word in words}) != expected_count:
        abbreviation_length += 1
    return abbreviation_length

def process_file(filename, line_count):
    with open(filename) as file:
        for line in file:
            stripped_line = line.rstrip()
            if stripped_line:
                words = stripped_line.split()
                if len(words) != line_count:
                    raise ValueError(f'Not enough entries, expected {line_count} found {len(words)}')
                length = get_abbreviation_length(words, line_count)
                print(f'{length:2} {stripped_line}')
            else:
                print()

process_file('daysOfWeek.txt', 7)"
kb6hf_4_2,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,go,T4,Different Language,"package main

import(
    ""bufio""
    ""fmt""
    ""os""
    ""strings""
)

func distinctStrings(strs []string) []string {
    len := len(strs)
    set := make(map[string]bool, len)
    distinct := make([]string, 0, len)
    for _, str := range strs {
        if !set[str] {
            distinct = append(distinct, str)
            set[str] = true
        }
    }
    return distinct
}

func takeRunes(s string, n int) string {
    i := 0
    for j := range s {
        if i == n {
            return s[:j]
        }
        i++
    }
    return s
}

func main() {
    file, err := os.Open(""days_of_week.txt"")
    if err != nil {
        fmt.Println(""Unable to open file."")
        return
    }
    defer file.Close()
    reader := bufio.NewReader(file)
    lineCount := 0
    for {
        line, err := reader.ReadString('\n')
        if err != nil {"
kb6hf_4_2,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,java,T4,Different Language,"import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Abbreviations {
    public static void main(String[] args) throws IOException {
        Path path = Paths.get(""days_of_week.txt"");
        List<String> readAllLines = Files.readAllLines(path);
        for (int i = 0; i < readAllLines.size(); i++) {
            String line = readAllLines.get(i);
            if (line.length() == 0) continue;

            String[] days = line.split("" "");
            if (days.length != 7) throw new RuntimeException(""There aren't 7 days on line "" + (i + 1));

            Map<String, Integer> temp = new HashMap<>();
            for (String day : days) {
                Integer count = temp.getOrDefault(day, 0);
                temp.put(day, count + 1);
            }
            if (temp.size() < 7) {
                System.out.print(""   "");
                System.out.println(line);
                continue;
            }

            int len = 1;
            while (true) {
                temp.clear();
                for (String day : days) {
                    String sd;
                    if (len >= day.length()) {
                        sd = day;
                    } else {
                        sd = day.substring(0, len);
                    }
                    Integer count = temp.getOrDefault(sd, 0);
                    temp.put(sd, count + 1);
                }
                if (temp.size() == 7) {
                    System.out.printf(""%2d %s\n"", len, line);
                    break;
                }
                len++;
            }
        }
    }
}"
kb6hf_4_2,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,javascript,T4,Different Language,"Array.prototype.hasDoubles = function() {
  let arr = this.slice();
  while (arr.length > 1) {
    let cur = arr.shift();
    if (arr.includes(cur)) return true;
  }
  return false;
}

function getMinAbbrLen(arr) {
  if (arr.length <= 1) return '';
  let testArr = [],
      len = 0, i;
  do {
    len++;
    for (i = 0; i < arr.length; i++)
      testArr[i] = arr[i].substr(0, len);
  } while (testArr.hasDoubles());
  return len;
}"
kb6hf_4_2,kb6hf,"Abbreviations, automatic",Programming Concepts,Text Processing,ruby,T4,Different Language,"require  

File.read().each_line do |line|
  next if line.strip.empty?
  abbr = line.split.abbrev.invert
  puts , abbr.inspect, 
end"
2vilz_1_1,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T1,Identical Clone,"command_table_text = \


user_words = 

def find_abbreviations_length(command_table_text):
    
    command_table = dict()
    for word in command_table_text.split():
        abbr_len = sum(1 for c in word if c.isupper())
        if abbr_len == 0:
            abbr_len = len(word)
        command_table[word] = abbr_len
    return command_table

def find_abbreviations(command_table):
    
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations

def parse_user_string(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, ) for user_word in user_words]
    return .join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
2vilz_1_2,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T1,Different Whitespaces,"command_table_text = \

user_words = 

def find_abbreviations_length(command_table_text):

 command_table = dict()
 for word in command_table_text.split():
  abbr_len = sum(1 for c in word if c.isupper())
  if abbr_len == 0:
   abbr_len = len(word)
  command_table[word] = abbr_len
 return command_table

def find_abbreviations(command_table):

 abbreviations = dict()
 for command, min_abbr_len in command_table.items():
  for l in range(min_abbr_len, len(command)+1):
   abbr = command[:l].lower()
   abbreviations[abbr] = command.upper()
 return abbreviations

def parse_user_string(user_string, abbreviations):
 user_words = [word.lower() for word in user_string.split()]
 commands = [abbreviations.get(user_word,) for user_word in user_words]
 return ''.join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
2vilz_1_3,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T1,Different Comments,"command_table_text = \

user_words = 

def calculate_abbreviation_length(command_table_text):
    
    command_dict = dict()
    for word in command_table_text.split():
        abbreviation_length = sum(1 for c in word if c.isupper())
        if abbreviation_length == 0:
            abbreviation_length = len(word)
        command_dict[word] = abbreviation_length
    return command_dict

def generate_abbreviations(command_dict):
    
    abbr_dict = dict()
    for command, min_abbr_length in command_dict.items():
        for l in range(min_abbr_length, len(command)+1):
            abbr = command[:l].lower()
            abbr_dict[abbr] = command.upper()
    return abbr_dict

def convert_user_input(user_string, abbr_dict):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbr_dict.get(user_word, ) for user_word in user_words]
    return .join(commands)

command_table = calculate_abbreviation_length(command_table_text)
abbreviations_table = generate_abbreviations(command_table)

full_words = convert_user_input(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
2vilz_1_4,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T1,Different Formatting,"command_table_text = \

user_words = 

def find_abbreviations_length(command_table_text):
 command_table = dict()
 for word in command_table_text.split():
  abbr_len = sum(1 for c in word if c.isupper())
  if abbr_len == 0:
   abbr_len = len(word)
  command_table[word] = abbr_len
 return command_table

def find_abbreviations(command_table):
 abbreviations = dict()
 for command, min_abbr_len in command_table.items():
  for l in range(min_abbr_len, len(command)+1):
   abbr = command[:l].lower()
   abbreviations[abbr] = command.upper()
 return abbreviations

def parse_user_string(user_string, abbreviations):
 user_words = [word.lower() for word in user_string.split()]
 commands = [abbreviations.get(user_word, ) for user_word in user_words]
 return .join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
2vilz_2_1,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T2,Different Variable Names,"command_input_text = \


input_terms = 

def determine_abbreviation_length(command_input_text):
    
    input_command_map = dict()
    for term in command_input_text.split():
        abbreviation_length = sum(1 for char in term if char.isupper())
        if abbreviation_length == 0:
            abbreviation_length = len(term)
        input_command_map[term] = abbreviation_length
    return input_command_map

def extract_abbreviations(input_command_map):
    
    extracted_abbr = dict()
    for cmd, min_abbr_len in input_command_map.items():
        for length in range(min_abbr_len, len(cmd)+1):
            abbreviation = cmd[:length].lower()
            extracted_abbr[abbreviation] = cmd.upper()
    return extracted_abbr

def process_input_string(input_string, extracted_abbr):
    input_terms = [term.lower() for term in input_string.split()]
    commands_list = [extracted_abbr.get(input_term, ) for input_term in input_terms]
    return ' '.join(commands_list)

command_dictionary = determine_abbreviation_length(command_input_text)
abbreviation_dictionary = extract_abbreviations(command_dictionary)

complete_terms = process_input_string(input_terms, abbreviation_dictionary)

print(input_terms)
print(complete_terms)"
2vilz_2_2,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T2,Different Data Types,"command_table_text = """"


user_words = """"

def find_abbreviations_length(command_table_text: str) -> dict:
    
    command_table = dict()
    for word in command_table_text.split():
        abbr_len = sum(1 for c in word if c.isupper())
        if abbr_len == 0:
            abbr_len = len(word)
        command_table[word] = abbr_len
    return command_table

def find_abbreviations(command_table: dict) -> dict:
    
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations

def parse_user_string(user_string: str, abbreviations: dict) -> str:
    user_words = list(word.lower() for word in user_string.split())
    commands = list(abbreviations.get(user_word) for user_word in user_words)
    return ''.join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(user_words)
print(full_words)"
2vilz_2_3,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T2,Different Function Names,"command_table_text = \


user_words = 

def compute_abbreviations_length(command_table_text):
    
    command_table = dict()
    for word in command_table_text.split():
        abbr_len = sum(1 for c in word if c.isupper())
        if abbr_len == 0:
            abbr_len = len(word)
        command_table[word] = abbr_len
    return command_table

def generate_abbreviations(command_table):
    
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations

def analyze_user_input(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, ) for user_word in user_words]
    return .join(commands)

command_table = compute_abbreviations_length(command_table_text)
abbreviations_table = generate_abbreviations(command_table)

full_words = analyze_user_input(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
2vilz_3_1,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T3,Added Statements,"command_table_text = \


user_words = 

def find_abbreviations_length(command_table_text):
    
    command_table = dict()
    for word in command_table_text.split():
        abbr_len = sum(1 for c in word if c.isupper())
        if abbr_len == 0:
            abbr_len = len(word)
        command_table[word] = abbr_len
    return command_table

def find_abbreviations(command_table):
    
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations

def parse_user_string(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, '') for user_word in user_words]
    return ''.join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(""User words:"", user_words)
print(""Full words:"", full_words)"
2vilz_3_2,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T3,Removed Statements,"command_table_text = \
user_words = 
def find_abbreviations_length(command_table_text):
    command_table = {}
    for word in command_table_text.split():
        abbr_len = sum(1 for c in word if c.isupper()) or len(word)
        command_table[word] = abbr_len
    return command_table

def find_abbreviations(command_table):
    abbreviations = {}
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbreviations[command[:l].lower()] = command.upper()
    return abbreviations

def parse_user_string(user_string, abbreviations):
    commands = [abbreviations.get(word.lower()) for word in user_string.split()]
    return ' '.join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)
full_words = parse_user_string(user_words, abbreviations_table)

print(user_words)
print(full_words)"
2vilz_3_3,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T3,Reordered Statements,"command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)
full_words = parse_user_string(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
2vilz_3_4,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T3,Control Flow Modifications,"command_table_text = \


user_words = 

def find_abbreviations_length(command_table_text):
    
    command_table = {}
    words = command_table_text.split()
    for word in words:
        abbr_len = sum(1 for c in word if c.isupper())
        command_table[word] = abbr_len if abbr_len > 0 else len(word)
    return command_table

def find_abbreviations(command_table):
    
    abbreviations = {}
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command) + 1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations

def parse_user_string(user_string, abbreviations):
    user_words = user_string.split()
    commands = [abbreviations.get(word.lower()) for word in user_words]
    return ''.join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(user_words)
print(full_words)"
2vilz_4_1,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,python,T4,Same Language,"command_table_text = \
user_words = 

def generate_command_table(text):
    return {word: (len(word) if sum(1 for c in word if c.isupper()) == 0 else sum(1 for c in word if c.isupper())) for word in text.split()}

def generate_abbreviations(command_table):
    return {command[:l].lower(): command.upper() for command, min_abbr_len in command_table.items() for l in range(min_abbr_len, len(command) + 1)}

def resolve_user_input(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, '') for user_word in user_words]
    return ' '.join(commands)

command_table = generate_command_table(command_table_text)
abbreviations_table = generate_abbreviations(command_table)

full_words = resolve_user_input(user_words, abbreviations_table)

print(user_words)
print(full_words)"
2vilz_4_2,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,go,T4,Different Language,"package main

import (
    ""fmt""
    ""strings""
)

var table =
    ""Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress COpy "" +
    ""COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find "" +
    ""NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput "" +
     ""Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO "" +
    ""MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT "" +
    ""READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT "" +
    ""RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer Type Up ""

func validate(commands, words []string, minLens []int) []string {
    results := make([]string, 0)
    if len(words) == 0 {
        return results
    }
    for _, word := range words {
        matchFound := false
        wlen := len(word)
        for i, command := range commands {
            if minLens[i] == 0 || wlen < minLens[i] || wlen > len(command) {
                continue
            }
            c := strings.ToUpper(command)
            w := strings.ToUpper(word)
            if strings.HasPrefix(c, w) {
                results = append(results, c)
                matchFound = true
                break
            }
        }
        if !matchFound {
            results = append(results, ""*error*"")
        }
    }
    return results
}

func main() {
    table = strings.TrimSpace(table)
    commands := strings.Fields(table)
    clen := len(commands)
    minLens := make([]int, clen)
    for i := 0; i < clen; i++ {
        count := 0
        for _, c := range commands[i] {
            if c >= 'A' && c <= 'Z' {
                count++
            }
        }
        minLens[i] = count
    }
    sentence :=  ""riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin""
    words := strings.Fields(sentence)
    results := validate(commands, words, minLens)
    fmt.Print(""user words:  "")
    for j := 0; j < len(words); j++ {
        fmt.Printf(""%-*s "", len(results[j]), words[j])
    }
    fmt.Print(""\nfull words:  "")
    fmt.Println(strings.Join(results, "" ""))
}"
2vilz_4_2,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,java,T4,Different Language,"import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class AbbreviationsEasy {
    private static final Scanner input = new Scanner(System.in);
    private static final String  COMMAND_TABLE
            =       ""  Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress COpy\n"" +
                    "" COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find\n"" +
                    "" NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput\n"" +
                    "" Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO\n"" +
                    "" MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT\n"" +
                    "" READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT\n"" +
                    "" RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus TOP TRAnsfer Type Up"";

    public static void main(String[] args) {
        String[]             cmdTableArr = COMMAND_TABLE.split(""\\s+"");
        Map<String, Integer> cmd_table   = new HashMap<String, Integer>();

        for (String word : cmdTableArr) {"
2vilz_4_2,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,javascript,T4,Different Language,"var abr=`Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress COpy
   COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find
   NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput
   Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO
   MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT
   READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT
   RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer Type Up`
   .split(/\W+/).map(_=>_.trim())
function escapeRegex(string) {
    return string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
var input = prompt();
console.log(input.length==0?null:input.trim().split(/\s+/)
            .map(
              (s=>abr.filter(
                a=>(new RegExp('^'+escapeRegex(s),'i'))
                  .test(a)&&s.length>=a.match(/^[A-Z]+/)[0].length
				  )[0])
				)
            .map(_=>typeof _==""undefined""?""*error*"":_).join(' ')
			)"
2vilz_4_2,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,php,T4,Different Language,"$commands = 'Add ALTer  BAckup Bottom  CAppend Change SCHANGE  CInsert CLAst COMPress COpy
   COUnt COVerlay CURsor DELete CDelete Down DUPlicate Xedit EXPand EXTract Find
   NFind NFINDUp NFUp CFind FINdup FUp FOrward GET Help HEXType Input POWerinput
   Join SPlit SPLTJOIN  LOAD  Locate CLocate  LOWercase UPPercase  LPrefix MACRO
   MErge MODify MOve MSG Next Overlay PARSE PREServe PURge PUT PUTD  Query  QUIT
   READ  RECover REFRESH RENum REPeat  Replace CReplace  RESet  RESTore  RGTLEFT
   RIght LEft  SAVE  SET SHift SI  SORT  SOS  STAck STATus  TOP TRAnsfer Type Up';

$input = 'riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin';
$expect = 'RIGHT REPEAT *error* PUT MOVE RESTORE *error* *error* *error* POWERINPUT';
$table = makeCommandTable($commands);
$table_keys = array_keys($table);

$inputTable = processInput($input);

foreach ($inputTable as $word) {
    $rs = searchCommandTable($word, $table);
    if ($rs) {
        $output[] = $rs;
    } else {
        $output[] = '*error*';
    }

}
echo 'Input: '. $input. PHP_EOL;
echo 'Output: '. implode(' ', $output). PHP_EOL;

function searchCommandTable($search, $table) {
    foreach ($table as $key => $value) {
        if ((strtoupper(substr($value['word'], 0, strlen($search))) === strtoupper($search)) && (strlen($search) >= $value['min_length'])) {
            return $key;
        }
    }
    return false;
}

function processInput($input) {
    $input = preg_replace('!\s+!', ' ', $input);
    $pieces = explode(' ', trim($input));
    return $pieces;
}

function makeCommandTable($commands) {
    $commands = preg_replace('!\s+!', ' ', $commands);
    $pieces = explode(' ', trim($commands));
    foreach ($pieces as $word) {
        $rs[strtoupper($word)] = ['word'=>$word, 'min_length' => preg_match_all(, $word)];
    }
    return $rs;
}"
2vilz_4_2,2vilz,"Abbreviations, easy",Programming Concepts,Text Processing,ruby,T4,Different Language,"cmd_table = File.read(ARGV[0]).split
user_str = File.read(ARGV[1]).split

user_str.each do |abbr|
  candidate = cmd_table.find do |cmd|
    cmd.count('A-Z') <= abbr.length && abbr.casecmp(cmd[0...abbr.length]).zero?
  end

  print candidate.nil?? '*error*': candidate.upcase

  print ' '
end

puts"
oik81_1_1,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T1,Identical Clone,"command_table_text = 

user_words = 


def find_abbreviations_length(command_table_text):
    
    command_table = dict()
    input_iter = iter(command_table_text.split())

    word = None
    try:
        while True:
            if word is None:
                word = next(input_iter)
            abbr_len = next(input_iter, len(word))
            try:
                command_table[word] = int(abbr_len)
                word = None
            except ValueError:
                command_table[word] = len(word)
                word = abbr_len
    except StopIteration:
        pass
    return command_table


def find_abbreviations(command_table):
    
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations


def parse_user_string(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, ) for user_word in user_words]
    return .join(commands)


command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
oik81_1_2,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T1,Different Whitespaces,"command_table_text =

user_words =

def find_abbreviations_length(command_table_text):
 command_table = dict()
 input_iter = iter(command_table_text.split())
 word = None
 try:
  while True:
   if word is None:
    word = next(input_iter)
   abbr_len = next(input_iter, len(word))
   try:
    command_table[word] = int(abbr_len)
    word = None
   except ValueError:
    command_table[word] = len(word)
    word = abbr_len
 except StopIteration:
  pass
 return command_table

def find_abbreviations(command_table):
 abbreviations = dict()
 for command, min_abbr_len in command_table.items():
  for l in range(min_abbr_len, len(command)+1):
   abbr = command[:l].lower()
   abbreviations[abbr] = command.upper()
 return abbreviations

def parse_user_string(user_string, abbreviations):
 user_words = [word.lower() for word in user_string.split()]
 commands = [abbreviations.get(user_word, ) for user_word in user_words]
 return .join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)
full_words = parse_user_string(user_words, abbreviations_table)
print(, user_words)
print(, full_words)"
oik81_1_3,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T1,Different Comments,"command_table_text = 

user_words = 


def find_abbreviations_length(command_table_text):
    
    command_table = dict()
    input_iter = iter(command_table_text.split())

    word = None
    try:
        while True:
            if word is None:
                word = next(input_iter)
            abbr_len = next(input_iter, len(word))
            try:
                command_table[word] = int(abbr_len)
                word = None
            except ValueError:
                command_table[word] = len(word)
                word = abbr_len
    except StopIteration:
        pass
    return command_table


def find_abbreviations(command_table):
    
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations


def parse_user_string(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, ) for user_word in user_words]
    return '.'.join(commands)


command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(user_words)
print(full_words)"
oik81_1_4,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T1,Different Formatting,"command_table_text = user_words = def find_abbreviations_length(command_table_text): command_table = dict() input_iter = iter(command_table_text.split()) word = None try: while True: if word is None: word = next(input_iter) abbr_len = next(input_iter, len(word)) try: command_table[word] = int(abbr_len) word = None except ValueError: command_table[word] = len(word) word = abbr_len except StopIteration: pass return command_table def find_abbreviations(command_table): abbreviations = dict() for command, min_abbr_len in command_table.items(): for l in range(min_abbr_len, len(command)+1): abbr = command[:l].lower() abbreviations[abbr] = command.upper() return abbreviations def parse_user_string(user_string, abbreviations): user_words = [word.lower() for word in user_string.split()] commands = [abbreviations.get(user_word,) for user_word in user_words] return .join(commands) command_table = find_abbreviations_length(command_table_text) abbreviations_table = find_abbreviations(command_table) full_words = parse_user_string(user_words, abbreviations_table) print(, user_words) print(, full_words)"
oik81_2_1,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T2,Different Variable Names,"command_string = 

input_phrases = 


def extract_abbreviation_length(command_string):
    
    command_map = dict()
    phrase_iter = iter(command_string.split())

    current_word = None
    try:
        while True:
            if current_word is None:
                current_word = next(phrase_iter)
            abbreviation_length = next(phrase_iter, len(current_word))
            try:
                command_map[current_word] = int(abbreviation_length)
                current_word = None
            except ValueError:
                command_map[current_word] = len(current_word)
                current_word = abbreviation_length
    except StopIteration:
        pass
    return command_map


def extract_abbreviations(command_map):
    
    abbreviation_map = dict()
    for cmd, min_abbr_length in command_map.items():
        for length in range(min_abbr_length, len(cmd)+1):
            abbreviation = cmd[:length].lower()
            abbreviation_map[abbreviation] = cmd.upper()
    return abbreviation_map


def decode_user_input(user_input, abbreviation_map):
    input_phrases = [word.lower() for word in user_input.split()]
    full_commands = [abbreviation_map.get(input_word, ) for input_word in input_phrases]
    return .join(full_commands)


command_dictionary = extract_abbreviation_length(command_string)
abbreviation_dict = extract_abbreviations(command_dictionary)

complete_words = decode_user_input(input_phrases, abbreviation_dict)

print(, input_phrases)
print(, complete_words)"
oik81_2_2,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T2,Different Data Types,"command_table_text = """" 

user_words = """" 

def find_abbreviations_length(command_table_text: str) -> dict: 
    command_table = {} 
    input_iter = iter(command_table_text.split()) 

    word = None 
    try: 
        while True: 
            if word is None: 
                word = next(input_iter) 
            abbr_len = next(input_iter, len(word)) 
            try: 
                command_table[word] = int(abbr_len) 
                word = None 
            except ValueError: 
                command_table[word] = len(word) 
                word = abbr_len 
    except StopIteration: 
        pass 
    return command_table 

def find_abbreviations(command_table: dict) -> dict: 
    abbreviations = {} 
    for command, min_abbr_len in command_table.items(): 
        for l in range(min_abbr_len, len(command)+1): 
            abbr = command[:l].lower() 
            abbreviations[abbr] = command.upper() 
    return abbreviations 

def parse_user_string(user_string: str, abbreviations: dict) -> str: 
    user_words = [word.lower() for word in user_string.split()] 
    commands = [abbreviations.get(user_word, """") for user_word in user_words] 
    return """".join(commands) 

command_table = find_abbreviations_length(command_table_text) 
abbreviations_table = find_abbreviations(command_table) 

full_words = parse_user_string(user_words, abbreviations_table) 

print("""", user_words) 
print("""", full_words)"
oik81_2_3,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T2,Different Function Names,"command_table_text = 

user_words = 

def get_abbreviation_lengths(command_table_text):
    
    command_table = dict()
    input_iter = iter(command_table_text.split())

    word = None
    try:
        while True:
            if word is None:
                word = next(input_iter)
            abbr_len = next(input_iter, len(word))
            try:
                command_table[word] = int(abbr_len)
                word = None
            except ValueError:
                command_table[word] = len(word)
                word = abbr_len
    except StopIteration:
        pass
    return command_table


def create_abbreviation_map(command_table):
    
    abbreviations = dict()
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command)+1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations


def analyze_user_input(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, ) for user_word in user_words]
    return .join(commands)


command_table = get_abbreviation_lengths(command_table_text)
abbreviations_table = create_abbreviation_map(command_table)

full_words = analyze_user_input(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
oik81_3_1,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T3,Added Statements,"command_table_text = 

user_words = 


def find_abbreviations_length(command_table_text):
    command_table = {}
    input_iter = iter(command_table_text.split())
    word = None
    try:
        while True:
            if word is None:
                word = next(input_iter)
            abbr_len = next(input_iter, len(word))
            try:
                command_table[word] = int(abbr_len)
                word = None
            except ValueError:
                command_table[word] = len(word)
                word = abbr_len
    except StopIteration:
        pass
    return command_table


def find_abbreviations(command_table):
    abbreviations = {}
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command) + 1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations


def parse_user_string(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = [abbreviations.get(user_word, '') for user_word in user_words]
    return ''.join(commands)


command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(user_words)
print(full_words)"
oik81_3_2,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T3,Removed Statements,"command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(user_words)
print(full_words)"
oik81_3_3,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T3,Reordered Statements,"command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

user_words = [word.lower() for word in user_string.split()]
full_words = parse_user_string(user_words, abbreviations_table)

print(, user_words)
print(, full_words)"
oik81_3_4,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T3,Control Flow Modifications,"command_table_text = 

user_words = 

def find_abbreviations_length(command_table_text):
    command_table = {}
    input_iter = iter(command_table_text.split())

    word = None
    while True:
        try:
            word = next(input_iter)
            abbr_len = next(input_iter, len(word))
            try:
                command_table[word] = int(abbr_len)
            except ValueError:
                command_table[word] = len(word)
                word = abbr_len
        except StopIteration:
            break
    return command_table

def find_abbreviations(command_table):
    abbreviations = {}
    for command, min_abbr_len in command_table.items():
        for l in range(min_abbr_len, len(command) + 1):
            abbr = command[:l].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations

def parse_user_string(user_string, abbreviations):
    user_words = [word.lower() for word in user_string.split()]
    commands = []
    for user_word in user_words:
        commands.append(abbreviations.get(user_word))
    return ''.join(commands)

command_table = find_abbreviations_length(command_table_text)
abbreviations_table = find_abbreviations(command_table)

full_words = parse_user_string(user_words, abbreviations_table)

print(user_words)
print(full_words)"
oik81_4_1,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,python,T4,Same Language,"command_table_text = 

user_words = 

def create_command_table(command_table_text):
    command_table = {}
    input_iter = iter(command_table_text.split())
    word = None
    while True:
        try:
            if word is None:
                word = next(input_iter)
            abbr_len = next(input_iter, len(word))
            command_table[word] = int(abbr_len) if abbr_len.isdigit() else len(word)
            word = None if abbr_len.isdigit() else abbr_len
        except StopIteration:
            break
    return command_table

def create_abbreviations(command_table):
    abbreviations = {}
    for command, min_abbr_len in command_table.items():
        for length in range(min_abbr_len, len(command)+1):
            abbr = command[:length].lower()
            abbreviations[abbr] = command.upper()
    return abbreviations

def transform_user_string(user_string, abbreviations):
    user_words = user_string.lower().split()
    commands = [abbreviations.get(word) for word in user_words]
    return ' '.join(commands)

command_table = create_command_table(command_table_text)
abbreviations_table = create_abbreviations(command_table)

full_words = transform_user_string(user_words, abbreviations_table)

print(user_words)
print(full_words)"
oik81_4_2,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,go,T4,Different Language,"package main

import (
	""io""
	""os""
	""strconv""
	""strings""
	""text/tabwriter""
)

func readTable(table string) ([]string, []int) {
	fields := strings.Fields(table)
	var commands []string
	var minLens []int

	for i, max := 0, len(fields); i < max; {
		cmd := fields[i]
		cmdLen := len(cmd)
		i++

		if i < max {
			num, err := strconv.Atoi(fields[i])
			if err == nil && 1 <= num && num < cmdLen {
				cmdLen = num
				i++
			}
		}

		commands = append(commands, cmd)
		minLens = append(minLens, cmdLen)
	}

	return commands, minLens
}

func validateCommands(commands []string, minLens []int, words []string) []string {
	var results []string
	for _, word := range words {
		matchFound := false
		wlen := len(word)
		for i, command := range commands {
			if minLens[i] == 0 || wlen < minLens[i] || wlen > len(command) {
				continue
			}
			c := strings.ToUpper(command)
			w := strings.ToUpper(word)
			if strings.HasPrefix(c, w) {
				results = append(results, c)
				matchFound = true
				break
			}
		}
		if !matchFound {
			results = append(results, ""*error*"")
		}
	}
	return results
}

func printResults(words []string, results []string) {
	wr := tabwriter.NewWriter(os.Stdout, 0, 1, 1, ' ', 0)
	io.WriteString(wr, ""user words:"")
	for _, word := range words {
		io.WriteString(wr, ""\t""+word)
	}
	io.WriteString(wr, ""\n"")
	io.WriteString(wr, ""full words:\t""+strings.Join(results, ""\t"")+""\n"")
	wr.Flush()
}

func main() {
	const table = """" +
		""add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 "" +
		""compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate "" +
		""3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 "" +
		""forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load "" +
		""locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 "" +
		""msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 "" +
		""refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left "" +
		""2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1 ""

	const sentence = ""riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin""

	commands, minLens := readTable(table)
	words := strings.Fields(sentence)

	results := validateCommands(commands, minLens, words)

	printResults(words, results)
}"
oik81_4_2,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,java,T4,Different Language,"import java.util.*;

public class Abbreviations {
    public static void main(String[] args) {
        CommandList commands = new CommandList(commandTable);
        String input = ""riG   rePEAT copies  put mo   rest    types   fup.    6       poweRin"";
        System.out.println("" input: "" + input);
        System.out.println(""output: "" + test(commands, input));
    }

    private static String test(CommandList commands, String input) {
        StringBuilder output = new StringBuilder();
        Scanner scanner = new Scanner(input);
        while (scanner.hasNext()) {
            String word = scanner.next();
            if (output.length() > 0)
                output.append(' ');
            Command cmd = commands.findCommand(word);
            if (cmd != null)
                output.append(cmd.cmd);
            else
                output.append(""*error*"");
        }
        return output.toString();
    }

    private static String commandTable =
        ""add 1  alter 3  backup 2  bottom 1  Cappend 2  change 1  Schange  Cinsert 2  Clast 3 "" +
        ""compress 4 copy 2 count 3 Coverlay 3 cursor 3  delete 3 Cdelete 2  down 1  duplicate "" +
        ""3 xEdit 1 expand 3 extract 3  find 1 Nfind 2 Nfindup 6 NfUP 3 Cfind 2 findUP 3 fUP 2 "" +
        ""forward 2  get  help 1 hexType 4  input 1 powerInput 3  join 1 split 2 spltJOIN load "" +
        ""locate 1 Clocate 2 lowerCase 3 upperCase 3 Lprefix 2  macro  merge 2 modify 3 move 2 "" +
        ""msg  next 1 overlay 1 parse preserve 4 purge 3 put putD query 1 quit  read recover 3 "" +
        ""refresh renum 3 repeat 3 replace 1 Creplace 2 reset 3 restore 4 rgtLEFT right 2 left "" +
        ""2  save  set  shift 2  si  sort  sos  stack 3 status 4 top  transfer 3  type 1  up 1"";

    private static class Command {
        private Command(String cmd, int minLength) {
             this.cmd = cmd;
             this.minLength = minLength;
        }
        private boolean match(String str) {
            int olen = str.length();
            return olen >= minLength && olen <= cmd.length()
                && cmd.regionMatches(true, 0, str, 0, olen);
        }
        private String cmd;
        private int minLength;
    }

    private static Integer parseInteger(String word) {
        try {
            return Integer.valueOf(word);
        } catch (NumberFormatException ex) {
            return null;
        }
    }

    private static class CommandList {
        private CommandList(String table) {
            Scanner scanner = new Scanner(table);
            List<String> words = new ArrayList<>();
            while (scanner.hasNext()) {
                String word = scanner.next();
                words.add(word.toUpperCase());
            }
            for (int i = 0, n = words.size(); i < n; ++i) {
                String word = words.get(i);"
oik81_4_2,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,javascript,T4,Different Language,"(() => {
    'use strict';"
oik81_4_2,oik81,"Abbreviations, simple",Programming Concepts,Text Processing,ruby,T4,Different Language,"str = 

RE = /(?<word1>[a-zA-Z]+)\s+(?<word2>[a-zA-Z]+)/
str = str.upcase

2.times{ str.gsub!(RE){ [  $~[:word1], $~[:word1].size, $~[:word2] ].join()} }

table = Hash[*str.split].transform_values(&:to_i)

test =  
ar = test.split.map do |w|
  (res = table.detect{|k,v| k.start_with?(w.upcase) && w.size >= v})? res[0]: 
end

puts ar.join()"
08hsq_1_1,08hsq,Abelian sandpile model,Mathematics,Automata,python,T1,Identical Clone,"import numpy as np
import matplotlib.pyplot as plt


def iterate(grid):
    changed = False
    for ii, arr in enumerate(grid):
        for jj, val in enumerate(arr):
            if val > 3:
                grid[ii, jj] -= 4
                if ii > 0:
                    grid[ii - 1, jj] += 1
                if ii < len(grid)-1:
                    grid[ii + 1, jj] += 1
                if jj > 0:
                    grid[ii, jj - 1] += 1
                if jj < len(grid)-1:
                    grid[ii, jj + 1] += 1
                changed = True
    return grid, changed


def simulate(grid):
    while True:
        grid, changed = iterate(grid)
        if not changed:
            return grid


if __name__ == '__main__':
    start_grid = np.zeros((10, 10))
    start_grid[4:5, 4:5] = 64
    final_grid = simulate(start_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(start_grid)
    plt.figure()
    plt.gray()
    plt.imshow(final_grid)"
08hsq_1_2,08hsq,Abelian sandpile model,Mathematics,Automata,python,T1,Different Whitespaces,"import numpy as np
import matplotlib.pyplot as plt
def iterate(grid):
 changed=False
 for ii,arr in enumerate(grid):
  for jj,val in enumerate(arr):
   if val>3:
    grid[ii,jj]-=4
    if ii>0:
     grid[ii-1,jj]+=1
    if ii<len(grid)-1:
     grid[ii+1,jj]+=1
    if jj>0:
     grid[ii,jj-1]+=1
    if jj<len(grid)-1:
     grid[ii,jj+1]+=1
    changed=True
 return grid,changed
def simulate(grid):
 while True:
  grid,changed=iterate(grid)
  if not changed:
   return grid
if __name__=='__main__':
 start_grid=np.zeros((10,10))
 start_grid[4:5,4:5]=64
 final_grid=simulate(start_grid.copy())
 plt.figure()
 plt.gray()
 plt.imshow(start_grid)
 plt.figure()
 plt.gray()
 plt.imshow(final_grid)"
08hsq_1_3,08hsq,Abelian sandpile model,Mathematics,Automata,python,T1,Different Comments,"import numpy as np
import matplotlib.pyplot as plt


def iterate(grid):
    modified = False
    for ii, arr in enumerate(grid):
        for jj, val in enumerate(arr):
            if val > 3:
                grid[ii, jj] -= 4
                if ii > 0:
                    grid[ii - 1, jj] += 1
                if ii < len(grid)-1:
                    grid[ii + 1, jj] += 1
                if jj > 0:
                    grid[ii, jj - 1] += 1
                if jj < len(grid)-1:
                    grid[ii, jj + 1] += 1
                modified = True
    return grid, modified


def simulate(grid):
    while True:
        grid, modified = iterate(grid)
        if not modified:
            return grid


if __name__ == '__main__':
    initial_grid = np.zeros((10, 10))
    initial_grid[4:5, 4:5] = 64
    resulting_grid = simulate(initial_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(initial_grid)
    plt.figure()
    plt.gray()
    plt.imshow(resulting_grid)"
08hsq_1_4,08hsq,Abelian sandpile model,Mathematics,Automata,python,T1,Different Formatting,"import numpy as np
import matplotlib.pyplot as plt


def iterate(grid):
    changed = False
    for ii, arr in enumerate(grid):
        for jj, val in enumerate(arr):
            if val > 3:
                grid[ii, jj] -= 4
                if ii > 0:
                    grid[ii - 1, jj] += 1
                if ii < len(grid) - 1:
                    grid[ii + 1, jj] += 1
                if jj > 0:
                    grid[ii, jj - 1] += 1
                if jj < len(grid) - 1:
                    grid[ii, jj + 1] += 1
                changed = True
    return grid, changed


def simulate(grid):
    while True:
        grid, changed = iterate(grid)
        if not changed:
            return grid


if __name__ == '__main__':
    start_grid = np.zeros((10, 10))
    start_grid[4:5, 4:5] = 64
    final_grid = simulate(start_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(start_grid)
    plt.figure()
    plt.gray()
    plt.imshow(final_grid)"
08hsq_2_1,08hsq,Abelian sandpile model,Mathematics,Automata,python,T2,Different Variable Names,"import numpy as np
import matplotlib.pyplot as plt


def process(matrix):
    modified = False
    for x, row in enumerate(matrix):
        for y, cell in enumerate(row):
            if cell > 3:
                matrix[x, y] -= 4
                if x > 0:
                    matrix[x - 1, y] += 1
                if x < len(matrix) - 1:
                    matrix[x + 1, y] += 1
                if y > 0:
                    matrix[x, y - 1] += 1
                if y < len(matrix) - 1:
                    matrix[x, y + 1] += 1
                modified = True
    return matrix, modified


def run_simulation(matrix):
    while True:
        matrix, modified = process(matrix)
        if not modified:
            return matrix


if __name__ == '__main__':
    initial_matrix = np.zeros((10, 10))
    initial_matrix[4:5, 4:5] = 64
    result_matrix = run_simulation(initial_matrix.copy())
    plt.figure()
    plt.gray()
    plt.imshow(initial_matrix)
    plt.figure()
    plt.gray()
    plt.imshow(result_matrix)"
08hsq_2_2,08hsq,Abelian sandpile model,Mathematics,Automata,python,T2,Different Data Types,"import numpy as np
import matplotlib.pyplot as plt


def iterate(grid: np.ndarray) -> tuple:
    changed = False
    for ii, arr in enumerate(grid):
        for jj, val in enumerate(arr):
            if val > 3:
                grid[ii, jj] = val - 4
                if ii > 0:
                    grid[ii - 1, jj] += 1
                if ii < len(grid) - 1:
                    grid[ii + 1, jj] += 1
                if jj > 0:
                    grid[ii, jj - 1] += 1
                if jj < len(grid) - 1:
                    grid[ii, jj + 1] += 1
                changed = True
    return grid, changed


def simulate(grid: np.ndarray) -> np.ndarray:
    while True:
        grid, changed = iterate(grid)
        if not changed:
            return grid


if __name__ == '__main__':
    start_grid = np.zeros((10, 10), dtype=int)
    start_grid[4:5, 4:5] = 64
    final_grid = simulate(start_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(start_grid, cmap='gray')
    plt.figure()
    plt.gray()
    plt.imshow(final_grid, cmap='gray')"
08hsq_2_3,08hsq,Abelian sandpile model,Mathematics,Automata,python,T2,Different Function Names,"import numpy as np
import matplotlib.pyplot as plt


def process_grid(grid):
    changed = False
    for ii, arr in enumerate(grid):
        for jj, val in enumerate(arr):
            if val > 3:
                grid[ii, jj] -= 4
                if ii > 0:
                    grid[ii - 1, jj] += 1
                if ii < len(grid)-1:
                    grid[ii + 1, jj] += 1
                if jj > 0:
                    grid[ii, jj - 1] += 1
                if jj < len(grid)-1:
                    grid[ii, jj + 1] += 1
                changed = True
    return grid, changed


def run_simulation(grid):
    while True:
        grid, changed = process_grid(grid)
        if not changed:
            return grid


if __name__ == '__main__':
    start_grid = np.zeros((10, 10))
    start_grid[4:5, 4:5] = 64
    final_grid = run_simulation(start_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(start_grid)
    plt.figure()
    plt.gray()
    plt.imshow(final_grid)"
08hsq_3_1,08hsq,Abelian sandpile model,Mathematics,Automata,python,T3,Added Statements,"import numpy as np
import matplotlib.pyplot as plt


def iterate(grid):
    changed = False
    for ii in range(grid.shape[0]):
        for jj in range(grid.shape[1]):
            if grid[ii, jj] > 3:
                grid[ii, jj] -= 4
                if ii > 0:
                    grid[ii - 1, jj] += 1
                if ii < grid.shape[0] - 1:
                    grid[ii + 1, jj] += 1
                if jj > 0:
                    grid[ii, jj - 1] += 1
                if jj < grid.shape[1] - 1:
                    grid[ii, jj + 1] += 1
                changed = True
    return grid, changed


def simulate(grid):
    while True:
        grid, changed = iterate(grid)
        if not changed:
            break
    return grid


if __name__ == '__main__':
    start_grid = np.zeros((10, 10))
    start_grid[4, 4] = 64
    final_grid = simulate(start_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(start_grid, cmap='gray')
    plt.figure()
    plt.gray()
    plt.imshow(final_grid, cmap='gray')"
08hsq_3_2,08hsq,Abelian sandpile model,Mathematics,Automata,python,T3,Removed Statements,"import numpy as np
import matplotlib.pyplot as plt


def iterate(grid):
    changed = False
    for ii, arr in enumerate(grid):
        for jj, val in enumerate(arr):
            if val > 3:
                grid[ii, jj] -= 4
                if ii > 0: grid[ii - 1, jj] += 1
                if ii < len(grid)-1: grid[ii + 1, jj] += 1
                if jj > 0: grid[ii, jj - 1] += 1
                if jj < len(grid)-1: grid[ii, jj + 1] += 1
                changed = True
    return grid, changed


def simulate(grid):
    while True:
        grid, changed = iterate(grid)
        if not changed: return grid


if __name__ == '__main__':
    start_grid = np.zeros((10, 10))
    start_grid[4, 4] = 64
    final_grid = simulate(start_grid.copy())
    plt.imshow(start_grid, cmap='gray')
    plt.imshow(final_grid, cmap='gray')"
08hsq_3_3,08hsq,Abelian sandpile model,Mathematics,Automata,python,T3,Reordered Statements,"import numpy as np
import matplotlib.pyplot as plt


def iterate(grid):
    changed = False
    for ii, arr in enumerate(grid):
        for jj, val in enumerate(arr):
            if val > 3:
                grid[ii, jj] -= 4
                if jj < len(grid)-1:
                    grid[ii, jj + 1] += 1
                if jj > 0:
                    grid[ii, jj - 1] += 1
                if ii < len(grid)-1:
                    grid[ii + 1, jj] += 1
                if ii > 0:
                    grid[ii - 1, jj] += 1
                changed = True
    return grid, changed


def simulate(grid):
    while True:
        grid, changed = iterate(grid)
        if not changed:
            return grid


if __name__ == '__main__':
    start_grid = np.zeros((10, 10))
    start_grid[4:5, 4:5] = 64
    final_grid = simulate(start_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(final_grid)
    plt.figure()
    plt.gray()
    plt.imshow(start_grid)"
08hsq_3_4,08hsq,Abelian sandpile model,Mathematics,Automata,python,T3,Control Flow Modifications,"import numpy as np
import matplotlib.pyplot as plt


def iterate(grid):
    changed = False
    for ii in range(grid.shape[0]):
        for jj in range(grid.shape[1]):
            if grid[ii, jj] > 3:
                grid[ii, jj] -= 4
                directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]
                for di, dj in directions:
                    ni, nj = ii + di, jj + dj
                    if 0 <= ni < grid.shape[0] and 0 <= nj < grid.shape[1]:
                        grid[ni, nj] += 1
                changed = True
    return grid, changed


def simulate(grid):
    while True:
        grid, changed = iterate(grid)
        if changed == False:
            break
    return grid


if __name__ == '__main__':
    start_grid = np.zeros((10, 10))
    start_grid[4, 4] = 64
    final_grid = simulate(start_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(start_grid)
    plt.figure()
    plt.gray()
    plt.imshow(final_grid)"
08hsq_4_1,08hsq,Abelian sandpile model,Mathematics,Automata,python,T4,Same Language,"import numpy as np
import matplotlib.pyplot as plt

def process_cell(grid, i, j):
    grid[i, j] -= 4
    if i > 0:
        grid[i - 1, j] += 1
    if i < grid.shape[0] - 1:
        grid[i + 1, j] += 1
    if j > 0:
        grid[i, j - 1] += 1
    if j < grid.shape[1] - 1:
        grid[i, j + 1] += 1

def iterate(grid):
    changed = False
    for i in range(grid.shape[0]):
        for j in range(grid.shape[1]):
            if grid[i, j] > 3:
                process_cell(grid, i, j)
                changed = True
    return grid, changed

def simulate(grid):
    while True:
        grid, changed = iterate(grid)
        if not changed:
            break
    return grid

if __name__ == '__main__':
    initial_grid = np.zeros((10, 10))
    initial_grid[4:5, 4:5] = 64
    result_grid = simulate(initial_grid.copy())
    plt.figure()
    plt.gray()
    plt.imshow(initial_grid)
    plt.figure()
    plt.gray()
    plt.imshow(result_grid)"
08hsq_4_2,08hsq,Abelian sandpile model,Mathematics,Automata,go,T4,Different Language,"package main

import (
    ""fmt""
    ""log""
    ""os""
    ""strings""
)

const dim = 16"
08hsq_4_2,08hsq,Abelian sandpile model,Mathematics,Automata,java,T4,Different Language,"import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class AbelianSandpile {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                Frame frame = new Frame();
                frame.setVisible(true);
            }
        });
    }

    private static class Frame extends JFrame {
        private Frame() {
            super(""Abelian Sandpile Model"");
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            Container contentPane = getContentPane();
            JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
            JButton start = new JButton(""Restart Simulation"");
            start.addActionListener(e -> restartSimulation());
            JButton stop = new JButton(""Stop Simulation"");
            stop.addActionListener(e -> stopSimulation());
            controlPanel.add(start);
            controlPanel.add(stop);
            contentPane.add(controlPanel, BorderLayout.NORTH);
            contentPane.add(canvas = new Canvas(), BorderLayout.CENTER);
            timer = new Timer(100, e -> canvas.runAndDraw());
            timer.start();
            pack();
        }

        private void restartSimulation() {
            timer.stop();
            canvas.initGrid();
            timer.start();
        }

        private void stopSimulation() {
            timer.stop();
        }

        private Timer timer;
        private Canvas canvas;
    }

    private static class Canvas extends JComponent {
        private Canvas() {
            setBorder(BorderFactory.createEtchedBorder());
            setPreferredSize(new Dimension(600, 600));
        }

        public void paintComponent(Graphics g) {
            int width = getWidth();
            int height = getHeight();
            g.setColor(Color.WHITE);
            g.fillRect(0, 0, width, height);
            int cellWidth = width/GRID_LENGTH;
            int cellHeight = height/GRID_LENGTH;
            for (int i = 0; i < GRID_LENGTH; ++i) {
                for (int j = 0; j < GRID_LENGTH; ++j) {
                    if (grid[i][j] > 0) {
                        g.setColor(COLORS[grid[i][j]]);
                        g.fillRect(i * cellWidth, j * cellHeight, cellWidth, cellHeight);
                    }
                }
            }
        }

        private void initGrid() {
            for (int i = 0; i < GRID_LENGTH; ++i) {
                for (int j = 0; j < GRID_LENGTH; ++j) {
                    grid[i][j] = 0;
                }
            }
        }

        private void runAndDraw() {
            for (int i = 0; i < 100; ++i)
                addSand(GRID_LENGTH/2, GRID_LENGTH/2);
            repaint();
        }

        private void addSand(int i, int j) {
            int grains = grid[i][j];
            if (grains < 3) {
                grid[i][j]++;
            }
            else {
                grid[i][j] = grains - 3;
                if (i > 0)
                    addSand(i - 1, j);
                if (i < GRID_LENGTH - 1)
                    addSand(i + 1, j);
                if (j > 0)
                    addSand(i, j - 1);
                if (j < GRID_LENGTH - 1)
                    addSand(i, j + 1);
            }
        }

        private int[][] grid = new int[GRID_LENGTH][GRID_LENGTH];
    }

    private static final Color[] COLORS = {
        Color.WHITE,
        new Color(0x00, 0xbf, 0xff),
        new Color(0xff, 0xd7, 0x00),
        new Color(0xb0, 0x30, 0x60)
    };
    private static final int GRID_LENGTH = 300;
}"
7jzrm_1_1,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T1,Identical Clone,"from itertools import product
from collections import defaultdict


class Sandpile():
    def __init__(self, gridtext):
        array = [int(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(int,
                                {(i 
                                 for i, x in enumerate(array)})

    _border = set((r, c) 
                  for r, c in product(range(-1, 4), repeat=2) 
                  if not 0 <= r <= 2 or not 0 <= c <= 2
                  )
    _cell_coords = list(product(range(3), repeat=2))

    def topple(self):
        g = self.grid
        for r, c in self._cell_coords:
            if g[(r, c)] >= 4:
                g[(r - 1, c)] += 1
                g[(r + 1, c)] += 1
                g[(r, c - 1)] += 1
                g[(r, c + 1)] += 1
                g[(r, c)] -= 4
                return True
        return False

    def stabilise(self):
        while self.topple():
            pass
        
        g = self.grid
        for row_col in self._border.intersection(g.keys()):
            del g[row_col]
        return self

    __pos__ = stabilise     

    def __eq__(self, other):
        g = self.grid
        return all(g[row_col] == other.grid[row_col]
                   for row_col in self._cell_coords)

    def __add__(self, other):
        g = self.grid
        ans = Sandpile()
        for row_col in self._cell_coords:
            ans.grid[row_col] = g[row_col] + other.grid[row_col]
        return ans.stabilise()

    def __str__(self):
        g, txt = self.grid, []
        for row in range(3):
            txt.append(' '.join(str(g[(row, col)]) 
                                for col in range(3)))
        return '\n'.join(txt)

    def __repr__(self):
        return f'{self.__class__.__name__}()'


unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_1_2,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T1,Different Whitespaces,"from itertools import product
from collections import defaultdict

class Sandpile():
 __init__ = lambda self, gridtext: setattr(self, 'grid', defaultdict(int, {(i: int(x) for i, x in enumerate([int(x) for x in gridtext.strip().split()])})))
 _border = set((r, c) for r, c in product(range(-1, 4), repeat=2) if not 0 <= r <= 2 or not 0 <= c <= 2)
 _cell_coords = list(product(range(3), repeat=2))

 def topple(self):
  g = self.grid
  for r, c in self._cell_coords:
   if g[(r, c)] >= 4:
    g[(r - 1, c)] += 1
    g[(r + 1, c)] += 1
    g[(r, c - 1)] += 1
    g[(r, c + 1)] += 1
    g[(r, c)] -= 4
    return True
  return False

 def stabilise(self):
  while self.topple():
   pass
  g = self.grid
  for row_col in self._border.intersection(g.keys()):
   del g[row_col]
  return self

 __pos__ = stabilise     

 def __eq__(self, other):
  g = self.grid
  return all(g[row_col] == other.grid[row_col] for row_col in self._cell_coords)

 def __add__(self, other):
  g = self.grid
  ans = Sandpile()
  for row_col in self._cell_coords:
   ans.grid[row_col] = g[row_col] + other.grid[row_col]
  return ans.stabilise()

 def __str__(self):
  g, txt = self.grid, []
  for row in range(3):
   txt.append(' '.join(str(g[(row, col)]) for col in range(3)))
  return '\n'.join(txt)

 def __repr__(self):
  return f'{self.__class__.__name__}()'

unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_1_3,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T1,Different Comments,"from itertools import product
from collections import defaultdict


class Sandpile():
    def __init__(self, gridtext):
        array = [int(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(int,
                                {(i 
                                 for i, x in enumerate(array)})

    _border = set((r, c) 
                  for r, c in product(range(-1, 4), repeat=2) 
                  if not 0 <= r <= 2 or not 0 <= c <= 2
                  )
    _cell_coords = list(product(range(3), repeat=2))

    def topple(self):
        g = self.grid
        for r, c in self._cell_coords:
            if g[(r, c)] >= 4:
                g[(r - 1, c)] += 1
                g[(r + 1, c)] += 1
                g[(r, c - 1)] += 1
                g[(r, c + 1)] += 1
                g[(r, c)] -= 4
                return True
        return False

    def stabilise(self):
        while self.topple():
            pass
        
        g = self.grid
        for row_col in self._border.intersection(g.keys()):
            del g[row_col]
        return self

    __pos__ = stabilise     

    def __eq__(self, other):
        g = self.grid
        return all(g[row_col] == other.grid[row_col]
                   for row_col in self._cell_coords)

    def __add__(self, other):
        g = self.grid
        ans = Sandpile()
        for row_col in self._cell_coords:
            ans.grid[row_col] = g[row_col] + other.grid[row_col]
        return ans.stabilise()

    def __str__(self):
        g, txt = self.grid, []
        for row in range(3):
            txt.append(' '.join(str(g[(row, col)]) 
                                for col in range(3)))
        return '\n'.join(txt)

    def __repr__(self):
        return f'{self.__class__.__name__}()'


unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_1_4,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T1,Different Formatting,"from itertools import product
from collections import defaultdict

class Sandpile():
    def __init__(self, gridtext):
        array = [int(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(int, {(i for i, x in enumerate(array)})

    _border = set((r, c) for r, c in product(range(-1, 4), repeat=2) if not 0 <= r <= 2 or not 0 <= c <= 2)
    _cell_coords = list(product(range(3), repeat=2))

    def topple(self):
        g = self.grid
        for r, c in self._cell_coords:
            if g[(r, c)] >= 4:
                g[(r - 1, c)] += 1
                g[(r + 1, c)] += 1
                g[(r, c - 1)] += 1
                g[(r, c + 1)] += 1
                g[(r, c)] -= 4
                return True
        return False

    def stabilise(self):
        while self.topple():
            pass
        g = self.grid
        for row_col in self._border.intersection(g.keys()):
            del g[row_col]
        return self

    __pos__ = stabilise

    def __eq__(self, other):
        g = self.grid
        return all(g[row_col] == other.grid[row_col] for row_col in self._cell_coords)

    def __add__(self, other):
        g = self.grid
        ans = Sandpile()
        for row_col in self._cell_coords:
            ans.grid[row_col] = g[row_col] + other.grid[row_col]
        return ans.stabilise()

    def __str__(self):
        g, txt = self.grid, []
        for row in range(3):
            txt.append(' '.join(str(g[(row, col)]) for col in range(3)))
        return '\n'.join(txt)

    def __repr__(self):
        return f'{self.__class__.__name__}()'

unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_2_1,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T2,Different Variable Names,"from itertools import product
from collections import defaultdict


class PileOfSand():
    def __init__(self, input_text):
        values = [int(y) for y in input_text.strip().split()]
        self.structure = defaultdict(int,
                                      {(i 
                                       for i, y in enumerate(values)})

    _edges = set((x, y) 
                  for x, y in product(range(-1, 4), repeat=2) 
                  if not 0 <= x <= 2 or not 0 <= y <= 2
                  )
    _positions = list(product(range(3), repeat=2))

    def cause_topple(self):
        s = self.structure
        for x, y in self._positions:
            if s[(x, y)] >= 4:
                s[(x - 1, y)] += 1
                s[(x + 1, y)] += 1
                s[(x, y - 1)] += 1
                s[(x, y + 1)] += 1
                s[(x, y)] -= 4
                return True
        return False

    def stabilize(self):
        while self.cause_topple():
            pass
        
        s = self.structure
        for pos in self._edges.intersection(s.keys()):
            del s[pos]
        return self

    __pos__ = stabilize     

    def __eq__(self, other):
        s = self.structure
        return all(s[pos] == other.structure[pos]
                   for pos in self._positions)

    def __add__(self, other):
        s = self.structure
        result = PileOfSand()
        for pos in self._positions:
            result.structure[pos] = s[pos] + other.structure[pos]
        return result.stabilize()

    def __str__(self):
        s, output = self.structure, []
        for row in range(3):
            output.append(' '.join(str(s[(row, col)]) 
                                   for col in range(3)))
        return '\n'.join(output)

    def __repr__(self):
        return f'{self.__class__.__name__}()'


unstable_pile = PileOfSand()
pile1 = PileOfSand()
pile2 = PileOfSand()
pile3 = PileOfSand()
pile3_identifier = PileOfSand()"
7jzrm_2_2,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T2,Different Data Types,"from itertools import product
from collections import defaultdict


class Sandpile():
    def __init__(self, gridtext: str):
        array = [float(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(float,
                                {(i: x for i, x in enumerate(array)})

    _border = set((r, c) 
                  for r, c in product(range(-1, 4), repeat=2) 
                  if not 0 <= r <= 2 or not 0 <= c <= 2
                  )
    _cell_coords = list(product(range(3), repeat=2))

    def topple(self) -> bool:
        g = self.grid
        for r, c in self._cell_coords:
            if g[(r, c)] >= 4.0:
                g[(r - 1, c)] += 1.0
                g[(r + 1, c)] += 1.0
                g[(r, c - 1)] += 1.0
                g[(r, c + 1)] += 1.0
                g[(r, c)] -= 4.0
                return True
        return False

    def stabilise(self) -> 'Sandpile':
        while self.topple():
            pass
        
        g = self.grid
        for row_col in self._border.intersection(g.keys()):
            del g[row_col]
        return self

    __pos__ = stabilise     

    def __eq__(self, other: 'Sandpile') -> bool:
        g = self.grid
        return all(g[row_col] == other.grid[row_col]
                   for row_col in self._cell_coords)

    def __add__(self, other: 'Sandpile') -> 'Sandpile':
        g = self.grid
        ans = Sandpile()
        for row_col in self._cell_coords:
            ans.grid[row_col] = g[row_col] + other.grid[row_col]
        return ans.stabilise()

    def __str__(self) -> str:
        g, txt = self.grid, []
        for row in range(3):
            txt.append(' '.join(str(g[(row, col)]) 
                                for col in range(3)))
        return '\n'.join(txt)

    def __repr__(self) -> str:
        return f'{self.__class__.__name__}()'


unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_2_3,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T2,Different Function Names,"from itertools import product
from collections import defaultdict


class PileOfSand():
    def __init__(self, gridtext):
        array = [int(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(int,
                                {(i 
                                 for i, x in enumerate(array)})

    _border = set((r, c) 
                  for r, c in product(range(-1, 4), repeat=2) 
                  if not 0 <= r <= 2 or not 0 <= c <= 2
                  )
    _cell_coords = list(product(range(3), repeat=2))

    def shift(self):
        g = self.grid
        for r, c in self._cell_coords:
            if g[(r, c)] >= 4:
                g[(r - 1, c)] += 1
                g[(r + 1, c)] += 1
                g[(r, c - 1)] += 1
                g[(r, c + 1)] += 1
                g[(r, c)] -= 4
                return True
        return False

    def balance(self):
        while self.shift():
            pass
        
        g = self.grid
        for row_col in self._border.intersection(g.keys()):
            del g[row_col]
        return self

    __pos__ = balance     

    def __eq__(self, other):
        g = self.grid
        return all(g[row_col] == other.grid[row_col]
                   for row_col in self._cell_coords)

    def __add__(self, other):
        g = self.grid
        ans = PileOfSand()
        for row_col in self._cell_coords:
            ans.grid[row_col] = g[row_col] + other.grid[row_col]
        return ans.balance()

    def __str__(self):
        g, txt = self.grid, []
        for row in range(3):
            txt.append(' '.join(str(g[(row, col)]) 
                                for col in range(3)))
        return '\n'.join(txt)

    def __repr__(self):
        return f'{self.__class__.__name__}()'


unstable = PileOfSand()
s1 = PileOfSand()
s2 = PileOfSand()
s3 = PileOfSand()
s3_id = PileOfSand()"
7jzrm_3_1,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T3,Added Statements,"from itertools import product
from collections import defaultdict


class Sandpile():
    def __init__(self, gridtext=''):
        array = [int(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(int,
                                {(i 
                                 for i, x in enumerate(array)})

    _border = set((r, c) 
                  for r, c in product(range(-1, 4), repeat=2) 
                  if not 0 <= r <= 2 or not 0 <= c <= 2
                  )
    _cell_coords = list(product(range(3), repeat=2))

    def topple(self):
        g = self.grid
        for r, c in self._cell_coords:
            if g[(r, c)] >= 4:
                g[(r - 1, c)] += 1
                g[(r + 1, c)] += 1
                g[(r, c - 1)] += 1
                g[(r, c + 1)] += 1
                g[(r, c)] -= 4
                return True
        return False

    def stabilise(self):
        while self.topple():
            pass
        
        g = self.grid
        for row_col in self._border.intersection(g.keys()):
            del g[row_col]
        return self

    __pos__ = stabilise     

    def __eq__(self, other):
        g = self.grid
        return all(g[row_col] == other.grid[row_col]
                   for row_col in self._cell_coords)

    def __add__(self, other):
        g = self.grid
        ans = Sandpile()
        for row_col in self._cell_coords:
            ans.grid[row_col] = g[row_col] + other.grid.get(row_col, 0)
        return ans.stabilise()

    def __str__(self):
        g, txt = self.grid, []
        for row in range(3):
            txt.append(' '.join(str(g[(row, col)]) 
                                for col in range(3)))
        return '\n'.join(txt)

    def __repr__(self):
        return f'{self.__class__.__name__}()'


unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_3_2,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T3,Removed Statements,"from itertools import product
from collections import defaultdict


class Sandpile():
    def __init__(self, gridtext):
        array = [int(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(int, {(i): x for i, x in enumerate(array)})

    _border = set((r, c) for r, c in product(range(-1, 4), repeat=2) if not 0 <= r <= 2 or not 0 <= c <= 2)
    _cell_coords = list(product(range(3), repeat=2))

    def topple(self):
        for r, c in self._cell_coords:
            if self.grid[(r, c)] >= 4:
                self.grid[(r - 1, c)] += 1
                self.grid[(r + 1, c)] += 1
                self.grid[(r, c - 1)] += 1
                self.grid[(r, c + 1)] += 1
                self.grid[(r, c)] -= 4
                return True
        return False

    def stabilise(self):
        while self.topple():
            pass
        for row_col in self._border.intersection(self.grid.keys()):
            del self.grid[row_col]
        return self

    __pos__ = stabilise     

    def __eq__(self, other):
        return all(self.grid[row_col] == other.grid[row_col] for row_col in self._cell_coords)

    def __add__(self, other):
        ans = Sandpile()
        for row_col in self._cell_coords:
            ans.grid[row_col] = self.grid[row_col] + other.grid[row_col]
        return ans.stabilise()

    def __str__(self):
        return '\n'.join(' '.join(str(self.grid[(row, col)]) for col in range(3)) for row in range(3))

    def __repr__(self):
        return f'{self.__class__.__name__}()'


unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_3_3,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T3,Reordered Statements,"from itertools import product
from collections import defaultdict


class Sandpile():
    def __init__(self, gridtext):
        array = [int(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(int,
                                {(i, x) for i, x in enumerate(array)})

    _cell_coords = list(product(range(3), repeat=2))
    _border = set((r, c) 
                  for r, c in product(range(-1, 4), repeat=2) 
                  if not 0 <= r <= 2 or not 0 <= c <= 2
                  )

    def topple(self):
        g = self.grid
        for r, c in self._cell_coords:
            if g[(r, c)] >= 4:
                g[(r - 1, c)] += 1
                g[(r + 1, c)] += 1
                g[(r, c - 1)] += 1
                g[(r, c + 1)] += 1
                g[(r, c)] -= 4
                return True
        return False

    def stabilise(self):
        while self.topple():
            pass
        
        g = self.grid
        for row_col in self._border.intersection(g.keys()):
            del g[row_col]
        return self

    __pos__ = stabilise     

    def __eq__(self, other):
        g = self.grid
        return all(g[row_col] == other.grid[row_col]
                   for row_col in self._cell_coords)

    def __add__(self, other):
        g = self.grid
        ans = Sandpile()
        for row_col in self._cell_coords:
            ans.grid[row_col] = g[row_col] + other.grid[row_col]
        return ans.stabilise()

    def __str__(self):
        g, txt = self.grid, []
        for row in range(3):
            txt.append(' '.join(str(g[(row, col)]) 
                                for col in range(3)))
        return '\n'.join(txt)

    def __repr__(self):
        return f'{self.__class__.__name__}()'


unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_3_4,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T3,Control Flow Modifications,"from itertools import product
from collections import defaultdict


class Sandpile():
    def __init__(self, gridtext=''):
        array = [int(x) for x in gridtext.strip().split()]
        self.grid = defaultdict(int, {(i // 3, i % 3): x for i, x in enumerate(array)})

    _border = {(r, c) 
               for r, c in product(range(-1, 4), repeat=2) 
               if not (0 <= r <= 2 and 0 <= c <= 2)}
    _cell_coords = list(product(range(3), repeat=2))

    def topple(self):
        g = self.grid
        for r, c in self._cell_coords:
            if g[(r, c)] >= 4:
                for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    g[(r + dr, c + dc)] += 1
                g[(r, c)] -= 4
                return True
        return False

    def stabilise(self):
        while True:
            if not self.topple():
                break

        g = self.grid
        for row_col in g.keys():
            if row_col in self._border:
                del g[row_col]
        return self

    __pos__ = stabilise     

    def __eq__(self, other):
        return all(self.grid[row_col] == other.grid[row_col] 
                   for row_col in self._cell_coords)

    def __add__(self, other):
        g = self.grid
        ans = Sandpile()
        for row_col in self._cell_coords:
            ans.grid[row_col] = g[row_col] + other.grid[row_col]
        return ans.stabilise()

    def __str__(self):
        return '\n'.join(' '.join(str(self.grid[(row, col)]) 
                                   for col in range(3)) 
                         for row in range(3))

    def __repr__(self):
        return f'{self.__class__.__name__}()'


unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_4_1,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,python,T4,Same Language,"from itertools import product
from collections import defaultdict

class Sandpile():
    def __init__(self, gridtext=''):
        self.grid = defaultdict(int)
        if gridtext:
            array = map(int, gridtext.strip().split())
            self.grid.update({(i // 3, i % 3): val for i, val in enumerate(array)})

    _border = {(r, c) for r, c in product(range(-1, 4), repeat=2) if not (0 <= r <= 2 and 0 <= c <= 2)}
    _cell_coords = list(product(range(3), repeat=2))

    def topple(self):
        for r, c in self._cell_coords:
            if self.grid[(r, c)] >= 4:
                for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
                    self.grid[(r + dr, c + dc)] += 1
                self.grid[(r, c)] -= 4
                return True
        return False

    def stabilise(self):
        while self.topple():
            pass
        for row_col in self._border.intersection(self.grid.keys()):
            self.grid.pop(row_col)
        return self

    __pos__ = stabilise     

    def __eq__(self, other):
        return all(self.grid[rc] == other.grid[rc] for rc in self._cell_coords)

    def __add__(self, other):
        new_sandpile = Sandpile()
        for rc in self._cell_coords:
            new_sandpile.grid[rc] = self.grid[rc] + other.grid[rc]
        return new_sandpile.stabilise()

    def __str__(self):
        return '\n'.join(' '.join(str(self.grid[(row, col)]) for col in range(3)) for row in range(3))

    def __repr__(self):
        return f'{self.__class__.__name__}()'

unstable = Sandpile()
s1 = Sandpile()
s2 = Sandpile()
s3 = Sandpile()
s3_id = Sandpile()"
7jzrm_4_2,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,go,T4,Different Language,"package main

import (
    ""fmt""
    ""strconv""
    ""strings""
)

type sandpile struct{ a [9]int }

var neighbors = [][]int{
    {1, 3}, {0, 2, 4}, {1, 5}, {0, 4, 6}, {1, 3, 5, 7}, {2, 4, 8}, {3, 7}, {4, 6, 8}, {5, 7},
}"
7jzrm_4_2,7jzrm,Abelian sandpile model/Identity,Mathematics,Automata,ruby,T4,Different Language,"class Sandpile

  def initialize(ar) = @grid = ar

  def to_a = @grid.dup

  def + (other)
    res = self.to_a.zip(other.to_a).map{|row1, row2| row1.zip(row2).map(&:sum) }
    Sandpile.new(res)
  end

  def stable? = @grid.flatten.none?{|v| v > 3}

  def avalanche 
    topple until stable?
    self
  end

  def == (other) = self.avalanche.to_a == other.avalanche.to_a

  def topple
    a = @grid
    a.each_index do |row|
       a[row].each_index do |col|
        next if a[row][col] < 4 
        a[row+1][col] += 1 unless row == a.size-1
        a[row-1][col] += 1 if row > 0
        a[row][col+1] += 1 unless col == a.size-1
        a[row][col-1] += 1 if col > 0
        a[row][col]   -= 4
      end
    end
    self
  end

  def to_s =  + @grid.map {|row| row.join() }.join() 

end

puts 
puts demo = Sandpile.new( [[4,3,3], [3,1,2],[0,2,3]] )
puts 
puts demo.avalanche
puts  * 30,

s1 = Sandpile.new([[1, 2, 0], [2, 1, 1], [0, 1, 3]] )
puts 
s2 = Sandpile.new([[2, 1, 3], [1, 0, 1], [0, 1, 0]] )
puts 
puts 
puts  * 30,

s3    = Sandpile.new([[3, 3, 3], [3, 3, 3], [3, 3, 3]] )
s3_id = Sandpile.new([[2, 1, 2], [1, 0, 1], [2, 1, 2]] )
puts 
puts"
r7zgq_1_1,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T1,Identical Clone,"class BaseQueue(object):
    
    def __init__(self):
        self.contents = list()
        raise NotImplementedError
    def Enqueue(self, item):
        raise NotImplementedError
    def Dequeue(self):
        raise NotImplementedError
    def Print_Contents(self):
        for i in self.contents:
            print i,"
r7zgq_1_2,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T1,Different Whitespaces,"class BaseQueue(object):

 def __init__(self):
  self.contents = list()
  raise NotImplementedError
 def Enqueue(self, item):
  raise NotImplementedError
 def Dequeue(self):
  raise NotImplementedError
 def Print_Contents(self):
  for i in self.contents:
   print i,"
r7zgq_1_3,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T1,Different Comments,"class BaseQueue(object):
    
    def __init__(self):
        self.contents = list()
        raise NotImplementedError
    def Enqueue(self, item):
        raise NotImplementedError
    def Dequeue(self):
        raise NotImplementedError
    def Print_Contents(self):
        for i in self.contents:
            print(i,)"
r7zgq_1_4,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T1,Different Formatting,"class BaseQueue(object):
    def __init__(self):
        self.contents = list()
        raise NotImplementedError
    
    def Enqueue(self, item):
        raise NotImplementedError
    
    def Dequeue(self):
        raise NotImplementedError
    
    def Print_Contents(self):
        for i in self.contents:
            print i,"
r7zgq_2_1,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T2,Different Variable Names,"class CustomQueue(object):
    
    def __init__(self):
        self.items = list()
        raise NotImplementedError
    def Add(self, element):
        raise NotImplementedError
    def Remove(self):
        raise NotImplementedError
    def Show_Items(self):
        for j in self.items:
            print j,"
r7zgq_2_2,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T2,Different Data Types,"class BaseQueue(object):
    
    def __init__(self):
        self.contents = tuple()
        raise NotImplementedError
    def Enqueue(self, item: any) -> None:
        raise NotImplementedError
    def Dequeue(self) -> any:
        raise NotImplementedError
    def Print_Contents(self) -> None:
        for i in self.contents:
            print(i)"
r7zgq_2_3,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T2,Different Function Names,"class BaseQueue(object):
    
    def __init__(self):
        self.contents = list()
        raise NotImplementedError
    def Add(self, item):
        raise NotImplementedError
    def Remove(self):
        raise NotImplementedError
    def Display_Contents(self):
        for i in self.contents:
            print i,"
r7zgq_3_1,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T3,Added Statements,"class BaseQueue(object):
    
    def __init__(self):
        self.contents = []
        raise NotImplementedError
    def Enqueue(self, item):
        raise NotImplementedError
    def Dequeue(self):
        raise NotImplementedError
    def Print_Contents(self):
        for item in self.contents:
            print(item)"
r7zgq_3_2,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T3,Removed Statements,"class BaseQueue(object):
    
    def __init__(self):
        self.contents = list()
        raise NotImplementedError
    def Enqueue(self, item):
        raise NotImplementedError
    def Dequeue(self):
        raise NotImplementedError
    def Print_Contents(self):
        for i in self.contents:
            print i"
r7zgq_3_3,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T3,Reordered Statements,"class BaseQueue(object):
    
    def __init__(self):
        raise NotImplementedError
        self.contents = list()
        
    def Print_Contents(self):
        for i in self.contents:
            print(i),
            
    def Enqueue(self, item):
        raise NotImplementedError
        
    def Dequeue(self):
        raise NotImplementedError"
r7zgq_3_4,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T3,Control Flow Modifications,"class BaseQueue(object):
    
    def __init__(self):
        self.contents = list()
        raise NotImplementedError
    def Enqueue(self, item):
        raise NotImplementedError
    def Dequeue(self):
        raise NotImplementedError
    def Print_Contents(self):
        iter_contents = iter(self.contents)
        while True:
            try:
                print(next(iter_contents)),
            except StopIteration:
                break"
r7zgq_4_1,r7zgq,Abstract type,Programming Concepts,Data Structures,python,T4,Same Language,"class BaseQueue:
    def __init__(self):
        self.contents = []
        raise NotImplementedError
    
    def enqueue(self, item):
        raise NotImplementedError
    
    def dequeue(self):
        raise NotImplementedError
    
    def print_contents(self):
        for item in self.contents:
            print(item)"
r7zgq_4_2,r7zgq,Abstract type,Programming Concepts,Data Structures,go,T4,Different Language,"package main

import ""fmt""

type Beast interface {
    Kind() string
    Name() string
    Cry() string
}

type Dog struct {
    kind string
    name string
}

func (d Dog) Kind() string { return d.kind }

func (d Dog) Name() string { return d.name }

func (d Dog) Cry() string { return ""Woof"" }

type Cat struct {
    kind string
    name string
}

func (c Cat) Kind() string { return c.kind }

func (c Cat) Name() string { return c.name }

func (c Cat) Cry() string { return ""Meow"" }

func bprint(b Beast) {
    fmt.Printf(""%s, who's a%s, cries:%q.\n"", b.Name(), b.Kind(), b.Cry())
}

func main() {
    d := Dog{""labrador"", ""Max""}
    c := Cat{""siamese"", ""Sammy""}
    bprint(d)
    bprint(c)
}"
r7zgq_4_2,r7zgq,Abstract type,Programming Concepts,Data Structures,java,T4,Different Language,"public abstract class Abs {
    public abstract int method1(double value);
    protected abstract int method2(String name);
    int add(int a, int b) {
        return a + b;
    }
}"
r7zgq_4_2,r7zgq,Abstract type,Programming Concepts,Data Structures,php,T4,Different Language,"abstract class Abs {
	abstract public function method1($value);
	abstract protected function method2($name);
	function add($a, $b){
		return a + b;
	}
}"
r7zgq_4_2,r7zgq,Abstract type,Programming Concepts,Data Structures,ruby,T4,Different Language,"require 'abstraction'

class AbstractQueue
  abstract
  def enqueue(object)
    raise NotImplementedError
  end
  def dequeue
    raise NotImplementedError
  end
end

class ConcreteQueue < AbstractQueue
  def enqueue(object)
    puts 
  end
end"
grn4h_1_1,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T1,Identical Clone,"oddNumber  = 1
aCount  = 0
dSum  = 0

from math import sqrt

def divisorSum(n):
    sum = 1
    i = int(sqrt(n)+1)

    for d in range (2, i):
        if n% d == 0:
            sum += d
            otherD = n 
            if otherD != d:
                sum += otherD
    return sum

print ()
while aCount  < 25:
    dSum  = divisorSum(oddNumber )
    if dSum  > oddNumber:
        aCount  += 1
        print(. format(oddNumber ,dSum ))
    oddNumber  += 2

while aCount  < 1000:
    dSum  = divisorSum(oddNumber )
    if dSum  > oddNumber:
        aCount  += 1
    oddNumber  += 2
print ()
print (,(oddNumber - 2),,dSum)

oddNumber  = 1000000001
found  = False
while not found:
    dSum  = divisorSum(oddNumber )
    if dSum  > oddNumber:
        found  = True
        print ()
        print (,oddNumber,,dSum)
    oddNumber  += 2"
grn4h_1_2,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T1,Different Whitespaces,"oddNumber=1
aCount=0
dSum=0
from math import sqrt
def divisorSum(n):
 sum=1
 i=int(sqrt(n)+1)
 for d in range(2,i):
  if n%d==0:
   sum+=d
   otherD=n//d
   if otherD!=d:
    sum+=otherD
 return sum
print()
while aCount<25:
 dSum=divisorSum(oddNumber)
 if dSum>oddNumber:
  aCount+=1
  print('{0} {1}'.format(oddNumber,dSum))
 oddNumber+=2
while aCount<1000:
 dSum=divisorSum(oddNumber)
 if dSum>oddNumber:
  aCount+=1
 oddNumber+=2
print()
print(oddNumber-2,dSum)
oddNumber=1000000001
found=False
while not found:
 dSum=divisorSum(oddNumber)
 if dSum>oddNumber:
  found=True
  print()
  print(oddNumber,dSum)
 oddNumber+=2"
grn4h_1_3,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T1,Different Comments,"oddNumber = 1
aCount = 0
dSum = 0

from math import sqrt

def divisorSum(n):
    total = 1
    i = int(sqrt(n) + 1)

    for d in range(2, i):
        if n % d == 0:
            total += d
            otherD = n // d
            if otherD != d:
                total += otherD
    return total

print()
while aCount < 25:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
        print(""{}, {}"".format(oddNumber, dSum))
    oddNumber += 2

while aCount < 1000:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
    oddNumber += 2
print()
print(""{}, {}"".format(oddNumber - 2, dSum))

oddNumber = 1000000001
found = False
while not found:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        found = True
        print()
        print(""{}, {}"".format(oddNumber, dSum))
    oddNumber += 2"
grn4h_1_4,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T1,Different Formatting,"oddNumber = 1
aCount = 0
dSum = 0

from math import sqrt

def divisorSum(n):
    sum = 1
    i = int(sqrt(n) + 1)
    
    for d in range(2, i):
        if n % d == 0:
            sum += d
            otherD = n // d
            if otherD != d:
                sum += otherD
    return sum

print()

while aCount < 25:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
        print(""{}, {}"".format(oddNumber, dSum))
    oddNumber += 2

while aCount < 1000:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
    oddNumber += 2

print()
print(oddNumber - 2, dSum)

oddNumber = 1000000001
found = False
while not found:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        found = True
        print()
        print(oddNumber, dSum)
    oddNumber += 2"
grn4h_2_1,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T2,Different Variable Names,"oddNum  = 1
count  = 0
totalSum  = 0

from math import sqrt

def getDivisorSum(n):
    total = 1
    i = int(sqrt(n)+1)

    for div in range (2, i):
        if n % div == 0:
            total += div
            otherDiv = n // div
            if otherDiv != div:
                total += otherDiv
    return total

print ()
while count  < 25:
    totalSum  = getDivisorSum(oddNum)
    if totalSum  > oddNum:
        count  += 1
        print(. format(oddNum, totalSum))
    oddNum  += 2

while count  < 1000:
    totalSum  = getDivisorSum(oddNum)
    if totalSum  > oddNum:
        count  += 1
    oddNum  += 2
print ()
print (,(oddNum - 2),, totalSum)

oddNum  = 1000000001
isFound  = False
while not isFound:
    totalSum  = getDivisorSum(oddNum)
    if totalSum  > oddNum:
        isFound  = True
        print ()
        print (,oddNum,, totalSum)
    oddNum  += 2"
grn4h_2_2,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T2,Different Data Types,"oddNumber = 1
aCount = 0
dSum = 0.0

from math import sqrt

def divisorSum(n):
    total = 1.0
    i = int(sqrt(n) + 1)

    for d in range(2, i):
        if n % d == 0:
            total += float(d)
            otherD = float(n // d)
            if otherD != d:
                total += otherD
    return total

print()
while aCount < 25:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
        print(""{}, {}"".format(oddNumber, dSum))
    oddNumber += 2

while aCount < 1000:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
    oddNumber += 2
print()
print(""{}, {}"".format(oddNumber - 2, dSum))

oddNumber = 1000000001
found = False
while not found:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        found = True
        print()
        print(""{}, {}"".format(oddNumber, dSum))
    oddNumber += 2"
grn4h_2_3,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T2,Different Function Names,"oddNumber  = 1
aCount  = 0
dSum  = 0

from math import sqrt

def calculateDivisorSum(n):
    total = 1
    i = int(sqrt(n)+1)

    for d in range (2, i):
        if n% d == 0:
            total += d
            otherD = n // d
            if otherD != d:
                total += otherD
    return total

print ()
while aCount  < 25:
    dSum  = calculateDivisorSum(oddNumber )
    if dSum  > oddNumber:
        aCount  += 1
        print({0} {1}.format(oddNumber ,dSum ))
    oddNumber  += 2

while aCount  < 1000:
    dSum  = calculateDivisorSum(oddNumber )
    if dSum  > oddNumber:
        aCount  += 1
    oddNumber  += 2
print ()
print ({0} {1}.format(oddNumber - 2 ,dSum))

oddNumber  = 1000000001
found  = False
while not found:
    dSum  = calculateDivisorSum(oddNumber )
    if dSum  > oddNumber:
        found  = True
        print ()
        print ({0} {1}.format(oddNumber ,dSum))
    oddNumber  += 2"
grn4h_3_1,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T3,Added Statements,"oddNumber = 1
aCount = 0
dSum = 0

from math import sqrt

def divisorSum(n):
    total_sum = 1
    limit = int(sqrt(n) + 1)

    for d in range(2, limit):
        if n % d == 0:
            total_sum += d
            otherD = n // d
            if otherD != d:
                total_sum += otherD
    return total_sum

print()
while aCount < 25:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
        print(""{}, {}"".format(oddNumber, dSum))
    oddNumber += 2

while aCount < 1000:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
    oddNumber += 2
print()
print(""{}, {}"".format(oddNumber - 2, dSum))

oddNumber = 1000000001
found = False
while not found:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        found = True
        print()
        print(""{}, {}"".format(oddNumber, dSum))
    oddNumber += 2"
grn4h_3_2,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T3,Removed Statements,"oddNumber = 1
aCount = 0

def divisorSum(n):
    sum = 1
    for d in range(2, int(n**0.5)+1):
        if n % d == 0:
            sum += d + (n // d if d != n // d else 0)
    return sum

while aCount < 25:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
        print(oddNumber, dSum)
    oddNumber += 2

while aCount < 1000:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
    oddNumber += 2

oddNumber = 1000000001
while True:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        print(oddNumber, dSum)
        break
    oddNumber += 2"
grn4h_3_3,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T3,Reordered Statements,"oddNumber = 1
aCount = 0
dSum = 0

from math import sqrt

def divisorSum(n):
    sum = 1
    i = int(sqrt(n) + 1)

    for d in range(2, i):
        if n % d == 0:
            sum += d
            otherD = n // d
            if otherD != d:
                sum += otherD
    return sum

print()
while aCount < 25:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
        print(""{}, {}"".format(oddNumber, dSum))
    oddNumber += 2

while aCount < 1000:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
    oddNumber += 2

print()
print(oddNumber - 2, dSum)

oddNumber = 1000000001
found = False
while not found:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        found = True
        print()
        print(oddNumber, dSum)
    oddNumber += 2"
grn4h_3_4,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T3,Control Flow Modifications,"oddNumber = 1
aCount = 0
dSum = 0

from math import sqrt

def divisorSum(n):
    total_sum = 1
    limit = int(sqrt(n) + 1)

    for d in range(2, limit):
        if n % d == 0:
            total_sum += d
            paired_divisor = n // d
            if paired_divisor != d:
                total_sum += paired_divisor
    return total_sum

print()
for _ in range(25):
    while True:
        dSum = divisorSum(oddNumber)
        if dSum > oddNumber:
            aCount += 1
            print(""{0} {1}"".format(oddNumber, dSum))
            break
        oddNumber += 2

while aCount < 1000:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
    oddNumber += 2

print()
print(oddNumber - 2, dSum)

oddNumber = 1000000001
found = False
while found is False:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        found = True
        print()
        print(oddNumber, dSum)
    oddNumber += 2"
grn4h_4_1,grn4h,Abundant odd numbers,Mathematics,Number Theory,python,T4,Same Language,"oddNumber = 1
aCount = 0
dSum = 0

from math import sqrt

def divisorSum(n):
    total = 1
    for d in range(2, int(sqrt(n) + 1)):
        if n % d == 0:
            total += d
            if d != n // d:
                total += n // d
    return total

def findAbundantNumbers(limit):
    numbers = []
    while len(numbers) < limit:
        global dSum
        dSum = divisorSum(oddNumber)
        if dSum > oddNumber:
            numbers.append((oddNumber, dSum))
        global oddNumber
        oddNumber += 2
    return numbers

abundant_numbers = findAbundantNumbers(25)
for num, total in abundant_numbers:
    print(num, total)

while aCount < 1000:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        aCount += 1
    oddNumber += 2

print()
print((oddNumber - 2), dSum)

oddNumber = 1000000001
found = False
while not found:
    dSum = divisorSum(oddNumber)
    if dSum > oddNumber:
        found = True
        print()
        print(oddNumber, dSum)
    oddNumber += 2"
grn4h_4_2,grn4h,Abundant odd numbers,Mathematics,Number Theory,go,T4,Different Language,"package main

import (
    ""fmt""
    ""strconv""
)

func divisors(n int) []int {
    divs := []int{1}
    divs2 := []int{}
    for i := 2; i*i <= n; i++ {
        if n%i == 0 {
            j := n / i
            divs = append(divs, i)
            if i != j {
                divs2 = append(divs2, j)
            }
        }
    }
    for i := len(divs2) - 1; i >= 0; i-- {
        divs = append(divs, divs2[i])
    }
    return divs
}

func sum(divs []int) int {
    tot := 0
    for _, div := range divs {
        tot += div
    }
    return tot
}

func sumStr(divs []int) string {
    s := """"
    for _, div := range divs {
        s += strconv.Itoa(div) + "" + ""
    }
    return s[0 : len(s)-3]
}

func abundantOdd(searchFrom, countFrom, countTo int, printOne bool) int {
    count := countFrom
    n := searchFrom
    for ; count < countTo; n += 2 {
        divs := divisors(n)
        if tot := sum(divs); tot > n {
            count++
            if printOne && count < countTo {
                continue
            } 
            s := sumStr(divs)
            if !printOne {
                fmt.Printf(""%2d.%5d <%s =%d\n"", count, n, s, tot)
            } else {
                fmt.Printf(""%d <%s =%d\n"", n, s, tot)
            }
        }
    }
    return n
}

func main() {
    const max = 25
    fmt.Println(""The first"", max, ""abundant odd numbers are:"")
    n := abundantOdd(1, 0, 25, false)

    fmt.Println(""\nThe one thousandth abundant odd number is:"")
    abundantOdd(n, 25, 1000, true)

    fmt.Println(""\nThe first abundant odd number above one billion is:"")
    abundantOdd(1e9+1, 0, 1, true)
}"
grn4h_4_2,grn4h,Abundant odd numbers,Mathematics,Number Theory,java,T4,Different Language,"import java.util.ArrayList;
import java.util.List;

public class AbundantOddNumbers {
    private static List<Integer> list = new ArrayList<>();
    private static List<Integer> result = new ArrayList<>();

    public static void main(String[] args) {
        System.out.println(""First 25: "");
        abundantOdd(1,100000, 25, false);

        System.out.println(""\n\nThousandth: "");
        abundantOdd(1,2500000, 1000, true);

        System.out.println(""\n\nFirst over 1bn:""); 
        abundantOdd(1000000001, 2147483647, 1, false);
    }
    private static void abundantOdd(int start, int finish, int listSize, boolean printOne) {
        for (int oddNum = start; oddNum < finish; oddNum += 2) {
            list.clear();
            for (int toDivide = 1; toDivide < oddNum; toDivide+=2) {
                if (oddNum % toDivide == 0)
                    list.add(toDivide);
            }
            if (sumList(list) > oddNum) {
                if(!printOne)
                    System.out.printf(""%5d <=%5d \n"",oddNum, sumList(list) );
                result.add(oddNum);
            }
            if(printOne && result.size() >= listSize)
                System.out.printf(""%5d <=%5d \n"",oddNum, sumList(list) );

            if(result.size() >= listSize) break;
        }
    }
    private static int sumList(List list) {
        int sum = 0;
        for (int i = 0; i < list.size(); i++) {
            String temp = list.get(i).toString();
            sum += Integer.parseInt(temp);
        }
        return sum;
    }
}"
grn4h_4_2,grn4h,Abundant odd numbers,Mathematics,Number Theory,javascript,T4,Different Language,"(() => {
    'use strict';
    const main = () => {"
grn4h_4_2,grn4h,Abundant odd numbers,Mathematics,Number Theory,ruby,T4,Different Language,"require 

class Integer
  def proper_divisors
    return [] if self == 1
    primes = prime_division.flat_map{|prime, freq| [prime] * freq}
    (1...primes.size).each_with_object([1]) do |n, res|
      primes.combination(n).map{|combi| res << combi.inject(:*)}
    end.flatten.uniq
  end
end

def generator_odd_abundants(from=1)
  from += 1 if from.even?
  Enumerator.new do |y|
    from.step(nil, 2) do |n|
      sum = n.proper_divisors.sum
      y << [n, sum] if sum > n
    end
  end
end

generator_odd_abundants.take(25).each{|n, sum| puts  }
puts  % generator_odd_abundants.take(1000).last 
puts  % generator_odd_abundants(1_000_000_000).next"
dfwn1_1_1,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T1,Identical Clone,">>> from proper_divisors import proper_divs
>>> from collections import Counter
>>> 
>>> rangemax = 20000
>>> 
>>> def pdsum(n):
...     return sum(proper_divs(n))
... 
>>> def classify(n, p):
...     return 'perfect' if n == p else 'abundant' if p > n else 'deficient'
... 
>>> classes = Counter(classify(n, pdsum(n)) for n in range(1, 1 + rangemax))
>>> classes.most_common()
[('deficient', 15043), ('abundant', 4953), ('perfect', 4)]
>>>"
dfwn1_1_2,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T1,Different Whitespaces,"from proper_divisors import proper_divs
from collections import Counter

rangemax = 20000

def pdsum(n):
 return sum(proper_divs(n))

def classify(n, p):
 return 'perfect' if n == p else 'abundant' if p > n else 'deficient'

classes = Counter(classify(n, pdsum(n)) for n in range(1, 1 + rangemax))
classes.most_common()  
[('deficient', 15043), ('abundant', 4953), ('perfect', 4)]"
dfwn1_1_3,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T1,Different Comments,"from proper_divisors import proper_divs
from collections import Counter

rangemax = 20000

def pdsum(n):
    return sum(proper_divs(n))

def classify(n, p):
    return 'perfect' if n == p else 'abundant' if p > n else 'deficient'

classes = Counter(classify(n, pdsum(n)) for n in range(1, 1 + rangemax))
classes.most_common()"
dfwn1_1_4,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T1,Different Formatting,"from proper_divisors import proper_divs
from collections import Counter

rangemax = 20000

def pdsum(n):
    return sum(proper_divs(n))

def classify(n, p):
    return 'perfect' if n == p else 'abundant' if p > n else 'deficient'

classes = Counter(classify(n, pdsum(n)) for n in range(1, 1 + rangemax))
classes.most_common()"
dfwn1_2_1,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T2,Different Variable Names,">>> from proper_divisors import proper_divs
>>> from collections import Counter
>>> 
>>> upper_limit = 20000
>>> 
>>> def divisor_sum(number):
...     return sum(proper_divs(number))
... 
>>> def categorize(number, divisor_total):
...     return 'perfect' if number == divisor_total else 'abundant' if divisor_total > number else 'deficient'
... 
>>> category_count = Counter(categorize(num, divisor_sum(num)) for num in range(1, 1 + upper_limit))
>>> category_count.most_common()
[('deficient', 15043), ('abundant', 4953), ('perfect', 4)]"
dfwn1_2_2,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T2,Different Data Types,"from proper_divisors import proper_divs
from collections import Counter

rangemax = 20000

def pdsum(n: int) -> int:
    return sum(proper_divs(n))

def classify(n: int, p: int) -> str:
    return 'perfect' if n == p else 'abundant' if p > n else 'deficient'

classes = Counter(classify(n, pdsum(n)) for n in range(1, 1 + rangemax))
classes.most_common()"
dfwn1_2_3,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T2,Different Function Names,">>> from proper_divisors import proper_divs
>>> from collections import Counter
>>> 
>>> rangemax = 20000
>>> 
>>> def sum_proper_divisors(n):
...     return sum(proper_divs(n))
... 
>>> def categorize(n, p):
...     return 'perfect' if n == p else 'abundant' if p > n else 'deficient'
... 
>>> classifications = Counter(categorize(n, sum_proper_divisors(n)) for n in range(1, 1 + rangemax))
>>> classifications.most_common()
[('deficient', 15043), ('abundant', 4953), ('perfect', 4)]"
dfwn1_3_1,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T3,Added Statements,"from proper_divisors import proper_divs
from collections import Counter

rangemax = 20000

def pdsum(n):
    divisor_sum = sum(proper_divs(n))
    return divisor_sum

def classify(n, p):
    if n == p:
        return 'perfect'
    elif p > n:
        return 'abundant'
    else:
        return 'deficient'

classifications = (classify(n, pdsum(n)) for n in range(1, 1 + rangemax))
classes = Counter(classifications)
most_common_classes = classes.most_common()
most_common_classes"
dfwn1_3_2,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T3,Removed Statements,"from proper_divisors import proper_divs
from collections import Counter

def pdsum(n):
    return sum(proper_divs(n))

def classify(n, p):
    return 'perfect' if n == p else 'abundant' if p > n else 'deficient'

classes = Counter(classify(n, pdsum(n)) for n in range(1, 20001))
classes.most_common()"
dfwn1_3_3,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T3,Reordered Statements,"from collections import Counter
from proper_divisors import proper_divs

rangemax = 20000

def pdsum(n):
    return sum(proper_divs(n))

def classify(n, p):
    return 'perfect' if n == p else 'abundant' if p > n else 'deficient'

classes = Counter(classify(n, pdsum(n)) for n in range(1, 1 + rangemax))
classes.most_common()"
dfwn1_3_4,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T3,Control Flow Modifications,"from proper_divisors import proper_divs
from collections import Counter

rangemax = 20000

def pdsum(n):
    return sum(proper_divs(n))

def classify(n, p):
    if n == p:
        return 'perfect'
    elif p > n:
        return 'abundant'
    else:
        return 'deficient'

classes = Counter()
for n in range(1, rangemax + 1):
    classes[classify(n, pdsum(n))] += 1

result = classes.most_common()
result"
dfwn1_4_1,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,python,T4,Same Language,"from proper_divisors import proper_divs
from collections import Counter

rangemax = 20000

def pdsum(n):
    return sum(proper_divs(n))

def classify(n, p):
    if n == p:
        return 'perfect'
    return 'abundant' if p > n else 'deficient'

classes = Counter((classify(n, pdsum(n)) for n in range(1, rangemax + 1)))
result = classes.most_common()
result"
dfwn1_4_2,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,go,T4,Different Language,"package main

import ""fmt""

func pfacSum(i int) int {
    sum := 0
    for p := 1; p <= i/2; p++ {
        if i%p == 0 {
            sum += p
        }
    }
    return sum
}

func main() {
    var d, a, p = 0, 0, 0
    for i := 1; i <= 20000; i++ {
        j := pfacSum(i)
        if j < i {
            d++
        } else if j == i {
            p++
        } else {
            a++
        }
    }
    fmt.Printf(""There are%d deficient numbers between 1 and 20000\n"", d)
    fmt.Printf(""There are%d abundant numbers  between 1 and 20000\n"", a)
    fmt.Printf(""There are%d perfect numbers between 1 and 20000\n"", p)
}"
dfwn1_4_2,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,java,T4,Different Language,"import java.util.stream.LongStream;

public class NumberClassifications {

    public static void main(String[] args) {
        int deficient = 0;
        int perfect = 0;
        int abundant = 0;

        for (long i = 1; i <= 20_000; i++) {
            long sum = properDivsSum(i);
            if (sum < i)
                deficient++;
            else if (sum == i)
                perfect++;
            else
                abundant++;
        }
        System.out.println(""Deficient: "" + deficient);
        System.out.println(""Perfect: "" + perfect);
        System.out.println(""Abundant: "" + abundant);
    }

    public static long properDivsSum(long n) {
        return LongStream.rangeClosed(1, (n + 1) / 2).filter(i -> n != i && n % i == 0).sum();
    }
}"
dfwn1_4_2,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,javascript,T4,Different Language,"for (var dpa=[1,0,0], n=2; n<=20000; n+=1) {
    for (var ds=0, d=1, e=n/2+1; d<e; d+=1) if (n%d==0) ds+=d
    dpa[ds<n ? 0 : ds==n ? 1 : 2]+=1
}
document.write('Deficient:',dpa[0], ', Perfect:',dpa[1], ', Abundant:',dpa[2], '<br>' )"
dfwn1_4_2,dfwn1,"Abundant, deficient and perfect number classifications",Mathematics,Number Theory,ruby,T4,Different Language,"res = (1 .. 20_000).map{|n| n.proper_divisors.sum <=> n }.tally
puts"
p1gbm_1_1,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T1,Identical Clone,">>> def accumulator(sum):
  def f(n):
    f.sum += n
    return f.sum
  f.sum = sum
  return f

>>> x = accumulator(1)
>>> x(5)
6
>>> x(2.3)
8.3000000000000007
>>> x = accumulator(1)
>>> x(5)
6
>>> x(2.3)
8.3000000000000007
>>> x2 = accumulator(3)
>>> x2(5)
8
>>> x2(3.3)
11.300000000000001
>>> x(0)
8.3000000000000007
>>> x2(0)
11.300000000000001"
p1gbm_1_2,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T1,Different Whitespaces,"def accumulator(sum):
 def f(n):
  f.sum += n
  return f.sum
 f.sum = sum
 return f

x = accumulator(1)
x(5)
x(2.3)
x = accumulator(1)
x(5)
x(2.3)
x2 = accumulator(3)
x2(5)
x2(3.3)
x(0)
x2(0)"
p1gbm_1_3,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T1,Different Comments,"def accumulator(sum):
  def f(n):
    f.sum += n
    return f.sum
  f.sum = sum
  return f

x = accumulator(1)
x(5)
x(2.3)
x = accumulator(1)
x(5)
x(2.3)
x2 = accumulator(3)
x2(5)
x2(3.3)
x(0)
x2(0)"
p1gbm_1_4,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T1,Different Formatting,"def accumulator(sum):
    def f(n):
        f.sum += n
        return f.sum
    f.sum = sum
    return f

x = accumulator(1)
x(5)
x(2.3)
x = accumulator(1)
x(5)
x(2.3)
x2 = accumulator(3)
x2(5)
x2(3.3)
x(0)
x2(0)"
p1gbm_2_1,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T2,Different Variable Names,"def total_accumulator(initial):
  def inner(value):
    inner.total += value
    return inner.total
  inner.total = initial
  return inner

x = total_accumulator(1)
x(5)
x(2.3)
x = total_accumulator(1)
x(5)
x(2.3)
x2 = total_accumulator(3)
x2(5)
x2(3.3)
x(0)
x2(0)"
p1gbm_2_2,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T2,Different Data Types,"def accumulator(sum: int) -> callable:
  def f(n: float) -> float:
    f.sum += n
    return f.sum
  f.sum = float(sum)
  return f

x = accumulator(1)
x(5)
x(2.3)
x = accumulator(1)
x(5)
x(2.3)
x2 = accumulator(3)
x2(5)
x2(3.3)
x(0)
x2(0)"
p1gbm_2_3,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T2,Different Function Names,">>> def totalizer(initial_sum):
  def inner_function(value):
    inner_function.total += value
    return inner_function.total
  inner_function.total = initial_sum
  return inner_function

>>> y = totalizer(1)
>>> y(5)
6
>>> y(2.3)
8.3000000000000007
>>> y = totalizer(1)
>>> y(5)
6
>>> y(2.3)
8.3000000000000007
>>> y2 = totalizer(3)
>>> y2(5)
8
>>> y2(3.3)
11.300000000000001
>>> y(0)
8.3000000000000007
>>> y2(0)
11.300000000000001"
p1gbm_3_1,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T3,Added Statements,"def accumulator(initial_sum):
  def inner_function(value):
    inner_function.total += value
    return inner_function.total
  inner_function.total = initial_sum
  return inner_function

x = accumulator(1)
x(5)
x(2.3)
x = accumulator(1)
x(5)
x(2.3)
x2 = accumulator(3)
x2(5)
x2(3.3)
x(0)
x2(0)"
p1gbm_3_2,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T3,Removed Statements,"def accumulator(sum):
  def f(n):
    f.sum += n
    return f.sum
  f.sum = sum
  return f

x = accumulator(1)
x(5)
x(2.3)
x = accumulator(1)
x(5)
x(2.3)
x2 = accumulator(3)
x2(5)
x2(3.3)
x(0)
x2(0)"
p1gbm_3_3,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T3,Reordered Statements,"def accumulator(sum):
  f.sum = sum
  def f(n):
    f.sum += n
    return f.sum
  return f

x = accumulator(1)
x(5)
x(2.3)
x = accumulator(1)
x(5)
x(2.3)
x2 = accumulator(3)
x2(5)
x2(3.3)
x(0)
x2(0)"
p1gbm_3_4,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T3,Control Flow Modifications,"def accumulator(sum):
    f = lambda n: f.sum + n
    f.sum = sum
    def wrapper(n):
        f.sum = f(n)
        return f.sum
    return wrapper

x = accumulator(1)
print(x(5))
print(x(2.3))
x = accumulator(1)
print(x(5))
print(x(2.3))
x2 = accumulator(3)
print(x2(5))
print(x2(3.3))
print(x(0))
print(x2(0))"
p1gbm_4_1,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,python,T4,Same Language,"def create_accumulator(initial_sum):
    class Accumulator:
        def __init__(self, sum):
            self.sum = sum
        
        def add(self, n):
            self.sum += n
            return self.sum
    
    return Accumulator(initial_sum).add

x = create_accumulator(1)
print(x(5))
print(x(2.3))
x = create_accumulator(1)
print(x(5))
print(x(2.3))
x2 = create_accumulator(3)
print(x2(5))
print(x2(3.3))
print(x(0))
print(x2(0))"
p1gbm_4_2,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,go,T4,Different Language,"package main

import ""fmt""

func accumulator(sum interface{}) func(interface{}) interface{} {
    return func(nv interface{}) interface{} {
        switch s := sum.(type) {
        case int:
            switch n := nv.(type) {
            case int:
                sum = s + n
            case float64:
                sum = float64(s) + n
            }
        case float64:
            switch n := nv.(type) {
            case int:
                sum = s + float64(n)
            case float64:
                sum = s + n
            }
        default:
            sum = nv
        }
        return sum
    }
}

func main() {
    x := accumulator(1)
    x(5)
    accumulator(3)
    fmt.Println(x(2.3))
}"
p1gbm_4_2,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,java,T4,Different Language,public class Accumulator
p1gbm_4_2,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,javascript,T4,Different Language,"function accumulator(sum) {
  return function(n) {
    return sum += n;
  }
}
var x = accumulator(1);
x(5);
console.log(accumulator(3).toString() + '<br>');
console.log(x(2.3));"
p1gbm_4_2,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,php,T4,Different Language,"<?php
function accumulator($start){
 return create_function('$x','static $v='.$start.';return $v+=$x;');
}
$acc = accumulator(5);
echo $acc(5), ; 
echo $acc(10), ; 
?>"
p1gbm_4_2,p1gbm,Accumulator factory,Programming Concepts,Functional Programming,ruby,T4,Different Language,"def accumulator(sum)
  lambda {|n| sum += n}
end


x = accumulator(1)
x.call(5)
accumulator(3)
puts x.call(2.3)"
6y03w_1_1,6y03w,Ackermann function,Mathematics,Algorithms,python,T1,Identical Clone,"def ack1(M, N):
   return (N + 1) if M == 0 else (
      ack1(M-1, 1) if N == 0 else ack1(M-1, ack1(M, N-1)))"
6y03w_1_2,6y03w,Ackermann function,Mathematics,Algorithms,python,T1,Different Whitespaces,"def ack1(M,N):return(N+1)if M==0else(ack1(M-1,1)if N==0else ack1(M-1,ack1(M,N-1)))"
6y03w_1_3,6y03w,Ackermann function,Mathematics,Algorithms,python,T1,Different Comments,"def ack1(M, N):
   return (N + 1) if M == 0 else (
      ack1(M-1, 1) if N == 0 else ack1(M-1, ack1(M, N-1)))"
6y03w_1_4,6y03w,Ackermann function,Mathematics,Algorithms,python,T1,Different Formatting,"def ack1(M, N):
    return (N + 1) if M == 0 else (ack1(M - 1, 1) if N == 0 else ack1(M - 1, ack1(M, N - 1)))"
6y03w_2_1,6y03w,Ackermann function,Mathematics,Algorithms,python,T2,Different Variable Names,"def func1(X, Y):
   return (Y + 1) if X == 0 else (
      func1(X-1, 1) if Y == 0 else func1(X-1, func1(X, Y-1)))"
6y03w_2_2,6y03w,Ackermann function,Mathematics,Algorithms,python,T2,Different Data Types,"def ack1(m: int, n: int) -> int:
   return (n + 1) if m == 0 else (
      ack1(m-1, 1) if n == 0 else ack1(m-1, ack1(m, n-1)))"
6y03w_2_3,6y03w,Ackermann function,Mathematics,Algorithms,python,T2,Different Function Names,"def new_ack1(X, Y):
   return (Y + 1) if X == 0 else (
      new_ack1(X-1, 1) if Y == 0 else new_ack1(X-1, new_ack1(X, Y-1)))"
6y03w_3_1,6y03w,Ackermann function,Mathematics,Algorithms,python,T3,Added Statements,"def ackermann(M, N):
    if M == 0:
        return N + 1
    elif N == 0:
        return ackermann(M - 1, 1)
    else:
        return ackermann(M - 1, ackermann(M, N - 1))"
6y03w_3_2,6y03w,Ackermann function,Mathematics,Algorithms,python,T3,Removed Statements,"def ack1(M, N):
   return N + 1 if M == 0 else ack1(M-1, ack1(M, N-1)) if N > 0 else ack1(M-1, 1)"
6y03w_3_3,6y03w,Ackermann function,Mathematics,Algorithms,python,T3,Reordered Statements,"def ack1(M, N):
   if M == 0:
      return N + 1
   if N == 0:
      return ack1(M - 1, 1)
   return ack1(M - 1, ack1(M, N - 1))"
6y03w_3_4,6y03w,Ackermann function,Mathematics,Algorithms,python,T3,Control Flow Modifications,"def ack1(M, N):
   if M == 0:
       return N + 1
   elif N == 0:
       return ack1(M - 1, 1)
   else:
       return ack1(M - 1, ack1(M, N - 1))"
6y03w_4_1,6y03w,Ackermann function,Mathematics,Algorithms,python,T4,Same Language,"def ackermann(M, N):
    if M == 0:
        return N + 1
    elif M == 1:
        return N + 2
    elif M == 2:
        return 2 * N + 3
    else:
        return ackermann(M - 1, ackermann(M, N - 1))"
6y03w_4_2,6y03w,Ackermann function,Mathematics,Algorithms,go,T4,Different Language,"func Ackermann(m, n uint) uint {
	switch 0 {
	case m:
		return n + 1
	case n:
		return Ackermann(m - 1, 1)
	}
	return Ackermann(m - 1, Ackermann(m, n - 1))
}"
6y03w_4_2,6y03w,Ackermann function,Mathematics,Algorithms,java,T4,Different Language,"import java.math.BigInteger;

public static BigInteger ack(BigInteger m, BigInteger n) {
    return m.equals(BigInteger.ZERO)
            ? n.add(BigInteger.ONE)
            : ack(m.subtract(BigInteger.ONE),
                        n.equals(BigInteger.ZERO) ? BigInteger.ONE : ack(m, n.subtract(BigInteger.ONE)));
}"
6y03w_4_2,6y03w,Ackermann function,Mathematics,Algorithms,javascript,T4,Different Language,"function ack(m, n) {
 return m === 0 ? n + 1 : ack(m - 1, n === 0  ? 1 : ack(m, n - 1));
}"
6y03w_4_2,6y03w,Ackermann function,Mathematics,Algorithms,php,T4,Different Language,"function ackermann( $m , $n )
{
    if ( $m==0 )
    {
        return $n + 1;
    }
    elseif ( $n==0 )
    {
        return ackermann( $m-1 , 1 );
    }
    return ackermann( $m-1, ackermann( $m , $n-1 ) );
}

echo ackermann( 3, 4 );"
6y03w_4_2,6y03w,Ackermann function,Mathematics,Algorithms,ruby,T4,Different Language,"def ack(m, n)
  if m == 0
    n + 1
  elsif n == 0
    ack(m-1, 1)
  else
    ack(m-1, ack(m, n-1))
  end
end"
mclyh_1_1,mclyh,Active Directory/Connect,Networking,Directory Services,python,T1,Identical Clone,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    bind = l.simple_bind_s(, )
finally:
    l.unbind()"
mclyh_1_2,mclyh,Active Directory/Connect,Networking,Directory Services,python,T1,Different Whitespaces,"import ldap
l=ldap.initialize()
try:
 l.protocol_version=ldap.VERSION3
 l.set_option(ldap.OPT_REFERRALS,0)
 bind=l.simple_bind_s(,,)
finally:
 l.unbind()"
mclyh_1_3,mclyh,Active Directory/Connect,Networking,Directory Services,python,T1,Different Comments,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    bind = l.simple_bind_s(, )
finally:
    l.unbind()"
mclyh_1_4,mclyh,Active Directory/Connect,Networking,Directory Services,python,T1,Different Formatting,"import ldap
l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)
    bind = l.simple_bind_s(, )
finally:
    l.unbind()"
mclyh_2_1,mclyh,Active Directory/Connect,Networking,Directory Services,python,T2,Different Variable Names,"import ldap

conn = ldap.initialize()
try:
    conn.protocol_version = ldap.VERSION3
    conn.set_option(ldap.OPT_REFERRALS, 0)

    auth = conn.simple_bind_s(, )
finally:
    conn.unbind()"
mclyh_2_2,mclyh,Active Directory/Connect,Networking,Directory Services,python,T2,Different Data Types,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, False)

    bind = l.simple_bind_s(None, None)
finally:
    l.unbind()"
mclyh_2_3,mclyh,Active Directory/Connect,Networking,Directory Services,python,T2,Different Function Names,"import ldap

connection = ldap.initialize()
try:
    connection.protocol_version = ldap.VERSION3
    connection.set_option(ldap.OPT_REFERRALS, 0)

    authentication = connection.simple_bind_s(, )
finally:
    connection.unbind()"
mclyh_3_1,mclyh,Active Directory/Connect,Networking,Directory Services,python,T3,Added Statements,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    username = ""your_username""
    password = ""your_password""
    bind = l.simple_bind_s(username, password)
finally:
    l.unbind()"
mclyh_3_2,mclyh,Active Directory/Connect,Networking,Directory Services,python,T3,Removed Statements,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)
    l.simple_bind_s(, )
finally:
    l.unbind()"
mclyh_3_3,mclyh,Active Directory/Connect,Networking,Directory Services,python,T3,Reordered Statements,"import ldap

l = ldap.initialize()
try:
    l.set_option(ldap.OPT_REFERRALS, 0)
    l.protocol_version = ldap.VERSION3

    bind = l.simple_bind_s(, )
finally:
    l.unbind()"
mclyh_3_4,mclyh,Active Directory/Connect,Networking,Directory Services,python,T3,Control Flow Modifications,"import ldap

l = ldap.initialize()
l.protocol_version = ldap.VERSION3
l.set_option(ldap.OPT_REFERRALS, 0)

try:
    bind = l.simple_bind_s(, )
except Exception as e:
    print(""An error occurred:"", e)
finally:
    l.unbind()"
mclyh_4_1,mclyh,Active Directory/Connect,Networking,Directory Services,python,T4,Same Language,"import ldap

def ldap_connect():
    connection = ldap.initialize()
    connection.protocol_version = ldap.VERSION3
    connection.set_option(ldap.OPT_REFERRALS, 0)
    return connection

def ldap_bind(connection):
    return connection.simple_bind_s(, )

def main():
    connection = ldap_connect()
    try:
        bind = ldap_bind(connection)
    finally:
        connection.unbind()

main()"
mclyh_4_2,mclyh,Active Directory/Connect,Networking,Directory Services,go,T4,Different Language,"package main

import (
    ""log""
    ""github.com/jtblin/go-ldap-client""
)

func main() {
    client := &ldap.LDAPClient{
        Base:         ""dc=example,dc=com"",
        Host:         ""ldap.example.com"",
        Port:         389,
        UseSSL:       false,
        BindDN:       ""uid=readonlyuser,ou=People,dc=example,dc=com"",
        BindPassword: ""readonlypassword"",
        UserFilter:   ""(uid=%s)"",
        GroupFilter:  ""(memberUid=%s)"",
        Attributes:   []string{""givenName"", ""sn"", ""mail"", ""uid""},
    }
    defer client.Close()
    err := client.Connect()
    if err != nil { 
        log.Fatalf(""Failed to connect:%+v"", err)
    }"
mclyh_4_2,mclyh,Active Directory/Connect,Networking,Directory Services,java,T4,Different Language,"import java.io.IOException;
import org.apache.directory.api.ldap.model.exception.LdapException;
import org.apache.directory.ldap.client.api.LdapConnection;
import org.apache.directory.ldap.client.api.LdapNetworkConnection;

public class LdapConnectionDemo {

    public static void main(String[] args) throws LdapException, IOException {
        try (LdapConnection connection = new LdapNetworkConnection(""localhost"", 10389)) {
            connection.bind();
            connection.unBind();
        }
    }
}"
mclyh_4_2,mclyh,Active Directory/Connect,Networking,Directory Services,php,T4,Different Language,"<?php
$ldap = ldap_connect($hostname, $port);
$success = ldap_bind($ldap, $username, $password);"
mclyh_4_2,mclyh,Active Directory/Connect,Networking,Directory Services,ruby,T4,Different Language,"require 'rubygems'
require 'net/ldap'
ldap = Net::LDAP.new(:host => 'ldap.example.com', :base => 'o=companyname')
ldap.authenticate('bind_dn', 'bind_pass')"
q0oxi_1_1,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T1,Identical Clone,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    bind = l.simple_bind_s(, )

    base = 
    criteria = 
    attributes = ['displayName', 'company']
    result = l.search_s(base, ldap.SCOPE_SUBTREE, criteria, attributes)

    results = [entry for dn, entry in result if isinstance(entry, dict)]
    print results
finally:
    l.unbind()"
q0oxi_1_2,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T1,Different Whitespaces,"import ldap

l=ldap.initialize()
try:
 l.protocol_version=ldap.VERSION3
 l.set_option(ldap.OPT_REFERRALS,0)

 bind=l.simple_bind_s(,,)

 base=
 criteria=
 attributes=['displayName','company']
 result=l.search_s(base,ldap.SCOPE_SUBTREE,criteria,attributes)

 results=[entry for dn,entry in result if isinstance(entry,dict)]
 print(results)
finally:
 l.unbind()"
q0oxi_1_3,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T1,Different Comments,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    bind = l.simple_bind_s(, )

    base = 
    criteria = 
    attributes = ['displayName', 'company']
    result = l.search_s(base, ldap.SCOPE_SUBTREE, criteria, attributes)

    results = [entry for dn, entry in result if isinstance(entry, dict)]
    print(results)
finally:
    l.unbind()"
q0oxi_1_4,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T1,Different Formatting,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)
    bind = l.simple_bind_s(, )
    base = 
    criteria = 
    attributes = ['displayName', 'company']
    result = l.search_s(base, ldap.SCOPE_SUBTREE, criteria, attributes)
    results = [entry for dn, entry in result if isinstance(entry, dict)]
    print results
finally:
    l.unbind()"
q0oxi_2_1,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T2,Different Variable Names,"import ldap

directory = ldap.initialize()
try:
    directory.protocol_version = ldap.VERSION3
    directory.set_option(ldap.OPT_REFERRALS, 0)

    authentication = directory.simple_bind_s(, )

    root = 
    filter_conditions = 
    fields = ['displayName', 'company']
    output = directory.search_s(root, ldap.SCOPE_SUBTREE, filter_conditions, fields)

    entries = [entry for distinguished_name, entry in output if isinstance(entry, dict)]
    print entries
finally:
    directory.unbind()"
q0oxi_2_2,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T2,Different Data Types,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    bind = l.simple_bind_s(b'', b'')

    base = b''
    criteria = b''
    attributes = [b'displayName', b'company']
    result = l.search_s(base, ldap.SCOPE_SUBTREE, criteria, attributes)

    results = [entry for dn, entry in result if isinstance(entry, dict)]
    print(results)
finally:
    l.unbind()"
q0oxi_2_3,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T2,Different Function Names,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    connection = l.simple_bind_s(, )

    search_base = 
    search_criteria = 
    search_attributes = ['displayName', 'company']
    search_result = l.search_s(search_base, ldap.SCOPE_SUBTREE, search_criteria, search_attributes)

    filtered_results = [entry for dn, entry in search_result if isinstance(entry, dict)]
    print filtered_results
finally:
    l.unbind()"
q0oxi_3_1,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T3,Added Statements,"import ldap

l = ldap.initialize('ldap://example.com')
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    bind = l.simple_bind_s('cn=admin,dc=example,dc=com', 'password')

    base = 'dc=example,dc=com'
    criteria = '(objectClass=person)'
    attributes = ['displayName', 'company']
    result = l.search_s(base, ldap.SCOPE_SUBTREE, criteria, attributes)

    results = [entry for dn, entry in result if isinstance(entry, dict)]
    print(results)
finally:
    l.unbind()"
q0oxi_3_2,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T3,Removed Statements,"import ldap

l = ldap.initialize()
try:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    l.simple_bind_s(, )

    result = l.search_s(base, ldap.SCOPE_SUBTREE, criteria, ['displayName', 'company'])

    print [entry for dn, entry in result if isinstance(entry, dict)]
finally:
    l.unbind()"
q0oxi_3_3,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T3,Reordered Statements,"import ldap

l = ldap.initialize()
l.protocol_version = ldap.VERSION3
l.set_option(ldap.OPT_REFERRALS, 0)

try:
    bind = l.simple_bind_s(, )
    
    base = 
    criteria = 
    attributes = ['displayName', 'company']
    result = l.search_s(base, ldap.SCOPE_SUBTREE, criteria, attributes)

    results = [entry for dn, entry in result if isinstance(entry, dict)]
    print results
finally:
    l.unbind()"
q0oxi_3_4,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T3,Control Flow Modifications,"import ldap

l = ldap.initialize()
if l:
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)

    try:
        bind = l.simple_bind_s(, )

        base = 
        criteria = 
        attributes = ['displayName', 'company']
        result = l.search_s(base, ldap.SCOPE_SUBTREE, criteria, attributes)

        results = []
        for dn, entry in result:
            if isinstance(entry, dict):
                results.append(entry)
        print results
    finally:
        l.unbind()"
q0oxi_4_1,q0oxi,Active Directory/Search for a user,Networking,Directory Services,python,T4,Same Language,"import ldap

def initialize_ldap():
    l = ldap.initialize()
    l.protocol_version = ldap.VERSION3
    l.set_option(ldap.OPT_REFERRALS, 0)
    return l

def bind_ldap(l):
    return l.simple_bind_s(, )

def search_entries(l, base, criteria, attributes):
    return l.search_s(base, ldap.SCOPE_SUBTREE, criteria, attributes)

def filter_results(result):
    return [entry for dn, entry in result if isinstance(entry, dict)]

l = initialize_ldap()
try:
    bind_ldap(l)

    base = 
    criteria = 
    attributes = ['displayName', 'company']
    result = search_entries(l, base, criteria, attributes)

    results = filter_results(result)
    print(results)
finally:
    l.unbind()"
q0oxi_4_2,q0oxi,Active Directory/Search for a user,Networking,Directory Services,go,T4,Different Language,"package main

import (
    ""log""
    ""github.com/jtblin/go-ldap-client""
)

func main() {
    client := &ldap.LDAPClient{
        Base:        ""dc=example,dc=com"",
        Host:        ""ldap.example.com"",
        Port:        389,
        GroupFilter: ""(memberUid=%s)"",
    }
    defer client.Close()
    err := client.Connect()
    if err != nil { 
        log.Fatalf(""Failed to connect:%+v"", err)
    }
    groups, err := client.GetGroupsOfUser(""username"")
    if err != nil {
        log.Fatalf(""Error getting groups for user%s:%+v"", ""username"", err)
    }
    log.Printf(""Groups:%+v"", groups) 
}"
q0oxi_4_2,q0oxi,Active Directory/Search for a user,Networking,Directory Services,java,T4,Different Language,"import java.io.IOException;
import org.apache.directory.api.ldap.model.cursor.CursorException;
import org.apache.directory.api.ldap.model.cursor.EntryCursor;
import org.apache.directory.api.ldap.model.entry.Entry;
import org.apache.directory.api.ldap.model.exception.LdapException;
import org.apache.directory.api.ldap.model.message.SearchScope;
import org.apache.directory.ldap.client.api.LdapConnection;
import org.apache.directory.ldap.client.api.LdapNetworkConnection;

public class LdapSearchDemo {

    public static void main(String[] args) throws IOException, LdapException, CursorException {
        new LdapSearchDemo().demonstrateSearch();
    }

    private void demonstrateSearch() throws IOException, LdapException, CursorException {
        try (LdapConnection conn = new LdapNetworkConnection(""localhost"", 11389)) {
            conn.bind(""uid=admin,ou=system"", ""********"");
            search(conn, ""*mil*"");
            conn.unBind();
        }
    }

    private void search(LdapConnection connection, String uid) throws LdapException, CursorException {
        String baseDn = ""ou=users,o=mojo"";
        String filter = ""(&(objectClass=person)(&(uid="" + uid + "")))"";
        SearchScope scope = SearchScope.SUBTREE;
        String[] attributes = {""dn"", ""cn"", ""sn"", ""uid""};
        int ksearch = 0;

        EntryCursor cursor = connection.search(baseDn, filter, scope, attributes);
        while (cursor.next()) {
            ksearch++;
            Entry entry = cursor.get();
            System.out.printf(""Search entry%d =%s%n"", ksearch, entry);
        }
    }
}"
q0oxi_4_2,q0oxi,Active Directory/Search for a user,Networking,Directory Services,php,T4,Different Language,"<?php

$l = ldap_connect('ldap.example.com');
ldap_set_option($l, LDAP_OPT_PROTOCOL_VERSION, 3);
ldap_set_option($l, LDAP_OPT_REFERRALS, false);

$bind = ldap_bind($l, 'me@example.com', 'password');

$base = 'dc=example, dc=com';
$criteria = '(&(objectClass=user)(sAMAccountName=username))';
$attributes = array('displayName', 'company');

$search = ldap_search($l, $base, $criteria, $attributes);
$entries = ldap_get_entries($l, $search);

var_dump($entries);"
q0oxi_4_2,q0oxi,Active Directory/Search for a user,Networking,Directory Services,ruby,T4,Different Language,"require 'rubygems'
require 'net/ldap'

ldap = Net::LDAP.new(:host => 'hostname', :base => 'base')
ldap.authenticate('bind_dn', 'bind_pass')

filter = Net::LDAP::Filter.pres('objectclass')
filter &= Net::LDAP::Filter.eq('sn','Jackman')

filter = Net::LDAP::Filter.construct('(&(objectclass=*)(sn=Jackman))')

results = ldap.search(:filter => filter)  

puts results[0][:sn]"
l26cv_1_1,l26cv,Active object,Programming Concepts,Concurrency,python,T1,Identical Clone,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    'continuously integrate a function `K`, at each `interval` seconds'
    def __init__(self, K=lambda t:0, interval=1e-4):
        Thread.__init__(self)
        self.interval  = interval
        self.K   = K
        self.S   = 0.0
        self.__run = True
        self.start()

    def run(self):
        
        interval = self.interval
        start = time()
        t0, k0 = 0, self.K(0)
        while self.__run:
            sleep(interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0)*(t1 - t0)/2.0
            t0, k0 = t1, k1

    def join(self):
        self.__run = False
        Thread.join(self)

if __name__ == :
    from math import sin, pi

    ai = Integrator(lambda t: sin(pi*t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_1_2,l26cv,Active object,Programming Concepts,Concurrency,python,T1,Different Whitespaces,"from time import time, sleep
from threading import Thread
class Integrator(Thread):
 'continuously integrate a function `K`, at each `interval` seconds'
 def __init__(self,K=lambda t:0,interval=1e-4):
  Thread.__init__(self)
  self.interval=interval
  self.K=K
  self.S=0.0
  self.__run=True
  self.start()
 def run(self):
  interval=self.interval
  start=time()
  t0,k0=0,self.K(0)
  while self.__run:
   sleep(interval)
   t1=time()-start
   k1=self.K(t1)
   self.S+=(k1+k0)*(t1-t0)/2.0
   t0,k0=t1,k1
 def join(self):
  self.__run=False
  Thread.join(self)
if __name__==__name__:
 from math import sin,pi
 ai=Integrator(lambda t:sin(pi*t))
 sleep(2)
 print(ai.S)
 ai.K=lambda t:0
 sleep(0.5)
 print(ai.S)"
l26cv_1_3,l26cv,Active object,Programming Concepts,Concurrency,python,T1,Different Comments,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    'this class is responsible for performing a continuous integration of function `K` every `interval` seconds'
    def __init__(self, K=lambda t:0, interval=1e-4):
        Thread.__init__(self)
        self.interval  = interval
        self.K   = K
        self.S   = 0.0
        self.__run = True
        self.start()

    def run(self):
        
        interval = self.interval
        start = time()
        t0, k0 = 0, self.K(0)
        while self.__run:
            sleep(interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0)*(t1 - t0)/2.0
            t0, k0 = t1, k1

    def join(self):
        self.__run = False
        Thread.join(self)

if __name__ == '__main__':
    from math import sin, pi

    ai = Integrator(lambda t: sin(pi*t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_1_4,l26cv,Active object,Programming Concepts,Concurrency,python,T1,Different Formatting,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    def __init__(self, K=lambda t: 0, interval=1e-4):
        Thread.__init__(self)
        self.interval = interval
        self.K = K
        self.S = 0.0
        self.__run = True
        self.start()

    def run(self):
        interval = self.interval
        start = time()
        t0, k0 = 0, self.K(0)
        while self.__run:
            sleep(interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0) * (t1 - t0) / 2.0
            t0, k0 = t1, k1

    def join(self):
        self.__run = False
        Thread.join(self)

if __name__ == __main__:
    from math import sin, pi
    ai = Integrator(lambda t: sin(pi * t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_2_1,l26cv,Active object,Programming Concepts,Concurrency,python,T2,Different Variable Names,"from time import time, sleep
from threading import Thread

class Calculator(Thread):
    'continuously integrate a function `func`, at each `period` seconds'
    def __init__(self, func=lambda x:0, period=1e-4):
        Thread.__init__(self)
        self.period  = period
        self.func   = func
        self.total   = 0.0
        self.__active = True
        self.start()

    def run(self):
        
        period = self.period
        start_time = time()
        time_old, value_old = 0, self.func(0)
        while self.__active:
            sleep(period)
            time_new = time() - start_time
            value_new = self.func(time_new)
            self.total += (value_new + value_old)*(time_new - time_old)/2.0
            time_old, value_old = time_new, value_new

    def join(self):
        self.__active = False
        Thread.join(self)

if __name__ == '__main__':
    from math import sin, pi

    instance = Calculator(lambda x: sin(pi*x))
    sleep(2)
    print(instance.total)
    instance.func = lambda x: 0
    sleep(0.5)
    print(instance.total)"
l26cv_2_2,l26cv,Active object,Programming Concepts,Concurrency,python,T2,Different Data Types,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    'continuously integrate a function `K`, at each `interval` seconds'
    def __init__(self, K=lambda t:0, interval=1e-4):
        Thread.__init__(self)
        self.interval  = float(interval)
        self.K   = K
        self.S   = float(0)
        self.__run = bool(True)
        self.start()

    def run(self):
        
        interval = self.interval
        start = time()
        t0, k0 = int(0), self.K(0)
        while self.__run:
            sleep(interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0)*(t1 - t0)/float(2)
            t0, k0 = t1, k1

    def join(self):
        self.__run = bool(False)
        Thread.join(self)

if __name__ == ""__main__"":
    from math import sin, pi

    ai = Integrator(lambda t: sin(pi*t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_2_3,l26cv,Active object,Programming Concepts,Concurrency,python,T2,Different Function Names,"from time import time, sleep
from threading import Thread

class Calculator(Thread):
    'continuously integrate a function `K`, at each `interval` seconds'
    def __init__(self, K=lambda t:0, interval=1e-4):
        Thread.__init__(self)
        self.interval  = interval
        self.K   = K
        self.S   = 0.0
        self.__run = True
        self.start()

    def run(self):
        
        interval = self.interval
        start = time()
        t0, k0 = 0, self.K(0)
        while self.__run:
            sleep(interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0)*(t1 - t0)/2.0
            t0, k0 = t1, k1

    def join(self):
        self.__run = False
        Thread.join(self)

if __name__ == '__main__':
    from math import sin, pi

    ai = Calculator(lambda t: sin(pi*t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_3_1,l26cv,Active object,Programming Concepts,Concurrency,python,T3,Added Statements,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    def __init__(self, K=lambda t:0, interval=1e-4):
        Thread.__init__(self)
        self.interval = interval
        self.K = K
        self.S = 0.0
        self.__run = True
        self.start()

    def run(self):
        interval = self.interval
        start_time = time()
        previous_time, previous_k = 0, self.K(0)
        while self.__run:
            sleep(interval)
            current_time = time() - start_time
            current_k = self.K(current_time)
            self.S += (current_k + previous_k) * (current_time - previous_time) / 2.0
            previous_time, previous_k = current_time, current_k

    def join(self):
        self.__run = False
        Thread.join(self)

if __name__ == ""__main__"":
    from math import sin, pi

    integrator_instance = Integrator(lambda t: sin(pi * t))
    sleep(2)
    print(integrator_instance.S)
    integrator_instance.K = lambda t: 0
    sleep(0.5)
    print(integrator_instance.S)"
l26cv_3_2,l26cv,Active object,Programming Concepts,Concurrency,python,T3,Removed Statements,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    def __init__(self, K=lambda t:0, interval=1e-4):
        Thread.__init__(self)
        self.interval = interval
        self.K = K
        self.S = 0.0
        self.__run = True
        self.start()

    def run(self):
        start = time()
        t0, k0 = 0, self.K(0)
        while self.__run:
            sleep(self.interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0) * (t1 - t0) / 2.0
            t0, k0 = t1, k1

    def join(self):
        self.__run = False
        Thread.join(self)

if __name__ == '__main__':
    from math import sin, pi

    ai = Integrator(lambda t: sin(pi*t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_3_3,l26cv,Active object,Programming Concepts,Concurrency,python,T3,Reordered Statements,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    def __init__(self, K=lambda t:0, interval=1e-4):
        Thread.__init__(self)
        self.K = K
        self.interval = interval
        self.S = 0.0
        self.__run = True
        self.start()

    def run(self):
        start = time()
        interval = self.interval
        t0, k0 = 0, self.K(0)
        while self.__run:
            sleep(interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0)*(t1 - t0)/2.0
            t0, k0 = t1, k1

    def join(self):
        self.__run = False
        Thread.join(self)

if __name__ == ""__main__"":
    from math import sin, pi

    ai = Integrator(lambda t: sin(pi*t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_3_4,l26cv,Active object,Programming Concepts,Concurrency,python,T3,Control Flow Modifications,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    def __init__(self, K=lambda t:0, interval=1e-4):
        super().__init__()
        self.interval  = interval
        self.K   = K
        self.S   = 0.0
        self.__run = True
        self.start()

    def run(self):
        interval = self.interval
        start = time()
        t0, k0 = 0, self.K(0)
        while True:
            if not self.__run:
                break
            sleep(interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0) * (t1 - t0) / 2.0
            t0, k0 = t1, k1

    def join(self):
        self.__run = False
        super().join()

if __name__ == ""__main__"":
    from math import sin, pi

    ai = Integrator(lambda t: sin(pi * t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_4_1,l26cv,Active object,Programming Concepts,Concurrency,python,T4,Same Language,"from time import time, sleep
from threading import Thread

class Integrator(Thread):
    def __init__(self, K=lambda t: 0, interval=1e-4):
        super().__init__()
        self.interval = interval
        self.K = K
        self.S = 0.0
        self.running = True
        self.start()

    def run(self):
        start = time()
        t0, k0 = 0, self.K(0)
        while self.running:
            sleep(self.interval)
            t1 = time() - start
            k1 = self.K(t1)
            self.S += (k1 + k0) * (t1 - t0) / 2.0
            t0, k0 = t1, k1

    def join(self):
        self.running = False
        super().join()

if __name__ == ""__main__"":
    from math import sin, pi

    ai = Integrator(lambda t: sin(pi * t))
    sleep(2)
    print(ai.S)
    ai.K = lambda t: 0
    sleep(0.5)
    print(ai.S)"
l26cv_4_2,l26cv,Active object,Programming Concepts,Concurrency,go,T4,Different Language,"package main

import (
    ""fmt""
    ""math""
    ""time""
)"
l26cv_4_2,l26cv,Active object,Programming Concepts,Concurrency,java,T4,Different Language,"public class Integrator {

    public interface Function {
        double apply(double timeSinceStartInSeconds);
    }

    private final long start;
    private volatile boolean running;

    private Function func;
    private double t0;
    private double v0;
    private double sum;

    public Integrator(Function func) {
        this.start = System.nanoTime();
        setFunc(func);
        new Thread(this::integrate).start();
    }

    public void setFunc(Function func) {
        this.func = func;
        v0 = func.apply(0.0);
        t0 = 0;
    }

    public double getOutput() {
        return sum;
    }

    public void stop() {
        running = false;
    }

    private void integrate() {
        running = true;
        while (running) {
            try {
                Thread.sleep(1);
                update();
            } catch (InterruptedException e) {
                return;
            }
        }
    }

    private void update() {
        double t1 = (System.nanoTime() - start) / 1.0e9;
        double v1 = func.apply(t1);
        double rect = (t1 - t0) * (v0 + v1) / 2;
        this.sum += rect;
        t0 = t1;
        v0 = v1;
    }

    public static void main(String[] args) throws InterruptedException {
        Integrator integrator = new Integrator(t -> Math.sin(Math.PI * t));
        Thread.sleep(2000);

        integrator.setFunc(t -> 0.0);
        Thread.sleep(500);

        integrator.stop();
        System.out.println(integrator.getOutput());
    }
}"
l26cv_4_2,l26cv,Active object,Programming Concepts,Concurrency,javascript,T4,Different Language,"function Integrator(sampleIntervalMS) {
    var inputF = function () { return 0.0 };
    var sum = 0.0;

    var t1 = new Date().getTime();
    var input1 = inputF(t1 / 1000);

    function update() {
        var t2 = new Date().getTime();
        var input2 = inputF(t2 / 1000);
        var dt = (t2 - t1) / 1000;

        sum += (input1 + input2) * dt / 2;

        t1 = t2;
        input1 = input2;
    }

    var updater = setInterval(update, sampleIntervalMS);

    return ({
        input: function (newF) { inputF = newF },
        output: function () { return sum },
        shutdown: function () { clearInterval(updater) },
    });
}"
4gv5k_1_1,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T1,Identical Clone,"class empty(object):
    pass
e = empty()"
4gv5k_1_2,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T1,Different Whitespaces,"class empty(object):
    pass
e=empty()"
4gv5k_1_3,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T1,Different Comments,"class empty(object):
    pass
e = empty()"
4gv5k_1_4,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T1,Different Formatting,"class empty(object):
    pass
e = empty()"
4gv5k_2_1,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T2,Different Variable Names,"class blank(object):
    pass
b = blank()"
4gv5k_2_2,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T2,Different Data Types,"class Empty:
    pass

e = Empty()"
4gv5k_2_3,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T2,Different Function Names,"class blank(object):
    pass
b = blank()"
4gv5k_3_1,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T3,Added Statements,"class EmptyClass(object):
    pass

instance_of_empty = EmptyClass()"
4gv5k_3_2,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T3,Removed Statements,"class empty: pass
e = empty()"
4gv5k_3_3,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T3,Reordered Statements,"class empty(object):
    pass
e = empty()"
4gv5k_3_4,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T3,Control Flow Modifications,"class Empty:
    pass
e = Empty()"
4gv5k_4_1,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,python,T4,Same Language,"class Empty:
    pass

e = Empty()"
4gv5k_4_2,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,go,T4,Different Language,"package main

import (
    ""bufio""
    ""fmt""
    ""log""
    ""os""
)

type SomeStruct struct {
    runtimeFields map[string]string
}

func check(err error) {
    if err != nil {
        log.Fatal(err)
    }
}

func main() {
    ss := SomeStruct{make(map[string]string)}
    scanner := bufio.NewScanner(os.Stdin)
    fmt.Println(""Create two fields at runtime: "")
    for i := 1; i <= 2; i++ {
        fmt.Printf(""  Field #%d:\n"", i)
        fmt.Print(""       Enter name : "")
        scanner.Scan()
        name := scanner.Text()
        fmt.Print(""       Enter value: "")
        scanner.Scan()
        value := scanner.Text()
        check(scanner.Err())
        ss.runtimeFields[name] = value
        fmt.Println()
    }
    for {
        fmt.Print(""Which field do you want to inspect? "")
        scanner.Scan()
        name := scanner.Text()
        check(scanner.Err())
        value, ok := ss.runtimeFields[name]
        if !ok {
            fmt.Println(""There is no field of that name, try again"")
        } else {
            fmt.Printf(""Its value is '%s'\n"", value)
            return
        }
    }
}"
4gv5k_4_2,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,javascript,T4,Different Language,e = {}
4gv5k_4_2,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,php,T4,Different Language,"class E {};

$e=new E();

$e->foo=1;

$e->{} = 1; 
$x = ;
$e->$x = 1;"
4gv5k_4_2,4gv5k,Add a variable to a class instance at runtime,Programming Concepts,Object-Oriented Programming,ruby,T4,Different Language,"class Empty
end

e = Empty.new
class << e
  attr_accessor:foo
end
e.foo = 1
puts e.foo  

f = Empty.new
f.foo = 1"
54vux_1_1,54vux,Additive primes,Mathematics,Number Theory,python,T1,Identical Clone,"def is_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n% 2 == 0 or n% 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n% i == 0 or n% (i + 2) == 0:
            return False
        i += 6
    return True

def digit_sum(n: int) -> int:
    sum = 0
    while n > 0:
        sum += n% 10
        n 
    return sum

def main() -> None:
    additive_primes = 0
    for i in range(2, 500):
        if is_prime(i) and is_prime(digit_sum(i)):
            additive_primes += 1
            print(i, end=)
    print(f)

if __name__ == :
    main()"
54vux_1_2,54vux,Additive primes,Mathematics,Number Theory,python,T1,Different Whitespaces,"def is_prime(n:int)->bool:
 if n<=3:
  return n>1
 if n%2==0 or n%3==0:
  return False
 i=5
 while i**2<=n:
  if n%i==0 or n%(i+2)==0:
   return False
  i+=6
 return True

def digit_sum(n:int)->int:
 sum=0
 while n>0:
  sum+=n%10
  n//=10
 return sum

def main()->None:
 additive_primes=0
 for i in range(2,500):
  if is_prime(i) and is_prime(digit_sum(i)):
   additive_primes+=1
   print(i,end=' ')
 print(additive_primes)

if __name__=='__main__':
 main()"
54vux_1_3,54vux,Additive primes,Mathematics,Number Theory,python,T1,Different Comments,"def is_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def digit_sum(n: int) -> int:
    total = 0
    while n > 0:
        total += n % 10
        n //= 10
    return total

def main() -> None:
    count_additive_primes = 0
    for i in range(2, 500):
        if is_prime(i) and is_prime(digit_sum(i)):
            count_additive_primes += 1
            print(i, end=' ')
    print(count_additive_primes)

if __name__ == ""__main__"":
    main()"
54vux_1_4,54vux,Additive primes,Mathematics,Number Theory,python,T1,Different Formatting,"def is_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def digit_sum(n: int) -> int:
    sum = 0
    while n > 0:
        sum += n % 10
        n //= 10
    return sum

def main() -> None:
    additive_primes = 0
    for i in range(2, 500):
        if is_prime(i) and is_prime(digit_sum(i)):
            additive_primes += 1
            print(i, end=' ')
    print()

if __name__ == '__main__':
    main()"
54vux_2_1,54vux,Additive primes,Mathematics,Number Theory,python,T2,Different Variable Names,"def is_prime(num: int) -> bool:
    if num <= 3:
        return num > 1
    if num % 2 == 0 or num % 3 == 0:
        return False
    index = 5
    while index ** 2 <= num:
        if num % index == 0 or num % (index + 2) == 0:
            return False
        index += 6
    return True

def digit_sum(value: int) -> int:
    total = 0
    while value > 0:
        total += value % 10
        value //= 10
    return total

def main() -> None:
    count = 0
    for number in range(2, 500):
        if is_prime(number) and is_prime(digit_sum(number)):
            count += 1
            print(number, end=' ')
    print(count)

if __name__ == '__main__':
    main()"
54vux_2_2,54vux,Additive primes,Mathematics,Number Theory,python,T2,Different Data Types,"def is_prime(n: float) -> bool:
    if n <= 3.0:
        return n > 1.0
    if n % 2.0 == 0.0 or n % 3.0 == 0.0:
        return False
    i = 5.0
    while i ** 2.0 <= n:
        if n % i == 0.0 or n % (i + 2.0) == 0.0:
            return False
        i += 6.0
    return True

def digit_sum(n: float) -> float:
    sum = 0.0
    while n > 0.0:
        sum += n % 10.0
        n 
    return sum

def main() -> None:
    additive_primes = 0.0
    for i in range(2, 500):
        if is_prime(float(i)) and is_prime(digit_sum(float(i))):
            additive_primes += 1.0
            print(i, end='')
    print(f)

if __name__ == '__main__':
    main()"
54vux_2_3,54vux,Additive primes,Mathematics,Number Theory,python,T2,Different Function Names,"def check_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def sum_of_digits(n: int) -> int:
    total = 0
    while n > 0:
        total += n % 10
        n //= 10
    return total

def execute() -> None:
    additive_primes_count = 0
    for i in range(2, 500):
        if check_prime(i) and check_prime(sum_of_digits(i)):
            additive_primes_count += 1
            print(i, end=' ')
    print(additive_primes_count)

if __name__ == '__main__':
    execute()"
54vux_3_1,54vux,Additive primes,Mathematics,Number Theory,python,T3,Added Statements,"def is_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def digit_sum(n: int) -> int:
    total = 0
    while n > 0:
        total += n % 10
        n //= 10
    return total

def main() -> None:
    additive_primes_count = 0
    for i in range(2, 500):
        if is_prime(i) and is_prime(digit_sum(i)):
            additive_primes_count += 1
            print(i, end=' ')
    print()

if __name__ == '__main__':
    main()"
54vux_3_2,54vux,Additive primes,Mathematics,Number Theory,python,T3,Removed Statements,"def is_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def digit_sum(n: int) -> int:
    sum = 0
    while n > 0:
        sum += n % 10
        n //= 10
    return sum

def main() -> None:
    additive_primes = 0
    for i in range(2, 500):
        if is_prime(i) and is_prime(digit_sum(i)):
            additive_primes += 1
            print(i, end=' ')
    print()

if __name__ == '__main__':
    main()"
54vux_3_3,54vux,Additive primes,Mathematics,Number Theory,python,T3,Reordered Statements,"def is_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def digit_sum(n: int) -> int:
    sum = 0
    while n > 0:
        sum += n % 10
        n //= 10
    return sum

def main() -> None:
    additive_primes = 0
    for i in range(2, 500):
        if is_prime(digit_sum(i)) and is_prime(i):
            additive_primes += 1
            print(i, end=' ')
    print(additive_primes)

if __name__ == '__main__':
    main()"
54vux_3_4,54vux,Additive primes,Mathematics,Number Theory,python,T3,Control Flow Modifications,"def is_prime(n: int) -> bool:
    if n <= 3:
        return n > 1
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def digit_sum(n: int) -> int:
    total_sum = 0
    while n > 0:
        total_sum += n % 10
        n //= 10
    return total_sum

def main() -> None:
    additive_primes = 0
    i = 2
    while i < 500:
        if is_prime(i) and is_prime(digit_sum(i)):
            additive_primes += 1
            print(i, end=' ')
        i += 1
    print(additive_primes)

if __name__ == ""__main__"":
    main()"
54vux_4_1,54vux,Additive primes,Mathematics,Number Theory,python,T4,Same Language,"def is_prime(n: int) -> bool:
    return n > 1 and (n == 2 or n == 3 or (n % 2 != 0 and n % 3 != 0 and all(n % i != 0 for i in range(5, int(n**0.5) + 1, 6))))

def digit_sum(n: int) -> int:
    return sum(int(digit) for digit in str(n))

def main() -> None:
    additive_primes = [i for i in range(2, 500) if is_prime(i) and is_prime(digit_sum(i))]
    for prime in additive_primes:
        print(prime, end=' ')
    print()

if __name__ == '__main__':
    main()"
54vux_4_2,54vux,Additive primes,Mathematics,Number Theory,go,T4,Different Language,"package main

import ""fmt""

func isPrime(n int) bool {
    switch {
    case n < 2:
        return false
    case n%2 == 0:
        return n == 2
    case n%3 == 0:
        return n == 3
    default:
        d := 5
        for d*d <= n {
            if n%d == 0 {
                return false
            }
            d += 2
            if n%d == 0 {
                return false
            }
            d += 4
        }
        return true
    }
}

func sumDigits(n int) int {
    sum := 0
    for n > 0 {
        sum += n % 10
        n /= 10
    }
    return sum
}

func main() {
    fmt.Println(""Additive primes less than 500:"")
    i := 2
    count := 0
    for {
        if isPrime(i) && isPrime(sumDigits(i)) {
            count++
            fmt.Printf(""%3d  "", i)
            if count%10 == 0 {
                fmt.Println()
            }
        }
        if i > 2 {
            i += 2
        } else {
            i++
        }
        if i > 499 {
            break
        }
    }
    fmt.Printf(""\n\n%d additive primes found.\n"", count)
}"
54vux_4_2,54vux,Additive primes,Mathematics,Number Theory,java,T4,Different Language,"public class additivePrimes {

    public static void main(String[] args) {
        int additive_primes = 0;
        for (int i = 2; i < 500; i++) {
            if(isPrime(i) && isPrime(digitSum(i))){
                additive_primes++;
                System.out.print(i + "" "");
            }
        }
        System.out.print(""\nFound "" + additive_primes + "" additive primes less than 500"");
    }

    static boolean isPrime(int n) {
        int counter = 1;
        if (n < 2 || (n != 2 && n % 2 == 0) || (n != 3 && n % 3 == 0)) {
            return false;
        }
        while (counter * 6 - 1 <= Math.sqrt(n)) {
            if (n % (counter * 6 - 1) == 0 || n % (counter * 6 + 1) == 0) {
                return false;
            } else {
                counter++;
            }
        }
        return true;
    }

    static int digitSum(int n) {
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        return sum;
    }
}"
54vux_4_2,54vux,Additive primes,Mathematics,Number Theory,ruby,T4,Different Language,"require 

additive_primes = Prime.lazy.select{|prime| prime.digits.sum.prime? }

N = 500
res = additive_primes.take_while{|n| n < N}.to_a
puts res.join()
puts"
9c3mf_1_1,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T1,Identical Clone,"foo = object()  
address = id(foo)"
9c3mf_1_2,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T1,Different Whitespaces,"foo=object()  
address=id(foo)"
9c3mf_1_3,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T1,Different Comments,"foo = object()  
address = id(foo)"
9c3mf_1_4,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T1,Different Formatting,"foo = object()  
address = id(foo)  "
9c3mf_2_1,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T2,Different Variable Names,"item = object()  
location = id(item)"
9c3mf_2_2,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T2,Different Data Types,"foo = {}  
address = hash(foo)"
9c3mf_2_3,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T2,Different Function Names,"bar = object()  
location = id(bar)"
9c3mf_3_1,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T3,Added Statements,"foo_instance = object()  
foo_address = id(foo_instance)"
9c3mf_3_2,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T3,Removed Statements,"foo = object()  
address = id(foo)"
9c3mf_3_3,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T3,Reordered Statements,"address = id(foo)  
foo = object()"
9c3mf_3_4,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T3,Control Flow Modifications,"foo = object()  
address = hex(id(foo))"
9c3mf_4_1,9c3mf,Address of a variable,Programming Concepts,Memory Management,python,T4,Same Language,address = id(object())
9c3mf_4_2,9c3mf,Address of a variable,Programming Concepts,Memory Management,go,T4,Different Language,"package main

import (
	""fmt""
	""unsafe""
)

func main() {
	myVar := 3.14
	myPointer := &myVar
	fmt.Println(""Address:"", myPointer, &myVar)
	fmt.Printf(""Address:%p%p\n"", myPointer, &myVar)

	var addr64 int64
	var addr32 int32
	ptr := unsafe.Pointer(myPointer)
	if unsafe.Sizeof(ptr) <= unsafe.Sizeof(addr64) {
		addr64 = int64(uintptr(ptr))
		fmt.Printf(""Pointer stored in   int64:%#016x\n"", addr64)
	}
	if unsafe.Sizeof(ptr) <= unsafe.Sizeof(addr32) {"
9c3mf_4_2,9c3mf,Address of a variable,Programming Concepts,Memory Management,java,T4,Different Language,"julia> x = [1, 2, 3]
julia> ptr = pointer_from_objref(x)
Ptr{Void} @0x000000010282e4a0
julia> unsafe_pointer_to_objref(ptr)
3-element Array{Int64,1}:
 1 
 2 
 3"
9c3mf_4_2,9c3mf,Address of a variable,Programming Concepts,Memory Management,ruby,T4,Different Language,">foo = Object.new  
>id = foo.object_id  
> % (id << 1)"
fz9de_1_1,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T1,Identical Clone,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def insert(self, val: int) -> Tree:
        return self._insert(val).make_black()

    def _insert(self, val: int) -> Tree:
        match compare(val, self.value):
            case _ if self == EMPTY:
                return Tree(Color.R, EMPTY, val, EMPTY)
            case -1:
                assert self.left is not None
                return Tree(
                    self.color, self.left._insert(val), self.value, self.right
                ).balance()
            case 1:
                assert self.right is not None
                return Tree(
                    self.color, self.left, self.value, self.right._insert(val)
                ).balance()
            case _:
                return self

    def balance(self) -> Tree:
        match self:
            case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case _:
                return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def __str__(self) -> str:
        if self == EMPTY:
            return 
        return f

    def print(self, indent: int = 0) -> None:
        if self != EMPTY:
            assert self.right is not None
            self.right.print(indent + 1)

        print(f)

        if self != EMPTY:
            assert self.left is not None
            self.left.print(indent + 1)


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    if x > y:
        return 1
    if x < y:
        return -1
    return 0


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(i)
    tree.print()


if __name__ == :
    main()"
fz9de_1_2,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T1,Different Whitespaces,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Optional

class Color(Enum):
 B = 0
 R = 1

class Tree(NamedTuple):
 color: Color
 left: Optional[Tree]
 value: int
 right: Optional[Tree]

 def insert(self, val: int) -> Tree:
  return self._insert(val).make_black()

 def _insert(self, val: int) -> Tree:
  match compare(val, self.value):
   case _ if self == EMPTY:
    return Tree(Color.R, EMPTY, val, EMPTY)
   case -1:
    assert self.left is not None
    return Tree(
     self.color, self.left._insert(val), self.value, self.right
    ).balance()
   case 1:
    assert self.right is not None
    return Tree(
     self.color, self.left, self.value, self.right._insert(val)
    ).balance()
   case _:
    return self

 def balance(self) -> Tree:
  match self:
   case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
    return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
   case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
    return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
   case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
    return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
   case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
    return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
   case _:
    return self

 def make_black(self) -> Tree:
  return self._replace(color=Color.B)

 def __str__(self) -> str:
  if self == EMPTY:
   return 
  return f
  
 def print(self, indent: int = 0) -> None:
  if self != EMPTY:
   assert self.right is not None
   self.right.print(indent + 1)

  print(f)

  if self != EMPTY:
   assert self.left is not None
   self.left.print(indent + 1)

EMPTY = Tree(Color.B, None, 0, None)

def compare(x: int, y: int) -> int:
 if x > y:
  return 1
 if x < y:
  return -1
 return 0

def main():
 tree = EMPTY
 for i in range(1, 17):
  tree = tree.insert(i)
 tree.print()

if __name__ == __main__:
 main()"
fz9de_1_3,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T1,Different Comments,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def insert(self, val: int) -> Tree:
        return self._insert(val).make_black()

    def _insert(self, val: int) -> Tree:
        match compare(val, self.value):
            case _ if self == EMPTY:
                return Tree(Color.R, EMPTY, val, EMPTY)
            case -1:
                assert self.left is not None
                return Tree(
                    self.color, self.left._insert(val), self.value, self.right
                ).balance()
            case 1:
                assert self.right is not None
                return Tree(
                    self.color, self.left, self.value, self.right._insert(val)
                ).balance()
            case _:
                return self

    def balance(self) -> Tree:
        match self:
            case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case _:
                return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def __str__(self) -> str:
        if self == EMPTY:
            return 
        return f

    def print(self, indent: int = 0) -> None:
        if self != EMPTY:
            assert self.right is not None
            self.right.print(indent + 1)

        print(f)

        if self != EMPTY:
            assert self.left is not None
            self.left.print(indent + 1)


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    if x > y:
        return 1
    if x < y:
        return -1
    return 0


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(i)
    tree.print()


if __name__ == ""__main__"":
    main()"
fz9de_1_4,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T1,Different Formatting,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple, Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def insert(self, val: int) -> Tree:
        return self._insert(val).make_black()

    def _insert(self, val: int) -> Tree:
        match compare(val, self.value):
            case _ if self == EMPTY:
                return Tree(Color.R, EMPTY, val, EMPTY)
            case -1:
                assert self.left is not None
                return Tree(self.color, self.left._insert(val), self.value, self.right).balance()
            case 1:
                assert self.right is not None
                return Tree(self.color, self.left, self.value, self.right._insert(val)).balance()
            case _:
                return self

    def balance(self) -> Tree:
        match self:
            case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case _:
                return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def __str__(self) -> str:
        if self == EMPTY:
            return 
        return f

    def print(self, indent: int = 0) -> None:
        if self != EMPTY:
            assert self.right is not None
            self.right.print(indent + 1)

        print(f)

        if self != EMPTY:
            assert self.left is not None
            self.left.print(indent + 1)


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    if x > y:
        return 1
    if x < y:
        return -1
    return 0


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(i)
    tree.print()


if __name__ == ""__main__"":
    main()"
fz9de_2_1,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T2,Different Variable Names,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Optional


class Shade(Enum):
    BLUE = 0
    RED = 1


class Node(NamedTuple):
    shade: Shade
    left_child: Optional[Node]
    key: int
    right_child: Optional[Node]

    def add(self, num: int) -> Node:
        return self._add(num).turn_black()

    def _add(self, num: int) -> Node:
        match compare(num, self.key):
            case _ if self == VOID:
                return Node(Shade.RED, VOID, num, VOID)
            case -1:
                assert self.left_child is not None
                return Node(
                    self.shade, self.left_child._add(num), self.key, self.right_child
                ).balance_tree()
            case 1:
                assert self.right_child is not None
                return Node(
                    self.shade, self.left_child, self.key, self.right_child._add(num)
                ).balance_tree()
            case _:
                return self

    def balance_tree(self) -> Node:
        match self:
            case (Shade.BLUE, (Shade.RED, (Shade.RED, a, x, b), y, c), z, d):
                return Node(Shade.RED, Node(Shade.BLUE, a, x, b), y, Node(Shade.BLUE, c, z, d))
            case (Shade.BLUE, (Shade.RED, a, x, (Shade.RED, b, y, c)), z, d):
                return Node(Shade.RED, Node(Shade.BLUE, a, x, b), y, Node(Shade.BLUE, c, z, d))
            case (Shade.BLUE, a, x, (Shade.RED, (Shade.RED, b, y, c), z, d)):
                return Node(Shade.RED, Node(Shade.BLUE, a, x, b), y, Node(Shade.BLUE, c, z, d))
            case (Shade.BLUE, a, x, (Shade.RED, b, y, (Shade.RED, c, z, d))):
                return Node(Shade.RED, Node(Shade.BLUE, a, x, b), y, Node(Shade.BLUE, c, z, d))
            case _:
                return self

    def turn_black(self) -> Node:
        return self._replace(shade=Shade.BLUE)

    def __str__(self) -> str:
        if self == VOID:
            return 
        return f

    def display(self, space: int = 0) -> None:
        if self != VOID:
            assert self.right_child is not None
            self.right_child.display(space + 1)

        print(f)

        if self != VOID:
            assert self.left_child is not None
            self.left_child.display(space + 1)


VOID = Node(Shade.BLUE, None, 0, None)


def compare(a: int, b: int) -> int:
    if a > b:
        return 1
    if a < b:
        return -1
    return 0


def main():
    tree = VOID
    for i in range(1, 17):
        tree = tree.add(i)
    tree.display()


if __name__ == '__main__':
    main()"
fz9de_2_2,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T2,Different Data Types,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Union


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Union[Tree, None]
    value: float
    right: Union[Tree, None]

    def insert(self, val: float) -> Tree:
        return self._insert(val).make_black()

    def _insert(self, val: float) -> Tree:
        match compare(val, self.value):
            case _ if self == EMPTY:
                return Tree(Color.R, EMPTY, val, EMPTY)
            case -1:
                assert self.left is not None
                return Tree(
                    self.color, self.left._insert(val), self.value, self.right
                ).balance()
            case 1:
                assert self.right is not None
                return Tree(
                    self.color, self.left, self.value, self.right._insert(val)
                ).balance()
            case _:
                return self

    def balance(self) -> Tree:
        match self:
            case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case _:
                return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def __str__(self) -> str:
        if self == EMPTY:
            return 
        return f

    def print(self, indent: int = 0) -> None:
        if self != EMPTY:
            assert self.right is not None
            self.right.print(indent + 1)

        print(f)

        if self != EMPTY:
            assert self.left is not None
            self.left.print(indent + 1)


EMPTY = Tree(Color.B, None, 0.0, None)


def compare(x: float, y: float) -> int:
    if x > y:
        return 1
    if x < y:
        return -1
    return 0


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(float(i))
    tree.print()


if __name__ == '__main__':
    main()"
fz9de_2_3,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T2,Different Function Names,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def add(self, val: int) -> Tree:
        return self._add(val).make_black()

    def _add(self, val: int) -> Tree:
        match compare(val, self.value):
            case _ if self == EMPTY:
                return Tree(Color.R, EMPTY, val, EMPTY)
            case -1:
                assert self.left is not None
                return Tree(
                    self.color, self.left._add(val), self.value, self.right
                ).rebalance()
            case 1:
                assert self.right is not None
                return Tree(
                    self.color, self.left, self.value, self.right._add(val)
                ).rebalance()
            case _:
                return self

    def rebalance(self) -> Tree:
        match self:
            case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case _:
                return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def __str__(self) -> str:
        if self == EMPTY:
            return 
        return f

    def display(self, indent: int = 0) -> None:
        if self != EMPTY:
            assert self.right is not None
            self.right.display(indent + 1)

        print(f)

        if self != EMPTY:
            assert self.left is not None
            self.left.display(indent + 1)


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    if x > y:
        return 1
    if x < y:
        return -1
    return 0


def run():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.add(i)
    tree.display()


if __name__ == '__main__':
    run()"
fz9de_3_1,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T3,Added Statements,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def insert(self, val: int) -> Tree:
        new_tree = self._insert(val)
        return new_tree.make_black()

    def _insert(self, val: int) -> Tree:
        result = compare(val, self.value)
        match result:
            case _ if self == EMPTY:
                return Tree(Color.R, EMPTY, val, EMPTY)
            case -1:
                assert self.left is not None
                updated_tree = self.left._insert(val)
                return Tree(
                    self.color, updated_tree, self.value, self.right
                ).balance()
            case 1:
                assert self.right is not None
                updated_tree = self.right._insert(val)
                return Tree(
                    self.color, self.left, self.value, updated_tree
                ).balance()
            case _:
                return self

    def balance(self) -> Tree:
        match self:
            case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case _:
                return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def __str__(self) -> str:
        if self == EMPTY:
            return """"
        return f""{self.value}""

    def print(self, indent: int = 0) -> None:
        if self != EMPTY:
            assert self.right is not None
            self.right.print(indent + 1)

        print("" "" * (indent * 4) + str(self))

        if self != EMPTY:
            assert self.left is not None
            self.left.print(indent + 1)


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    if x > y:
        return 1
    if x < y:
        return -1
    return 0


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(i)
    tree.print()


if __name__ == ""__main__"":
    main()"
fz9de_3_2,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T3,Removed Statements,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple, Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def insert(self, val: int) -> Tree:
        return self._insert(val).make_black()

    def _insert(self, val: int) -> Tree:
        match compare(val, self.value):
            case _ if self == EMPTY:
                return Tree(Color.R, EMPTY, val, EMPTY)
            case -1:
                return Tree(self.color, self.left._insert(val), self.value, self.right).balance()
            case 1:
                return Tree(self.color, self.left, self.value, self.right._insert(val)).balance()
            case _:
                return self

    def balance(self) -> Tree:
        match self:
            case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case _:
                return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def print(self, indent: int = 0) -> None:
        if self.right is not None:
            self.right.print(indent + 1)
        print(self)
        if self.left is not None:
            self.left.print(indent + 1)


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    return (x > y) - (x < y)


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(i)
    tree.print()


if __name__ == ""__main__"":
    main()"
fz9de_3_3,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T3,Reordered Statements,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def insert(self, val: int) -> Tree:
        return self._insert(val).make_black()

    def _insert(self, val: int) -> Tree:
        match compare(val, self.value):
            case _ if self == EMPTY:
                return Tree(Color.R, EMPTY, val, EMPTY)
            case -1:
                assert self.left is not None
                return Tree(
                    self.color, self.left._insert(val), self.value, self.right
                ).balance()
            case 1:
                assert self.right is not None
                return Tree(
                    self.color, self.left, self.value, self.right._insert(val)
                ).balance()
            case _:
                return self

    def balance(self) -> Tree:
        match self:
            case (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
                return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
            case _:
                return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def print(self, indent: int = 0) -> None:
        if self != EMPTY:
            assert self.right is not None
            self.right.print(indent + 1)

        print(f)

        if self != EMPTY:
            assert self.left is not None
            self.left.print(indent + 1)

    def __str__(self) -> str:
        if self == EMPTY:
            return 
        return f


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    if x > y:
        return 1
    if x < y:
        return -1
    return 0


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(i)
    tree.print()


if __name__ == '__main__':
    main()"
fz9de_3_4,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T3,Control Flow Modifications,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple
from typing import Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def insert(self, val: int) -> Tree:
        new_tree = self._insert(val)
        return new_tree.make_black()

    def _insert(self, val: int) -> Tree:
        result = compare(val, self.value)
        if result == -1:
            if self.left is not None:
                return Tree(
                    self.color, self.left._insert(val), self.value, self.right
                ).balance()
            else:
                return Tree(Color.R, EMPTY, val, EMPTY)
        elif result == 1:
            if self.right is not None:
                return Tree(
                    self.color, self.left, self.value, self.right._insert(val)
                ).balance()
        return self

    def balance(self) -> Tree:
        if self.color == Color.B:
            if isinstance(self.left, Tree) and self.left.color == Color.R:
                if isinstance(self.left.left, Tree) and self.left.left.color == Color.R:
                    return Tree(Color.R, Tree(Color.B, self.left.left, self.left.value, self.left.right), self.value, self.right)
                if isinstance(self.left.right, Tree) and self.left.right.color == Color.R:
                    return Tree(Color.R, Tree(Color.B, self.left, self.left.value, self.left.right.left), self.left.right.value, Tree(Color.B, self.left.right.right, self.value, self.right))
            if isinstance(self.right, Tree) and self.right.color == Color.R:
                if isinstance(self.right.right, Tree) and self.right.right.color == Color.R:
                    return Tree(Color.R, self.left, self.value, Tree(Color.B, self.right.right, self.right.value, self.right.left))
                if isinstance(self.right.left, Tree) and self.right.left.color == Color.R:
                    return Tree(Color.R, self.left, self.right.left.value, Tree(Color.B, self.right.left.left, self.value, self.right.right))
        return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def __str__(self) -> str:
        return str(self.value) if self != EMPTY else ''

    def print(self, indent: int = 0) -> None:
        if self.right is not None and self != EMPTY:
            self.right.print(indent + 1)
        print(' ' * indent + str(self))
        if self.left is not None and self != EMPTY:
            self.left.print(indent + 1)


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    return (x > y) - (x < y)


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(i)
    tree.print()


if __name__ == ""__main__"":
    main()"
fz9de_4_1,fz9de,Algebraic data types,Programming Concepts,Data Structures,python,T4,Same Language,"from __future__ import annotations
from enum import Enum
from typing import NamedTuple, Optional


class Color(Enum):
    B = 0
    R = 1


class Tree(NamedTuple):
    color: Color
    left: Optional[Tree]
    value: int
    right: Optional[Tree]

    def insert(self, val: int) -> Tree:
        return self._insert(val).make_black()

    def _insert(self, val: int) -> Tree:
        comparison = compare(val, self.value)
        if self == EMPTY:
            return Tree(Color.R, EMPTY, val, EMPTY)
        if comparison == -1:
            assert self.left is not None
            return Tree(self.color, self.left._insert(val), self.value, self.right).balance()
        if comparison == 1:
            assert self.right is not None
            return Tree(self.color, self.left, self.value, self.right._insert(val)).balance()
        return self

    def balance(self) -> Tree:
        pattern = (self.color, self.left, self.value, self.right)
        if pattern == (Color.B, (Color.R, (Color.R, a, x, b), y, c), z, d):
            return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
        if pattern == (Color.B, (Color.R, a, x, (Color.R, b, y, c)), z, d):
            return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
        if pattern == (Color.B, a, x, (Color.R, (Color.R, b, y, c), z, d)):
            return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
        if pattern == (Color.B, a, x, (Color.R, b, y, (Color.R, c, z, d))):
            return Tree(Color.R, Tree(Color.B, a, x, b), y, Tree(Color.B, c, z, d))
        return self

    def make_black(self) -> Tree:
        return self._replace(color=Color.B)

    def __str__(self) -> str:
        if self == EMPTY:
            return """"
        return str(self.value)

    def print(self, indent: int = 0) -> None:
        if self != EMPTY:
            assert self.right is not None
            self.right.print(indent + 1)
        print("" "" * indent + str(self.value))
        if self != EMPTY:
            assert self.left is not None
            self.left.print(indent + 1)


EMPTY = Tree(Color.B, None, 0, None)


def compare(x: int, y: int) -> int:
    return (x > y) - (x < y)


def main():
    tree = EMPTY
    for i in range(1, 17):
        tree = tree.insert(i)
    tree.print()


if __name__ == ""__main__"":
    main()"
fz9de_4_2,fz9de,Algebraic data types,Programming Concepts,Data Structures,go,T4,Different Language,"package main

import ""fmt""

type Color string

const (
    R Color = ""R""
    B       = ""B""
)

type Tree interface {
    ins(x int) Tree
}

type E struct{}

func (_ E) ins(x int) Tree {
    return T{R, E{}, x, E{}}
}

func (_ E) String() string {
    return ""E""
}

type T struct {
    cl Color
    le Tree
    aa int
    ri Tree
}

func (t T) balance() Tree {
    if t.cl != B {
        return t
    }
    le, leIsT := t.le.(T)
    ri, riIsT := t.ri.(T)
    var lele, leri, rile, riri T
    var leleIsT, leriIsT, rileIsT, ririIsT bool
    if leIsT {
        lele, leleIsT = le.le.(T)
    }
    if leIsT {
        leri, leriIsT = le.ri.(T)
    }
    if riIsT {
        rile, rileIsT = ri.le.(T)
    }
    if riIsT {
        riri, ririIsT = ri.ri.(T)
    }
    switch {
    case leIsT && leleIsT && le.cl == R && lele.cl == R:
        _, t2, z, d := t.destruct()
        _, t3, y, c := t2.(T).destruct()
        _, a, x, b := t3.(T).destruct()
        return T{R, T{B, a, x, b}, y, T{B, c, z, d}}
    case leIsT && leriIsT && le.cl == R && leri.cl == R:
        _, t2, z, d := t.destruct()
        _, a, x, t3 := t2.(T).destruct()
        _, b, y, c := t3.(T).destruct()
        return T{R, T{B, a, x, b}, y, T{B, c, z, d}}
    case riIsT && rileIsT && ri.cl == R && rile.cl == R:
        _, a, x, t2 := t.destruct()
        _, t3, z, d := t2.(T).destruct()
        _, b, y, c := t3.(T).destruct()
        return T{R, T{B, a, x, b}, y, T{B, c, z, d}}
    case riIsT && ririIsT && ri.cl == R && riri.cl == R:
        _, a, x, t2 := t.destruct()
        _, b, y, t3 := t2.(T).destruct()
        _, c, z, d := t3.(T).destruct()
        return T{R, T{B, a, x, b}, y, T{B, c, z, d}}
    default:
        return t
    }
}

func (t T) ins(x int) Tree {
    switch {
    case x < t.aa:
        return T{t.cl, t.le.ins(x), t.aa, t.ri}.balance()
    case x > t.aa:
        return T{t.cl, t.le, t.aa, t.ri.ins(x)}.balance()
    default:
        return t
    }
}

func (t T) destruct() (Color, Tree, int, Tree) {
    return t.cl, t.le, t.aa, t.ri
}

func (t T) String() string {
    return fmt.Sprintf(""T(%s,%v,%d,%v)"", t.cl, t.le, t.aa, t.ri)
}

func insert(tr Tree, x int) Tree {
    t := tr.ins(x)
    switch t.(type) {
    case T:
        tt := t.(T)
        _, a, y, b := tt.destruct()
        return T{B, a, y, b}
    case E:
        return E{}
    default:
        return nil
    }
}

func main() {
    var tr Tree = E{}
    for i := 1; i <= 16; i++ {
        tr = insert(tr, i)
    }
    fmt.Println(tr)
}"
ymi6q_1_1,ymi6q,Align columns,Programming Concepts,Text Processing,python,T1,Identical Clone,"from itertools import zip_longest

txt = 

parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) 
          for col in zip_longest(*parts, fillvalue='')]

for justify in .split():
    j, jtext = justify.split('_')
    print(f)
    for line in parts:
        print(' '.join(f for wdth, wrd in zip(widths, line)))
    print( * 52)"
ymi6q_1_2,ymi6q,Align columns,Programming Concepts,Text Processing,python,T1,Different Whitespaces,"from itertools import zip_longest

txt=

parts=[line.rstrip().split()for line in txt.splitlines()]
widths=[max(len(word)for word in col)for col in zip_longest(*parts,fillvalue='')]

for justify in .split():
 j,jtext=justify.split('_')
 print(f)
 for line in parts:
  print(' '.join(f for wdth,wrd in zip(widths,line)))
 print(*52)"
ymi6q_1_3,ymi6q,Align columns,Programming Concepts,Text Processing,python,T1,Different Comments,"from itertools import zip_longest

txt = 

parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) 
          for col in zip_longest(*parts, fillvalue='')]

for justify in .split():
    j, jtext = justify.split('_')
    print(f)
    for line in parts:
        print(' '.join(f for wdth, wrd in zip(widths, line)))
    print( * 52)"
ymi6q_1_4,ymi6q,Align columns,Programming Concepts,Text Processing,python,T1,Different Formatting,"from itertools import zip_longest
txt = 
parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) for col in zip_longest(*parts, fillvalue='')]
for justify in .split():
    j, jtext = justify.split('_')
    print(f)
    for line in parts:
        print(' '.join(f for wdth, wrd in zip(widths, line)))
    print(*52)"
ymi6q_2_1,ymi6q,Align columns,Programming Concepts,Text Processing,python,T2,Different Variable Names,"from itertools import zip_longest

input_data = 

segments = [row.rstrip().split() for row in input_data.splitlines()]
column_widths = [max(len(term) for term in group) 
                  for group in zip_longest(*segments, fillvalue='')]

for align in .split():
    alignment, aligned_text = align.split('_')
    print(f)
    for row in segments:
        print(' '.join(f for width, term in zip(column_widths, row)))
    print( * 52)"
ymi6q_2_2,ymi6q,Align columns,Programming Concepts,Text Processing,python,T2,Different Data Types,"from itertools import zip_longest

txt = 

parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) 
          for col in zip_longest(*parts, fillvalue='')]

for justify in str.split():
    j, jtext = str.split(justify, '_')
    print(str.f)
    for line in parts:
        print(' '.join(str(f) for wdth, wrd in zip(widths, line)))
    print(*[52])"
ymi6q_2_3,ymi6q,Align columns,Programming Concepts,Text Processing,python,T2,Different Function Names,"from itertools import zip_longest

txt = 

parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) 
          for col in zip_longest(*parts, fillvalue='')]

for align in .split():
    j, jtext = align.split('_')
    print(f)
    for line in parts:
        print(' '.join(f for wdth, wrd in zip(widths, line)))
    print( * 52)"
ymi6q_3_1,ymi6q,Align columns,Programming Concepts,Text Processing,python,T3,Added Statements,"from itertools import zip_longest

txt = 

parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) 
          for col in zip_longest(*parts, fillvalue='')]

justify_options = .split()
for justify in justify_options:
    j, jtext = justify.split('_')
    for line in parts:
        formatted_line = ' '.join(f'{wrd:<{wdth}}' for wdth, wrd in zip(widths, line))
        print(formatted_line)
    print('*' * 52)"
ymi6q_3_2,ymi6q,Align columns,Programming Concepts,Text Processing,python,T3,Removed Statements,"from itertools import zip_longest

txt = 

parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) for col in zip_longest(*parts, fillvalue='')]

for justify in .split():
    for line in parts:
        print(' '.join(f for wdth, wrd in zip(widths, line)))"
ymi6q_3_3,ymi6q,Align columns,Programming Concepts,Text Processing,python,T3,Reordered Statements,"from itertools import zip_longest

txt = 

parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) 
          for col in zip_longest(*parts, fillvalue='')]

for line in parts:
    print(' '.join(f for wdth, wrd in zip(widths, line)))
for justify in .split():
    j, jtext = justify.split('_')
    print(f)
print( * 52)"
ymi6q_3_4,ymi6q,Align columns,Programming Concepts,Text Processing,python,T3,Control Flow Modifications,"from itertools import zip_longest

txt = 

parts = [line.rstrip().split() for line in txt.splitlines()]
widths = [max(len(word) for word in col) 
          for col in zip_longest(*parts, fillvalue='')]

justifies = .split()
for justify in justifies:
    j, jtext = justify.split('_')
    print(f)
    for line in parts:
        joined_line = ' '.join(f for wdth, wrd in zip(widths, line))
        print(joined_line)
    print(*52)"
ymi6q_4_1,ymi6q,Align columns,Programming Concepts,Text Processing,python,T4,Same Language,"from itertools import zip_longest

txt = 

def get_parts_and_widths(text):
    parts = [line.rstrip().split() for line in text.splitlines()]
    widths = [max(len(word) for word in col) for col in zip_longest(*parts, fillvalue='')]
    return parts, widths

def justify_lines(parts, widths, justify_info):
    for justify in justify_info.split():
        j, jtext = justify.split('_')
        print(f)
        for line in parts:
            print(' '.join(wrd.ljust(wdth) for wdth, wrd in zip(widths, line)))
        print(*52)

parts, widths = get_parts_and_widths(txt)
justify_lines(parts, widths, .split())"
ymi6q_4_2,ymi6q,Align columns,Programming Concepts,Text Processing,go,T4,Different Language,"package main

import (
    ""fmt""
    ""strings""
)

const text = `Given$a$text$file$of$many$lines,$where$fields$within$a$line$
are$delineated$by$a$single$'dollar'$character,$write$a$program
that$aligns$each$column$of$fields$by$ensuring$that$words$in$each$
column$are$separated$by$at$least$one$space.
Further,$allow$for$each$word$in$a$column$to$be$either$left$
justified,$right$justified,$or$center$justified$within$its$column.`

type formatter struct {
    text  [][]string
    width []int
}

func newFormatter(text string) *formatter {
    var f formatter
    for _, line := range strings.Split(text, ""\n"") {
        words := strings.Split(line, ""$"")
        for words[len(words)-1] == """" {
            words = words[:len(words)-1]
        }
        f.text = append(f.text, words)
        for i, word := range words {
            if i == len(f.width) {
                f.width = append(f.width, len(word))
            } else if len(word) > f.width[i] {
                f.width[i] = len(word)
            }
        }
    }
    return &f
}

const (
    left = iota
    middle
    right
)

func (f formatter) print(j int) {
    for _, line := range f.text {
        for i, word := range line {
            fmt.Printf(""%-*s "", f.width[i], fmt.Sprintf(""%*s"",
                len(word)+(f.width[i]-len(word))*j/2, word))
        }
        fmt.Println("""")
    }
    fmt.Println("""")
}

func main() {
    f := newFormatter(text)
    f.print(left)
    f.print(middle)
    f.print(right)
}"
ymi6q_4_2,ymi6q,Align columns,Programming Concepts,Text Processing,java,T4,Different Language,"import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;


public class ColumnAligner {
    private List<String[]> words = new ArrayList<>();
    private int columns = 0;
    private List<Integer> columnWidths = new ArrayList<>();

    
    public ColumnAligner(String s) {
        String[] lines = s.split(""\\n"");
        for (String line : lines) {
            processInputLine(line);
        }
    }

    
    public ColumnAligner(List<String> lines) {
        for (String line : lines) {
            processInputLine(line);
        }
    }

    private void processInputLine(String line) {
        String[] lineWords = line.split(""\\$"");
        words.add(lineWords);
        columns = Math.max(columns, lineWords.length);
        for (int i = 0; i < lineWords.length; i++) {
            String word = lineWords[i];
            if (i >= columnWidths.size()) {
                columnWidths.add(word.length());
            } else {
                columnWidths.set(i, Math.max(columnWidths.get(i), word.length()));
            }
        }
    }

    interface AlignFunction {
        String align(String s, int length);
    }

    
    public String alignLeft() {
        return align(new AlignFunction() {
            @Override
            public String align(String s, int length) {
                return StringUtils.rightPad(s, length);
            }
        });
    }

    
    public String alignRight() {
        return align(new AlignFunction() {
            @Override
            public String align(String s, int length) {
                return StringUtils.leftPad(s, length);
            }
        });
    }

    
    public String alignCenter() {
        return align(new AlignFunction() {
            @Override
            public String align(String s, int length) {
                return StringUtils.center(s, length);
            }
        });
    }

    private String align(AlignFunction a) {
        StringBuilder result = new StringBuilder();
        for (String[] lineWords : words) {
            for (int i = 0; i < lineWords.length; i++) {
                String word = lineWords[i];
                if (i == 0) {
                    result.append(""|"");
                }
                result.append(a.align(word, columnWidths.get(i)) + ""|"");
            }
            result.append(""\n"");
        }
        return result.toString();
    }

    public static void main(String args[]) throws IOException {
        if (args.length < 1) {
            System.out.println(""Usage: ColumnAligner file [left|right|center]"");
            return;
        }
        String filePath = args[0];
        String alignment = ""left"";
        if (args.length >= 2) {
            alignment = args[1];
        }
        ColumnAligner ca = new ColumnAligner(Files.readAllLines(Paths.get(filePath), StandardCharsets.UTF_8));
        switch (alignment) {
        case ""left"":
            System.out.print(ca.alignLeft());
            break;
        case ""right"":
            System.out.print(ca.alignRight());
            break;
        case ""center"":
            System.out.print(ca.alignCenter());
            break;
        default:
            System.err.println(String.format(""Error! Unknown alignment: '%s'"", alignment));
            break;
        }
    }
}"
ymi6q_4_2,ymi6q,Align columns,Programming Concepts,Text Processing,javascript,T4,Different Language,"var justification=""center"",
input=[""Given$a$text$file$of$many$lines,$where$fields$within$a$line$"",
""are$delineated$by$a$single$'dollar'$character,$write$a$program"",
""that$aligns$each$column$of$fields$by$ensuring$that$words$in$each$"",
""column$are$separated$by$at$least$one$space."",
""Further,$allow$for$each$word$in$a$column$to$be$either$left$"",
""justified,$right$justified,$or$center$justified$within$its$column.""],
x,y,cols,max,cols=0,diff,left,right

String.prototype.repeat=function(n){return new Array(1 + parseInt(n)).join(this);}

for(x=0;x<input.length;x++) {
 input[x]=input[x].split(""$"");
 if(input[x].length>cols) cols=input[x].length;
}
for(x=0;x<cols;x++) {
 max=0;
 for(y=0;y<input.length;y++) if(input[y][x]&&max<input[y][x].length) max=input[y][x].length;
 for(y=0;y<input.length;y++) 
  if(input[y][x]) {
   diff=(max-input[y][x].length)/2;
   left="" "".repeat(Math.floor(diff));
   right="" "".repeat(Math.ceil(diff));
   if(justification==""left"") {right+=left;left=""""}
   if(justification==""right"") {left+=right;right=""""}
   input[y][x]=left+input[y][x]+right;
  }
}
for(x=0;x<input.length;x++) input[x]=input[x].join("" "");
input=input.join(""\n"");
document.write(input);"
ymi6q_4_2,ymi6q,Align columns,Programming Concepts,Text Processing,php,T4,Different Language,"<?php
$j2justtype = array('L' => STR_PAD_RIGHT,
                    'R' => STR_PAD_LEFT,
                    'C' => STR_PAD_BOTH);


function aligner($str, $justification = 'L') {
  global $j2justtype;
  assert(array_key_exists($justification, $j2justtype));
  $justtype = $j2justtype[$justification];

  $fieldsbyrow = array();
  foreach (explode(, $str) as $line)
    $fieldsbyrow[] = explode('$', $line);
  $maxfields = max(array_map('count', $fieldsbyrow));

  foreach (range(0, $maxfields - 1) as $col) {
    $maxwidth = 0;
    foreach ($fieldsbyrow as $fields)
      $maxwidth = max($maxwidth, strlen(array_key_exists($col, $fields)? $fields[$col] : 0));
    foreach ($fieldsbyrow as &$fields)
      $fields[$col] = str_pad(array_key_exists($col, $fields)? $fields[$col] : , $maxwidth, ' ', $justtype);
    unset($fields); 
  }
  $result = '';
  foreach ($fieldsbyrow as $fields)
    $result .= implode(' ', $fields) . ;
  return $result;
}

$textinfile = 'Given$a$text$file$of$many$lines,$where$fields$within$a$line$
are$delineated$by$a$single$\'dollar\'$character,$write$a$program
that$aligns$each$column$of$fields$by$ensuring$that$words$in$each$
column$are$separated$by$at$least$one$space.
Further,$allow$for$each$word$in$a$column$to$be$either$left$
justified,$right$justified,$or$center$justified$within$its$column.';

foreach (array('L', 'R', 'C') as $j)
  echo aligner($textinfile, $j);

?>"
ymi6q_4_2,ymi6q,Align columns,Programming Concepts,Text Processing,ruby,T4,Different Language,"J2justifier = {Left: :ljust, Right: :rjust, Center: :center}

=begin
Justify columns of textual tabular input where the record separator is the newline
and the field separator is a 'dollar' character.
justification can be Symbol; (:Left,:Right, or:Center).

Return the justified output as a string
=end
def aligner(infile, justification = :Left)
  fieldsbyrow = infile.map {|line| line.strip.split('$')}
  
  maxfields = fieldsbyrow.map(&:length).max
  fieldsbyrow.map! {|row| row + ['']*(maxfields - row.length)}
  
  colwidths = fieldsbyrow.transpose.map {|column|
    column.map(&:length).max
  }
  
  justifier = J2justifier[justification]
  fieldsbyrow.map {|row|
    row.zip(colwidths).map {|field, width|
      field.send(justifier, width)
    }.join()
  }.join()
end

require 'stringio'

textinfile = <<END
Given$a$text$file$of$many$lines,$where$fields$within$a$line$
are$delineated$by$a$single$'dollar'$character,$write$a$program
that$aligns$each$column$of$fields$by$ensuring$that$words$in$each$
column$are$separated$by$at$least$one$space.
Further,$allow$for$each$word$in$a$column$to$be$either$left$
justified,$right$justified,$or$center$justified$within$its$column.
END

for align in [:Left, :Right, :Center]
  infile = StringIO.new(textinfile)
  puts  % align
  puts aligner(infile, align)
end"
g774h_1_1,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T1,Identical Clone,"from proper_divisors import proper_divs
from functools import lru_cache


@lru_cache()
def pdsum(n): 
    return sum(proper_divs(n))


def aliquot(n, maxlen=16, maxterm=2**47):
    if n == 0:
        return 'terminating', [0]
    s, slen, new = [n], 1, n
    while slen <= maxlen and new < maxterm:
        new = pdsum(s[-1])
        if new in s:
            if s[0] == new:
                if slen == 1:
                    return 'perfect', s
                elif slen == 2:
                    return 'amicable', s
                else:
                    return 'sociable of length%i'% slen, s
            elif s[-1] == new:
                return 'aspiring', s
            else:
                return 'cyclic back to%i'% new, s
        elif new == 0:
            return 'terminating', s + [0]
        else:
            s.append(new)
            slen += 1
    else:
        return 'non-terminating', s

if __name__ == '__main__':
    for n in range(1, 11): 
        print('%s:%r'% aliquot(n))
    print()
    for n in [11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r'% aliquot(n))"
g774h_1_2,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T1,Different Whitespaces,"from proper_divisors import proper_divs
from functools import lru_cache

@lru_cache()
def pdsum(n):
 return sum(proper_divs(n))

def aliquot(n,maxlen=16,maxterm=2**47):
 if n==0:
  return'terminating',[0]
 s,slen,new=[n],1,n
 while slen<=maxlen and new<maxterm:
  new=pdsum(s[-1])
  if new in s:
   if s[0]==new:
    if slen==1:
     return'perfect',s
    elif slen==2:
     return'amicable',s
    else:
     return'sociable of length%i'%slen,s
   elif s[-1]==new:
    return'aspiring',s
   else:
    return'cyclic back to%i'%new,s
  elif new==0:
   return'terminating',s+[0]
  else:
   s.append(new)
   slen+=1
 else:
  return'non-terminating',s

if __name__=='__main__':
 for n in range(1,11):
  print('%s:%r'%aliquot(n))
 print()
 for n in[11,12,28,496,220,1184,12496,1264460,790,909,562,1064,1488,15355717786080]:
  print('%s:%r'%aliquot(n))"
g774h_1_3,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T1,Different Comments,"from proper_divisors import proper_divs
from functools import lru_cache


@lru_cache()
def pdsum(n): 
    return sum(proper_divs(n))


def aliquot(n, maxlen=16, maxterm=2**47):
    if n == 0:
        return 'terminating', [0]
    s, slen, new = [n], 1, n
    while slen <= maxlen and new < maxterm:
        new = pdsum(s[-1])
        if new in s:
            if s[0] == new:
                if slen == 1:
                    return 'perfect', s
                elif slen == 2:
                    return 'amicable', s
                else:
                    return 'sociable of length%i'% slen, s
            elif s[-1] == new:
                return 'aspiring', s
            else:
                return 'cyclic back to%i'% new, s
        elif new == 0:
            return 'terminating', s + [0]
        else:
            s.append(new)
            slen += 1
    else:
        return 'non-terminating', s

if __name__ == '__main__':
    for n in range(1, 11): 
        print('%s:%r'% aliquot(n))
    print()
    for n in [11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r'% aliquot(n))"
g774h_1_4,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T1,Different Formatting,"from proper_divisors import proper_divs
from functools import lru_cache

@lru_cache()
def pdsum(n): 
    return sum(proper_divs(n))

def aliquot(n, maxlen=16, maxterm=2**47): 
    if n == 0: 
        return 'terminating', [0]
    s, slen, new = [n], 1, n 
    while slen <= maxlen and new < maxterm: 
        new = pdsum(s[-1]) 
        if new in s: 
            if s[0] == new: 
                if slen == 1: 
                    return 'perfect', s 
                elif slen == 2: 
                    return 'amicable', s 
                else: 
                    return 'sociable of length%i'% slen, s 
            elif s[-1] == new: 
                return 'aspiring', s 
            else: 
                return 'cyclic back to%i'% new, s 
        elif new == 0: 
            return 'terminating', s + [0] 
        else: 
            s.append(new) 
            slen += 1 
    else: 
        return 'non-terminating', s 

if __name__ == '__main__': 
    for n in range(1, 11): 
        print('%s:%r'% aliquot(n)) 
    print() 
    for n in [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r'% aliquot(n)) "
g774h_2_1,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T2,Different Variable Names,"from proper_divisors import proper_divs
from functools import lru_cache


@lru_cache()
def divisor_sum(value): 
    return sum(proper_divs(value))


def aliquot_sequence(value, max_length=16, max_term=2**47):
    if value == 0:
        return 'terminating', [0]
    sequence, length, new_value = [value], 1, value
    while length <= max_length and new_value < max_term:
        new_value = divisor_sum(sequence[-1])
        if new_value in sequence:
            if sequence[0] == new_value:
                if length == 1:
                    return 'perfect', sequence
                elif length == 2:
                    return 'amicable', sequence
                else:
                    return 'sociable of length%i'% length, sequence
            elif sequence[-1] == new_value:
                return 'aspiring', sequence
            else:
                return 'cyclic back to%i'% new_value, sequence
        elif new_value == 0:
            return 'terminating', sequence + [0]
        else:
            sequence.append(new_value)
            length += 1
    else:
        return 'non-terminating', sequence

if __name__ == '__main__':
    for value in range(1, 11): 
        print('%s:%r'% aliquot_sequence(value))
    print()
    for value in [11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r'% aliquot_sequence(value))"
g774h_2_2,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T2,Different Data Types,"from proper_divisors import proper_divs
from functools import lru_cache


@lru_cache()
def pdsum(n: int) -> int: 
    return sum(proper_divs(n))


def aliquot(n: int, maxlen: int = 16, maxterm: int = 2**47) -> tuple[str, list[int]]:
    if n == 0:
        return 'terminating', [0]
    s: list[int] = [n]
    slen: int = 1
    new: int = n
    while slen <= maxlen and new < maxterm:
        new = pdsum(s[-1])
        if new in s:
            if s[0] == new:
                if slen == 1:
                    return 'perfect', s
                elif slen == 2:
                    return 'amicable', s
                else:
                    return 'sociable of length%i' % slen, s
            elif s[-1] == new:
                return 'aspiring', s
            else:
                return 'cyclic back to%i' % new, s
        elif new == 0:
            return 'terminating', s + [0]
        else:
            s.append(new)
            slen += 1
    else:
        return 'non-terminating', s

if __name__ == '__main__':
    for n in range(1, 11): 
        print('%s:%r' % aliquot(n))
    print()
    for n in [11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r' % aliquot(n))"
g774h_2_3,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T2,Different Function Names,"from proper_divisors import proper_divs
from functools import lru_cache


@lru_cache()
def divisor_sum(n): 
    return sum(proper_divs(n))


def aliquot_sequence(n, maxlen=16, maxterm=2**47):
    if n == 0:
        return 'terminating', [0]
    sequence, length, new_value = [n], 1, n
    while length <= maxlen and new_value < maxterm:
        new_value = divisor_sum(sequence[-1])
        if new_value in sequence:
            if sequence[0] == new_value:
                if length == 1:
                    return 'perfect', sequence
                elif length == 2:
                    return 'amicable', sequence
                else:
                    return 'sociable of length%i'% length, sequence
            elif sequence[-1] == new_value:
                return 'aspiring', sequence
            else:
                return 'cyclic back to%i'% new_value, sequence
        elif new_value == 0:
            return 'terminating', sequence + [0]
        else:
            sequence.append(new_value)
            length += 1
    else:
        return 'non-terminating', sequence

if __name__ == '__main__':
    for n in range(1, 11): 
        print('%s:%r'% aliquot_sequence(n))
    print()
    for n in [11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r'% aliquot_sequence(n))"
g774h_3_1,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T3,Added Statements,"from proper_divisors import proper_divs
from functools import lru_cache


@lru_cache()
def pdsum(n): 
    return sum(proper_divs(n))


def aliquot(n, maxlen=16, maxterm=2**47):
    if n == 0:
        return 'terminating', [0]
    s, slen, new = [n], 1, n
    while slen <= maxlen and new < maxterm:
        new = pdsum(s[-1])
        if new in s:
            if s[0] == new:
                if slen == 1:
                    return 'perfect', s
                elif slen == 2:
                    return 'amicable', s
                else:
                    return 'sociable of length %i' % slen, s
            elif s[-1] == new:
                return 'aspiring', s
            else:
                return 'cyclic back to %i' % new, s
        elif new == 0:
            return 'terminating', s + [0]
        else:
            s.append(new)
            slen += 1
    return 'non-terminating', s

if __name__ == '__main__':
    results = []
    for n in range(1, 11): 
        results.append('%s:%r' % aliquot(n))
    print('\n'.join(results))
    print()
    for n in [11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r' % aliquot(n))"
g774h_3_2,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T3,Removed Statements,"from proper_divisors import proper_divs
from functools import lru_cache

@lru_cache()
def pdsum(n): 
    return sum(proper_divs(n))

def aliquot(n, maxlen=16, maxterm=2**47):
    if n == 0:
        return 'terminating', [0]
    s, new = [n], n
    while len(s) <= maxlen and new < maxterm:
        new = pdsum(s[-1])
        if new in s:
            if s[0] == new:
                return 'perfect' if len(s) == 1 else 'amicable' if len(s) == 2 else 'sociable of length%i' % len(s), s
            return 'aspiring' if s[-1] == new else 'cyclic back to%i' % new, s
        elif new == 0:
            return 'terminating', s + [0]
        s.append(new)
    return 'non-terminating', s

if __name__ == '__main__':
    for n in range(1, 11): 
        print('%s:%r' % aliquot(n))
    for n in [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r' % aliquot(n))"
g774h_3_3,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T3,Reordered Statements,"from functools import lru_cache
from proper_divisors import proper_divs


@lru_cache()
def pdsum(n): 
    return sum(proper_divs(n))


def aliquot(n, maxlen=16, maxterm=2**47):
    if n == 0:
        return 'terminating', [0]
    s, slen, new = [n], 1, n
    while slen <= maxlen and new < maxterm:
        new = pdsum(s[-1])
        if new in s:
            if s[0] == new:
                if slen == 1:
                    return 'perfect', s
                elif slen == 2:
                    return 'amicable', s
                else:
                    return 'sociable of length%i'% slen, s
            elif s[-1] == new:
                return 'aspiring', s
            else:
                return 'cyclic back to%i'% new, s
        elif new == 0:
            return 'terminating', s + [0]
        else:
            s.append(new)
            slen += 1
    else:
        return 'non-terminating', s

if __name__ == '__main__':
    for n in [11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        print('%s:%r'% aliquot(n))
    print()
    for n in range(1, 11): 
        print('%s:%r'% aliquot(n))"
g774h_3_4,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T3,Control Flow Modifications,"from proper_divisors import proper_divs
from functools import lru_cache


@lru_cache()
def pdsum(n): 
    return sum(proper_divs(n))


def aliquot(n, maxlen=16, maxterm=2**47):
    if n == 0:
        return 'terminating', [0]
    s = [n]
    
    while True:
        new = pdsum(s[-1])
        if new in s:
            if s[0] == new:
                return 'perfect', s if len(s) == 1 else 'amicable', s if len(s) == 2 else 'sociable of length%i' % len(s), s
            return 'aspiring', s if s[-1] == new else 'cyclic back to%i' % new, s
        if new == 0:
            return 'terminating', s + [0]
        s.append(new)
        if len(s) > maxlen or new >= maxterm:
            break
    return 'non-terminating', s

if __name__ == '__main__':
    for n in range(1, 11):
        result = aliquot(n)
        print('%s:%r' % result)
    print()
    for n in [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]: 
        result = aliquot(n)
        print('%s:%r' % result)"
g774h_4_1,g774h,Aliquot sequence classifications,Mathematics,Number Theory,python,T4,Same Language,"from proper_divisors import proper_divs
from functools import lru_cache

@lru_cache()
def pdsum(n):
    return sum(proper_divs(n))

def aliquot(n, maxlen=16, maxterm=2**47):
    if n == 0:
        return 'terminating', [0]
    s = [n]
    while len(s) <= maxlen and s[-1] < maxterm:
        new = pdsum(s[-1])
        if new in s:
            if s[0] == new:
                if len(s) == 1:
                    return 'perfect', s
                elif len(s) == 2:
                    return 'amicable', s
                else:
                    return f'sociable of length {len(s)}', s
            elif s[-1] == new:
                return 'aspiring', s
            else:
                return f'cyclic back to {new}', s
        elif new == 0:
            return 'terminating', s + [0]
        else:
            s.append(new)
    return 'non-terminating', s

if __name__ == '__main__':
    results = [(n, aliquot(n)) for n in range(1, 11)]
    for n, result in results:
        print(f'{result[0]}: {result[1]}')
    print()
    numbers = [11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]
    results = [(n, aliquot(n)) for n in numbers]
    for n, result in results:
        print(f'{result[0]}: {result[1]}')"
g774h_4_2,g774h,Aliquot sequence classifications,Mathematics,Number Theory,go,T4,Different Language,"package main

import (
    ""fmt""
    ""math""
    ""strings""
)

const threshold = uint64(1) << 47

func indexOf(s []uint64, search uint64) int {
    for i, e := range s {
        if e == search {
            return i
        }
    }
    return -1
}

func contains(s []uint64, search uint64) bool {
    return indexOf(s, search) > -1
}

func maxOf(i1, i2 int) int {
    if i1 > i2 {
        return i1
    }
    return i2
}

func sumProperDivisors(n uint64) uint64 {
    if n < 2 {
        return 0
    }
    sqrt := uint64(math.Sqrt(float64(n)))
    sum := uint64(1)
    for i := uint64(2); i <= sqrt; i++ {
        if n % i != 0 {
            continue
        }
        sum += i + n / i
    }
    if sqrt * sqrt == n {
        sum -= sqrt
    }
    return sum
}

func classifySequence(k uint64) ([]uint64, string) {
    if k == 0 {
        panic(""Argument must be positive."")
    }
    last := k
    var seq []uint64
    seq = append(seq, k)
    for {
        last = sumProperDivisors(last)
        seq = append(seq, last)
        n := len(seq)
        aliquot := """"
        switch {
        case last == 0:
            aliquot = ""Terminating""
        case n == 2 && last == k:
            aliquot = ""Perfect""
        case n == 3 && last == k:
            aliquot = ""Amicable""
        case n >= 4 && last == k:
            aliquot = fmt.Sprintf(""Sociable[%d]"", n - 1)
        case last == seq[n - 2]:
            aliquot = ""Aspiring""
        case contains(seq[1 : maxOf(1, n - 2)], last):
            aliquot = fmt.Sprintf(""Cyclic[%d]"", n - 1 - indexOf(seq[:], last))
        case n == 16 || last > threshold:
            aliquot = ""Non-Terminating""
        }
        if aliquot != """" {
            return seq, aliquot
        }
    }
}

func joinWithCommas(seq []uint64) string {
    res := fmt.Sprint(seq)
    res = strings.Replace(res, "" "", "", "", -1)
    return res
}

func main() {
    fmt.Println(""Aliquot classifications - periods for Sociable/Cyclic in square brackets:\n"")
    for k := uint64(1); k <= 10; k++ {
        seq, aliquot := classifySequence(k)
        fmt.Printf(""%2d:%-15s%s\n"", k, aliquot, joinWithCommas(seq))
    }
    fmt.Println()

    s := []uint64{
        11, 12, 28, 496, 220, 1184, 12496, 1264460, 790, 909, 562, 1064, 1488,
    }
    for _, k := range s {
        seq, aliquot := classifySequence(k)
        fmt.Printf(""%7d:%-15s%s\n"",  k, aliquot, joinWithCommas(seq))
    }
    fmt.Println()

    k := uint64(15355717786080)
    seq, aliquot := classifySequence(k)
    fmt.Printf(""%d:%-15s%s\n"", k, aliquot, joinWithCommas(seq))
}"
g774h_4_2,g774h,Aliquot sequence classifications,Mathematics,Number Theory,java,T4,Different Language,"import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.LongStream;

public class AliquotSequenceClassifications {

    private static Long properDivsSum(long n) {
        return LongStream.rangeClosed(1, (n + 1) / 2).filter(i -> n % i == 0 && n != i).sum();
    }

    static boolean aliquot(long n, int maxLen, long maxTerm) {
        List<Long> s = new ArrayList<>(maxLen);
        s.add(n);
        long newN = n;

        while (s.size() <= maxLen && newN < maxTerm) {

            newN = properDivsSum(s.get(s.size() - 1));

            if (s.contains(newN)) {

                if (s.get(0) == newN) {

                    switch (s.size()) {
                        case 1:
                            return report(""Perfect"", s);
                        case 2:
                            return report(""Amicable"", s);
                        default:
                            return report(""Sociable of length "" + s.size(), s);
                    }

                } else if (s.get(s.size() - 1) == newN) {
                    return report(""Aspiring"", s);

                } else
                    return report(""Cyclic back to "" + newN, s);

            } else {
                s.add(newN);
                if (newN == 0)
                    return report(""Terminating"", s);
            }
        }

        return report(""Non-terminating"", s);
    }

    static boolean report(String msg, List<Long> result) {
        System.out.println(msg + "": "" + result);
        return false;
    }

    public static void main(String[] args) {
        long[] arr = {
                11, 12, 28, 496, 220, 1184, 12496, 1264460,
                790, 909, 562, 1064, 1488};

        LongStream.rangeClosed(1, 10).forEach(n -> aliquot(n, 16, 1L << 47));
        System.out.println();
        Arrays.stream(arr).forEach(n -> aliquot(n, 16, 1L << 47));
    }
}"
g774h_4_2,g774h,Aliquot sequence classifications,Mathematics,Number Theory,ruby,T4,Different Language,"def aliquot(n, maxlen=16, maxterm=2**47)
  return , [0] if n == 0
  s = []
  while (s << n).size <= maxlen and n < maxterm
    n = n.proper_divisors.inject(0,:+)
    if s.include?(n)
      case n
      when s[0]
        case s.size
        when 1   then   return , s
        when 2   then   return , s
        else            return , s
        end
      when s[-1] then   return , s
      else              return , s
      end
    elsif n == 0 then   return , s << 0
    end
  end
  return , s
end

for n in 1..10
  puts  % aliquot(n)
end
puts
for n in [11, 12, 28, 496, 220, 1184,  12496, 1264460, 790, 909, 562, 1064, 1488, 15355717786080]
  puts  % aliquot(n)
end"
b1skr_1_1,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T1,Identical Clone,"import mpmath as mp

with mp.workdps(72):

    def integer_term(n):
        p = 532 * n * n + 126 * n + 9
        return (p * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

    def exponent_term(n):
        return -(mp.mpf() * n + 3)

    def nthterm(n):
        return integer_term(n) * mp.mpf()**exponent_term(n)


    for n in range(10):
        print(, n, '  ', int(integer_term(n)))


    def almkvist_guillera(floatprecision):
        summed, nextadd = mp.mpf('0.0'), mp.mpf('0.0')
        for n in range(100000000):
            nextadd = summed + nthterm(n)
            if abs(nextadd - summed) < 10.0**(-floatprecision):
                break

            summed = nextadd

        return nextadd


    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(almkvist_guillera(70))), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_1_2,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T1,Different Whitespaces,"import mpmath as mp
with mp.workdps(72):
 def integer_term(n):
  p=532*n*n+126*n+9
  return(p*2**5*mp.factorial(6*n))/(3*mp.factorial(n)**6)
 def exponent_term(n):
  return-(mp.mpf()*n+3)
 def nthterm(n):
  return integer_term(n)*mp.mpf()**exponent_term(n)
 for n in range(10):
  print(,n,'  ',int(integer_term(n)))
 def almkvist_guillera(floatprecision):
  summed,nextadd=mp.mpf('0.0'),mp.mpf('0.0')
  for n in range(100000000):
   nextadd=summed+nthterm(n)
   if abs(nextadd-summed)<10.0**(-floatprecision):
    break
   summed=nextadd
  return nextadd
 print('\n to 70 digits is ',end='')
 mp.nprint(mp.mpf(1.0/mp.sqrt(almkvist_guillera(70))),71)
 print('mpmath  is       ',end='')
 mp.nprint(mp.pi,71)"
b1skr_1_3,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T1,Different Comments,"import mpmath as mp

with mp.workdps(72):

    def compute_integer(n):
        p = 532 * n * n + 126 * n + 9
        return (p * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

    def compute_exponent(n):
        return -(mp.mpf() * n + 3)

    def compute_nth_term(n):
        return compute_integer(n) * mp.mpf()**compute_exponent(n)

    for n in range(10):
        print(n, '  ', int(compute_integer(n)))

    def calculate_almkvist_guillera(floatprecision):
        total, next_value = mp.mpf('0.0'), mp.mpf('0.0')
        for n in range(100000000):
            next_value = total + compute_nth_term(n)
            if abs(next_value - total) < 10.0**(-floatprecision):
                break

            total = next_value

        return next_value

    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(calculate_almkvist_guillera(70))), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_1_4,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T1,Different Formatting,"import mpmath as mp

with mp.workdps(72):
    def integer_term(n):
        p = 532 * n * n + 126 * n + 9
        return (p * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

    def exponent_term(n):
        return -(mp.mpf() * n + 3)

    def nthterm(n):
        return integer_term(n) * mp.mpf()**exponent_term(n)

    for n in range(10):
        print(n, '  ', int(integer_term(n)))

    def almkvist_guillera(floatprecision):
        summed, nextadd = mp.mpf('0.0'), mp.mpf('0.0')
        for n in range(100000000):
            nextadd = summed + nthterm(n)
            if abs(nextadd - summed) < 10.0**(-floatprecision):
                break
            summed = nextadd
        return nextadd

    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(almkvist_guillera(70))), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_2_1,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T2,Different Variable Names,"import mpmath as mp

with mp.workdps(72):

    def compute_integer(n):
        value = 532 * n * n + 126 * n + 9
        return (value * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

    def compute_exponent(n):
        return -(mp.mpf() * n + 3)

    def calculate_term(n):
        return compute_integer(n) * mp.mpf()**compute_exponent(n)


    for index in range(10):
        print(index, '  ', int(compute_integer(index)))


    def almkvist_guillera(precision):
        total, next_value = mp.mpf('0.0'), mp.mpf('0.0')
        for index in range(100000000):
            next_value = total + calculate_term(index)
            if abs(next_value - total) < 10.0**(-precision):
                break

            total = next_value

        return next_value


    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(almkvist_guillera(70))), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_2_2,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T2,Different Data Types,"import mpmath as mp

with mp.workdps(72):

    def integer_term(n: int) -> mp.mpf:
        p: int = 532 * n * n + 126 * n + 9
        return (p * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

    def exponent_term(n: int) -> mp.mpf:
        return -(mp.mpf() * n + 3)

    def nthterm(n: int) -> mp.mpf:
        return integer_term(n) * mp.mpf()**exponent_term(n)

    for n in range(10):
        print(n, '  ', int(integer_term(n)))

    def almkvist_guillera(floatprecision: int) -> mp.mpf:
        summed: mp.mpf = mp.mpf('0.0')
        nextadd: mp.mpf = mp.mpf('0.0')
        for n in range(100000000):
            nextadd = summed + nthterm(n)
            if abs(nextadd - summed) < 10.0**(-floatprecision):
                break
            summed = nextadd
        return nextadd

    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(almkvist_guillera(70))), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_2_3,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T2,Different Function Names,"import mpmath as mp

with mp.workdps(72):

    def calculate_integer_term(n):
        p = 532 * n * n + 126 * n + 9
        return (p * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

    def calculate_exponent_term(n):
        return -(mp.mpf() * n + 3)

    def calculate_nth_term(n):
        return calculate_integer_term(n) * mp.mpf()**calculate_exponent_term(n)


    for n in range(10):
        print(, n, '  ', int(calculate_integer_term(n)))


    def calculate_almkvist_guillera(floatprecision):
        summed, nextadd = mp.mpf('0.0'), mp.mpf('0.0')
        for n in range(100000000):
            nextadd = summed + calculate_nth_term(n)
            if abs(nextadd - summed) < 10.0**(-floatprecision):
                break

            summed = nextadd

        return nextadd


    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(calculate_almkvist_guillera(70))), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_3_1,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T3,Added Statements,"import mpmath as mp

with mp.workdps(72):

    def integer_term(n):
        p = 532 * n * n + 126 * n + 9
        return (p * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

    def exponent_term(n):
        return -(mp.mpf() * n + 3)

    def nthterm(n):
        return integer_term(n) * mp.mpf()**exponent_term(n)

    for n in range(10):
        result = int(integer_term(n))
        print(result, n, '  ')

    def almkvist_guillera(floatprecision):
        summed = mp.mpf('0.0')
        for n in range(100000000):
            nextadd = summed + nthterm(n)
            if abs(nextadd - summed) < 10.0**(-floatprecision):
                break

            summed = nextadd

        return nextadd

    inverse_result = mp.mpf(1.0 / mp.sqrt(almkvist_guillera(70)))
    print('\n to 70 digits is ', end='')
    mp.nprint(inverse_result, 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_3_2,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T3,Removed Statements,"import mpmath as mp

with mp.workdps(72):
    def integer_term(n):
        return (532 * n * n + 126 * n + 9) * 2**5 * mp.factorial(6 * n) / (3 * mp.factorial(n)**6)

    def exponent_term(n):
        return -(mp.mpf() * n + 3)

    def nthterm(n):
        return integer_term(n) * mp.mpf()**exponent_term(n)

    for n in range(10):
        print(n, '  ', int(integer_term(n)))

    def almkvist_guillera(floatprecision):
        summed = mp.mpf('0.0')
        for n in range(100000000):
            nextadd = summed + nthterm(n)
            if abs(nextadd - summed) < 10.0**(-floatprecision):
                break
            summed = nextadd

        return nextadd

    mp.nprint(mp.mpf(1.0 / mp.sqrt(almkvist_guillera(70))), 71)
    mp.nprint(mp.pi, 71)"
b1skr_3_3,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T3,Reordered Statements,"import mpmath as mp

def integer_term(n):
    p = 532 * n * n + 126 * n + 9
    return (p * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

def exponent_term(n):
    return -(mp.mpf() * n + 3)

def nthterm(n):
    return integer_term(n) * mp.mpf()**exponent_term(n)

with mp.workdps(72):
    for n in range(10):
        print(n, '  ', int(integer_term(n)))

    def almkvist_guillera(floatprecision):
        summed, nextadd = mp.mpf('0.0'), mp.mpf('0.0')
        for n in range(100000000):
            nextadd = summed + nthterm(n)
            if abs(nextadd - summed) < 10.0**(-floatprecision):
                break
            summed = nextadd
        return nextadd

    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(almkvist_guillera(70))), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_3_4,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T3,Control Flow Modifications,"import mpmath as mp

with mp.workdps(72):

    def integer_term(n):
        p = 532 * n * n + 126 * n + 9
        return (p * 2**5 * mp.factorial(6 * n)) / (3 * mp.factorial(n)**6)

    def exponent_term(n):
        return -(mp.mpf() * n + 3)

    def nthterm(n):
        return integer_term(n) * mp.mpf()**exponent_term(n)

    n = 0
    while n < 10:
        print(n, '  ', int(integer_term(n)))
        n += 1

    def almkvist_guillera(floatprecision):
        summed = mp.mpf('0.0')
        for n in range(100000000):
            nextadd = summed + nthterm(n)
            if abs(nextadd - summed) < 10.0**(-floatprecision):
                return nextadd
            summed = nextadd

    result = almkvist_guillera(70)
    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(result)), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_4_1,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,python,T4,Same Language,"import mpmath as mp

with mp.workdps(72):
    
    def calculate_integer_term(n):
        return (532 * n * n + 126 * n + 9) * 32 * mp.factorial(6 * n) / (3 * mp.factorial(n)**6)

    def calculate_exponent_term(n):
        return -mp.mpf(n + 3)

    def calculate_nth_term(n):
        return calculate_integer_term(n) * mp.mpf()**calculate_exponent_term(n)

    term_results = [calculate_integer_term(n) for n in range(10)]
    for n, result in enumerate(term_results):
        print(n, '  ', int(result))

    def compute_almkvist_guillera(floatprecision):
        total, increment = mp.mpf('0.0'), mp.mpf('0.0')
        for n in range(100000000):
            increment = total + calculate_nth_term(n)
            if abs(increment - total) < 10.0**(-floatprecision):
                break
            total = increment
        return increment

    print('\n to 70 digits is ', end='')
    mp.nprint(mp.mpf(1.0 / mp.sqrt(compute_almkvist_guillera(70))), 71)
    print('mpmath  is       ', end='')
    mp.nprint(mp.pi, 71)"
b1skr_4_2,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,go,T4,Different Language,"package main

import (
    ""fmt""
    ""math/big""
    ""strings""
)

func factorial(n int64) *big.Int {
    var z big.Int
    return z.MulRange(1, n)
}

var one = big.NewInt(1)
var three = big.NewInt(3)
var six = big.NewInt(6)
var ten = big.NewInt(10)
var seventy = big.NewInt(70)

func almkvistGiullera(n int64, print bool) *big.Rat {
    t1 := big.NewInt(32)
    t1.Mul(factorial(6*n), t1)
    t2 := big.NewInt(532*n*n + 126*n + 9)
    t3 := new(big.Int)
    t3.Exp(factorial(n), six, nil)
    t3.Mul(t3, three)
    ip := new(big.Int)
    ip.Mul(t1, t2)
    ip.Quo(ip, t3)
    pw := 6*n + 3
    t1.SetInt64(pw)
    tm := new(big.Rat).SetFrac(ip, t1.Exp(ten, t1, nil))
    if print {
        fmt.Printf(""%d %44d %3d %-35s\n"", n, ip, -pw, tm.FloatString(33))
    }
    return tm
}

func main() {
    fmt.Println(""N                               Integer Portion  Pow  Nth Term (33 dp)"")
    fmt.Println(strings.Repeat(""-"", 89))
    for n := int64(0); n < 10; n++ {
        almkvistGiullera(n, true)
    }

    sum := new(big.Rat)
    prev := new(big.Rat)
    pow70 := new(big.Int).Exp(ten, seventy, nil)
    prec := new(big.Rat).SetFrac(one, pow70)
    n := int64(0)
    for {
        term := almkvistGiullera(n, false)
        sum.Add(sum, term)
        z := new(big.Rat).Sub(sum, prev)
        z.Abs(z)
        if z.Cmp(prec) < 0 {
            break
        }
        prev.Set(sum)
        n++
    }
    sum.Inv(sum)
    pi := new(big.Float).SetPrec(256).SetRat(sum)
    pi.Sqrt(pi)
    fmt.Println(""\nPi to 70 decimal places is:"")
    fmt.Println(pi.Text('f', 70))
}"
b1skr_4_2,b1skr,Almkvist-Giullera formula for pi,Mathematics,Numerical Methods,javascript,T4,Different Language,"import esMain from 'es-main';
import { BigFloat, set_precision as SetPrecision } from 'bigfloat-esnext';

const Iterations = 52;

export const demo = function() {
  SetPrecision(-75);
  console.log(""N."" + ""Integral part of Nth term"".padStart(45) + "" 10^ =Actual value of Nth term"");
  for (let i=0; i<10; i++) {
    let line = `${i}. `;
    line += `${integral(i)} `.padStart(45);
    line += `${tenExponent(i)} `.padStart(5);
    line += nthTerm(i);
    console.log(line);
  }

  let pi = approximatePi(Iterations);
  SetPrecision(-70);
  pi = pi.dividedBy(100000).times(100000);
  console.log(`\nPi after ${Iterations} iterations: ${pi}`)
}

export const bigFactorial = n => n <= 1n ? 1n : n * bigFactorial(n-1n);"
nf6iz_1_1,nf6iz,Almost prime,Mathematics,Number Theory,python,T1,Identical Clone,"from prime_decomposition import decompose
from itertools import islice, count
try: 
    from functools import reduce
except: 
    pass


def almostprime(n, k=2):
    d = decompose(n)
    try:
        terms = [next(d) for i in range(k)]
        return reduce(int.__mul__, terms, 1) == n
    except:
        return False

if __name__ == '__main__':
    for k in range(1,6):
        print('%i:%r'% (k, list(islice((n for n in count() if almostprime(n, k)), 10))))"
nf6iz_1_2,nf6iz,Almost prime,Mathematics,Number Theory,python,T1,Different Whitespaces,"from prime_decomposition import decompose
from itertools import islice, count
try: 
 from functools import reduce
except: 
 pass

def almostprime(n, k=2):
 d = decompose(n)
 try:
  terms = [next(d) for i in range(k)]
  return reduce(int.__mul__, terms, 1) == n
 except:
  return False

if __name__ == '__main__':
 for k in range(1,6):
  print('%i:%r'% (k, list(islice((n for n in count() if almostprime(n, k)), 10))))"
nf6iz_1_3,nf6iz,Almost prime,Mathematics,Number Theory,python,T1,Different Comments,"from prime_decomposition import decompose
from itertools import islice, count
try: 
    from functools import reduce
except: 
    pass


def almostprime(n, k=2):
    d = decompose(n)
    try:
        terms = [next(d) for i in range(k)]
        return reduce(int.__mul__, terms, 1) == n
    except:
        return False

if __name__ == '__main__':
    for k in range(1,6):
        print('%i:%r'% (k, list(islice((n for n in count() if almostprime(n, k)), 10))))"
nf6iz_1_4,nf6iz,Almost prime,Mathematics,Number Theory,python,T1,Different Formatting,"from prime_decomposition import decompose
from itertools import islice, count
try:
    from functools import reduce
except:
    pass

def almostprime(n, k=2):
    d = decompose(n)
    try:
        terms = [next(d) for i in range(k)]
        return reduce(int.__mul__, terms, 1) == n
    except:
        return False

if __name__ == '__main__':
    for k in range(1, 6):
        print('%i:%r' % (k, list(islice((n for n in count() if almostprime(n, k)), 10))))"
nf6iz_2_1,nf6iz,Almost prime,Mathematics,Number Theory,python,T2,Different Variable Names,"from prime_decomposition import decompose
from itertools import islice, count
try: 
    from functools import reduce
except: 
    pass


def nearlyprime(value, threshold=2):
    decomposition = decompose(value)
    try:
        elements = [next(decomposition) for index in range(threshold)]
        return reduce(int.__mul__, elements, 1) == value
    except:
        return False

if __name__ == '__main__':
    for threshold in range(1,6):
        print('%i:%r'% (threshold, list(islice((number for number in count() if nearlyprime(number, threshold)), 10))))"
nf6iz_2_2,nf6iz,Almost prime,Mathematics,Number Theory,python,T2,Different Data Types,"from prime_decomposition import decompose
from itertools import islice, count
try: 
    from functools import reduce
except: 
    pass


def almostprime(n: int, k: int = 2) -> bool:
    d = decompose(n)
    try:
        terms: list = [next(d) for _ in range(k)]
        return reduce(int.__mul__, terms, 1) == n
    except StopIteration:
        return False

if __name__ == '__main__':
    for k in range(1, 6):
        print('%i:%r' % (k, list(islice((n for n in count() if almostprime(n, k)), 10))))"
nf6iz_2_3,nf6iz,Almost prime,Mathematics,Number Theory,python,T2,Different Function Names,"from prime_decomposition import decompose
from itertools import islice, count
try: 
    from functools import reduce
except: 
    pass


def nearly_prime(n, k=2):
    d = decompose(n)
    try:
        terms = [next(d) for i in range(k)]
        return reduce(int.__mul__, terms, 1) == n
    except:
        return False

if __name__ == '__main__':
    for k in range(1,6):
        print('%i:%r'% (k, list(islice((n for n in count() if nearly_prime(n, k)), 10))))"
nf6iz_3_1,nf6iz,Almost prime,Mathematics,Number Theory,python,T3,Added Statements,"from prime_decomposition import decompose
from itertools import islice, count
try: 
    from functools import reduce
except ImportError: 
    pass


def almostprime(n, k=2):
    d = decompose(n)
    terms = []
    try:
        for _ in range(k):
            terms.append(next(d))
        return reduce(int.__mul__, terms, 1) == n
    except StopIteration:
        return False

if __name__ == '__main__':
    results = {}
    for k in range(1,6):
        results[k] = list(islice((n for n in count() if almostprime(n, k)), 10))
        print('%i:%r' % (k, results[k]))"
nf6iz_3_2,nf6iz,Almost prime,Mathematics,Number Theory,python,T3,Removed Statements,"from prime_decomposition import decompose
from itertools import islice, count
from functools import reduce

def almostprime(n, k=2):
    d = decompose(n)
    terms = [next(d) for _ in range(k)]
    return reduce(int.__mul__, terms, 1) == n

if __name__ == '__main__':
    for k in range(1,6):
        print('%i:%r'% (k, list(islice((n for n in count() if almostprime(n, k)), 10))))"
nf6iz_3_3,nf6iz,Almost prime,Mathematics,Number Theory,python,T3,Reordered Statements,"from prime_decomposition import decompose
from itertools import islice, count
try: 
    from functools import reduce
except: 
    pass


def almostprime(n, k=2):
    try:
        d = decompose(n)
        terms = [next(d) for i in range(k)]
        return reduce(int.__mul__, terms, 1) == n
    except:
        return False

if __name__ == '__main__':
    for k in range(1, 6):
        print('%i:%r' % (k, list(islice((n for n in count() if almostprime(n, k)), 10))))"
nf6iz_3_4,nf6iz,Almost prime,Mathematics,Number Theory,python,T3,Control Flow Modifications,"from prime_decomposition import decompose
from itertools import islice, count
try: 
    from functools import reduce
except: 
    pass

def almostprime(n, k=2):
    d = decompose(n)
    terms = []
    for _ in range(k):
        try:
            terms.append(next(d))
        except StopIteration:
            return False
    return reduce(int.__mul__, terms, 1) == n

if __name__ == '__main__':
    k = 1
    while k < 6:
        print('%i:%r' % (k, list(islice((n for n in count() if almostprime(n, k)), 10))))
        k += 1"
nf6iz_4_1,nf6iz,Almost prime,Mathematics,Number Theory,python,T4,Same Language,"from prime_decomposition import decompose
from itertools import islice, count
from functools import reduce

def almostprime(n, k=2):
    try:
        terms = [next(decompose(n)) for _ in range(k)]
        return reduce(int.__mul__, terms) == n
    except StopIteration:
        return False

if __name__ == '__main__':
    for k in range(1, 6):
        results = [n for n in count() if almostprime(n, k)]
        print(f'{k}:{list(islice(results, 10))}')"
nf6iz_4_2,nf6iz,Almost prime,Mathematics,Number Theory,go,T4,Different Language,"package main

import ""fmt""

func kPrime(n, k int) bool {
    nf := 0
    for i := 2; i <= n; i++ {
        for n%i == 0 {
            if nf == k {
                return false
            }
            nf++
            n /= i
        }
    }
    return nf == k
}

func gen(k, n int) []int {
    r := make([]int, n)
    n = 2
    for i := range r {
        for !kPrime(n, k) {
            n++
        }
        r[i] = n
        n++
    }
    return r
}

func main() {
    for k := 1; k <= 5; k++ {
        fmt.Println(k, gen(k, 10))
    }
}"
nf6iz_4_2,nf6iz,Almost prime,Mathematics,Number Theory,java,T4,Different Language,"public class AlmostPrime {
    public static void main(String[] args) {
        for (int k = 1; k <= 5; k++) {
            System.out.print(""k = "" + k + "":"");

            for (int i = 2, c = 0; c < 10; i++) {
                if (kprime(i, k)) {
                    System.out.print("" "" + i);
                    c++;
                }
            }

            System.out.println("""");
        }
    }

    public static boolean kprime(int n, int k) {
        int f = 0;
        for (int p = 2; f < k && p * p <= n; p++) {
            while (n % p == 0) {
                n /= p;
                f++;
            }
        }
        return f + ((n > 1) ? 1 : 0) == k;
    }
}"
nf6iz_4_2,nf6iz,Almost prime,Mathematics,Number Theory,javascript,T4,Different Language,"function almostPrime (n, k) {
    var divisor = 2, count = 0
    while(count < k + 1 && n != 1) {
        if (n % divisor == 0) {
            n = n / divisor
            count = count + 1
        } else {
            divisor++
        }
    }
    return count == k
}

for (var k = 1; k <= 5; k++) {
    document.write(""<br>k="", k, "": "")
    var count = 0, n = 0
    while (count <= 10) {
        n++
        if (almostPrime(n, k)) {
            document.write(n, "" "")
            count++
        }
    }
}"
nf6iz_4_2,nf6iz,Almost prime,Mathematics,Number Theory,ruby,T4,Different Language,"require 'prime'

def almost_primes(k=2)
  return to_enum(:almost_primes, k) unless block_given?
  1.step {|n| yield n if n.prime_division.sum( &:last ) == k }
end

(1..5).each{|k| puts almost_primes(k).take(10).join()}"
t3mfw_1_1,t3mfw,Amb,Programming Concepts,Functional Programming,python,T1,Identical Clone,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values   = {}       
        self._func           = None     
        self._valueiterator  = None     
        self._funcargnames   = None     

    def __call__(self, arg=None):
        if hasattr(arg, '__code__'):                
            
            
            
            globls = arg.__globals__ if hasattr(arg, '__globals__') else arg.func_globals
            
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            for name in argv:
                if name not in self._names2values:
                    assert name in globls, \
                           % name
                    self._names2values[name] = globls[name]
            
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            
            
            
            arg = frozenset(arg)
            return arg
        else:
            
            
            
            return self._nextinsearch()

    def _nextinsearch(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        found = False
        for values in self._valueiterator:
            if arg(*values):
                
                found = True
                for n, v in zip(argv, values):
                    globls[n] = v
                break
        if not found: raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()
    next = __next__ 

if __name__ == '__main__':
    if True:
        amb = Amb()

        print()
        x = amb(range(1,11))
        y = amb(range(1,11))
        z = amb(range(1,11))

        for _dummy in amb( lambda x, y, z: x*x + y*y == z*z ):
            print ('%s%s%s'% (x, y, z))


    if True:
        amb = Amb()

        print()
        w1 = amb([, , ])
        w2 = amb([, , ])
        w3 = amb([, , ])
        w4 = amb([, ])

        for _dummy in amb( lambda w1, w2, w3, w4: \
                             w1[-1] == w2[0] and \
                             w2[-1] == w3[0] and \
                             w3[-1] == w4[0] ):
            print ('%s%s%s%s'% (w1, w2, w3, w4))

    if True:
        amb = Amb()

        print(
            )
        x = amb([1, 2, 3])
        y = amb([4, 5, 6])

        for _dummy in amb( lambda x, y: x * y != 8 ):
            print ('%s%s'% (x, y))"
t3mfw_1_2,t3mfw,Amb,Programming Concepts,Functional Programming,python,T1,Different Whitespaces,"```python
import itertools as _itertools

class Amb(object):
 def __init__(self):
  self._names2values={ }       
  self._func=None     
  self._valueiterator=None     
  self._funcargnames=None     

 def __call__(self,arg=None):
  if hasattr(arg,'__code__'):                
   globls=arg.__globals__if hasattr(arg,'__globals__')else arg.func_globals
   argv=arg.__code__.co_varnames[:arg.__code__.co_argcount]
   for name in argv:
    if name not in self._names2values:
     assert name in globls,\
     % name
     self._names2values[name]=globls[name]
   valuesets=[self._names2values[name]for name in argv]
   self._valueiterator=_itertools.product(*valuesets)
   self._func=arg
   self._funcargnames=argv
   return self
  elif arg is not None:
   arg=frozenset(arg)
   return arg
  else:
   return self._nextinsearch()

 def _nextinsearch(self):
  arg=self._func
  globls=arg.__globals__
  argv=self._funcargnames
  found=False
  for values in self._valueiterator:
   if arg(*values):
    found=True
    for n,v in zip(argv,values):
     globls[n]=v
    break
  if not found: raise StopIteration
  return values

 def __iter__(self):
  return self

 def __next__(self):
  return self()
 next=__next__

if __name__=='__main__':
 if True:
  amb=Amb()
  print()
  x=amb(range(1,11))
  y=amb(range(1,11))
  z=amb(range(1,11))
  for _dummy in amb(lambda x,y,z:x*x+y*y==z*z):
   print('%s%s%s'%(x,y,z))

 if True:
  amb=Amb()
  print()
  w1=amb([, , ])
  w2=amb([, , ])
  w3=amb([, , ])
  w4=amb([, ])
  for _dummy in amb(lambda w1,w2,w3,w4:w1[-1]==w2[0]and w2[-1]==w3[0]and w3[-1]==w4[0]):
   print('%s%s%s%s'%(w1,w2,w3,w4))

 if True:
  amb=Amb()
  print()
  x=amb([1,2,3])
  y=amb([4,5,6])
  for _dummy in amb(lambda x,y:x*y!=8):
   print('%s%s'%(x,y))
```"
t3mfw_1_3,t3mfw,Amb,Programming Concepts,Functional Programming,python,T1,Different Comments,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values   = {}       
        self._func           = None     
        self._valueiterator  = None     
        self._funcargnames   = None     

    def __call__(self, arg=None):
        if hasattr(arg, '__code__'):                
            globls = arg.__globals__ if hasattr(arg, '__globals__') else arg.func_globals
            
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            for name in argv:
                if name not in self._names2values:
                    assert name in globls, \
                           % name
                    self._names2values[name] = globls[name]
            
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            arg = frozenset(arg)
            return arg
        else:
            return self._nextinsearch()

    def _nextinsearch(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        found = False
        for values in self._valueiterator:
            if arg(*values):
                found = True
                for n, v in zip(argv, values):
                    globls[n] = v
                break
        if not found: raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()
    next = __next__ 

if __name__ == '__main__':
    if True:
        amb = Amb()

        print()
        x = amb(range(1,11))
        y = amb(range(1,11))
        z = amb(range(1,11))

        for _dummy in amb( lambda x, y, z: x*x + y*y == z*z ):
            print ('%s%s%s'% (x, y, z))


    if True:
        amb = Amb()

        print()
        w1 = amb([, , ])
        w2 = amb([, , ])
        w3 = amb([, , ])
        w4 = amb([, ])

        for _dummy in amb( lambda w1, w2, w3, w4: \
                             w1[-1] == w2[0] and \
                             w2[-1] == w3[0] and \
                             w3[-1] == w4[0] ):
            print ('%s%s%s%s'% (w1, w2, w3, w4))

    if True:
        amb = Amb()

        print(
            )
        x = amb([1, 2, 3])
        y = amb([4, 5, 6])

        for _dummy in amb( lambda x, y: x * y != 8 ):
            print ('%s%s'% (x, y))"
t3mfw_1_4,t3mfw,Amb,Programming Concepts,Functional Programming,python,T1,Different Formatting,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values = {}
        self._func = None
        self._valueiterator = None
        self._funcargnames = None

    def __call__(self, arg=None):
        if hasattr(arg, '__code__'):
            globls = arg.__globals__ if hasattr(arg, '__globals__') else arg.func_globals
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            for name in argv:
                if name not in self._names2values:
                    assert name in globls, % name
                    self._names2values[name] = globls[name]
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            arg = frozenset(arg)
            return arg
        else:
            return self._nextinsearch()

    def _nextinsearch(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        found = False
        for values in self._valueiterator:
            if arg(*values):
                found = True
                for n, v in zip(argv, values):
                    globls[n] = v
                break
        if not found: raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()
    next = __next__

if __name__ == '__main__':
    if True:
        amb = Amb()
        print()
        x = amb(range(1, 11))
        y = amb(range(1, 11))
        z = amb(range(1, 11))
        for _dummy in amb(lambda x, y, z: x * x + y * y == z * z):
            print('%s%s%s' % (x, y, z))

    if True:
        amb = Amb()
        print()
        w1 = amb([, , ])
        w2 = amb([, , ])
        w3 = amb([, , ])
        w4 = amb([, ])
        for _dummy in amb(lambda w1, w2, w3, w4: \
                           w1[-1] == w2[0] and \
                           w2[-1] == w3[0] and \
                           w3[-1] == w4[0]):
            print('%s%s%s%s' % (w1, w2, w3, w4))

    if True:
        amb = Amb()
        print()
        x = amb([1, 2, 3])
        y = amb([4, 5, 6])
        for _dummy in amb(lambda x, y: x * y != 8):
            print('%s%s' % (x, y))"
t3mfw_2_1,t3mfw,Amb,Programming Concepts,Functional Programming,python,T2,Different Variable Names,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._identifiers2values   = {}       
        self._method               = None     
        self._iterator             = None     
        self._methodargnames       = None     

    def __call__(self, parameter=None):
        if hasattr(parameter, '__code__'):                
            globals_context = parameter.__globals__ if hasattr(parameter, '__globals__') else parameter.func_globals
            
            arguments = parameter.__code__.co_varnames[:parameter.__code__.co_argcount]
            for identifier in arguments:
                if identifier not in self._identifiers2values:
                    assert identifier in globals_context, \
                           % identifier
                    self._identifiers2values[identifier] = globals_context[identifier]
            
            value_sets = [self._identifiers2values[identifier] for identifier in arguments]
            self._iterator = _itertools.product(*value_sets)
            self._method = parameter
            self._methodargnames = arguments
            return self
        elif parameter is not None:
            parameter = frozenset(parameter)
            return parameter
        else:
            return self._next_in_search()

    def _next_in_search(self):
        parameter = self._method
        globals_context = parameter.__globals__
        arguments = self._methodargnames
        found = False
        for values in self._iterator:
            if parameter(*values):
                found = True
                for name, value in zip(arguments, values):
                    globals_context[name] = value
                break
        if not found: raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()
    next = __next__ 

if __name__ == '__main__':
    if True:
        amb_instance = Amb()

        print()
        a = amb_instance(range(1,11))
        b = amb_instance(range(1,11))
        c = amb_instance(range(1,11))

        for _dummy in amb_instance( lambda a, b, c: a*a + b*b == c*c ):
            print ('%s%s%s'% (a, b, c))


    if True:
        amb_instance = Amb()

        print()
        d1 = amb_instance([, , ])
        d2 = amb_instance([, , ])
        d3 = amb_instance([, , ])
        d4 = amb_instance([, ])

        for _dummy in amb_instance( lambda d1, d2, d3, d4: \
                             d1[-1] == d2[0] and \
                             d2[-1] == d3[0] and \
                             d3[-1] == d4[0] ):
            print ('%s%s%s%s'% (d1, d2, d3, d4))

    if True:
        amb_instance = Amb()

        print(
            )
        a = amb_instance([1, 2, 3])
        b = amb_instance([4, 5, 6])

        for _dummy in amb_instance( lambda a, b: a * b != 8 ):
            print ('%s%s'% (a, b))"
t3mfw_2_2,t3mfw,Amb,Programming Concepts,Functional Programming,python,T2,Different Data Types,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values   = {}       
        self._func           = None     
        self._valueiterator  = None     
        self._funcargnames   = None     

    def __call__(self, arg=None):
        if hasattr(arg, '__code__'):                
            globls = arg.__globals__ if hasattr(arg, '__globals__') else arg.func_globals
            
            argv = list(arg.__code__.co_varnames[:arg.__code__.co_argcount])
            for name in argv:
                if name not in self._names2values:
                    assert name in globls, \
                           f""{name}""
                    self._names2values[name] = globls[name]
            
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            arg = frozenset(arg)
            return arg
        else:
            return self._nextinsearch()

    def _nextinsearch(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        found = False
        for values in self._valueiterator:
            if arg(*values):
                found = True
                for n, v in zip(argv, values):
                    globls[n] = v
                break
        if not found: raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()
    next = __next__ 

if __name__ == '__main__':
    if True:
        amb = Amb()

        print()
        x = amb(list(range(1,11)))
        y = amb(list(range(1,11)))
        z = amb(list(range(1,11)))

        for _dummy in amb(lambda x, y, z: x*x + y*y == z*z):
            print('%s%s%s'% (x, y, z))


    if True:
        amb = Amb()

        print()
        w1 = amb([None, None, None])
        w2 = amb([None, None, None])
        w3 = amb([None, None, None])
        w4 = amb([None])

        for _dummy in amb(lambda w1, w2, w3, w4: \
                             w1[-1] == w2[0] and \
                             w2[-1] == w3[0] and \
                             w3[-1] == w4[0]):
            print('%s%s%s%s'% (w1, w2, w3, w4))

    if True:
        amb = Amb()

        print()
        x = amb([1, 2, 3])
        y = amb([4, 5, 6])

        for _dummy in amb(lambda x, y: x * y != 8):
            print('%s%s'% (x, y))"
t3mfw_2_3,t3mfw,Amb,Programming Concepts,Functional Programming,python,T2,Different Function Names,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values   = {}       
        self._func           = None     
        self._valueiterator  = None     
        self._funcargnames   = None     

    def __call__(self, arg=None):
        if hasattr(arg, '__code__'):                
            globls = arg.__globals__ if hasattr(arg, '__globals__') else arg.func_globals
            
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            for name in argv:
                if name not in self._names2values:
                    assert name in globls, \
                           % name
                    self._names2values[name] = globls[name]
            
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            arg = frozenset(arg)
            return arg
        else:
            return self._next_in_search()

    def _next_in_search(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        found = False
        for values in self._valueiterator:
            if arg(*values):
                found = True
                for n, v in zip(argv, values):
                    globls[n] = v
                break
        if not found: raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()
    next = __next__ 

if __name__ == '__main__':
    if True:
        amb_instance = Amb()

        print()
        x = amb_instance(range(1,11))
        y = amb_instance(range(1,11))
        z = amb_instance(range(1,11))

        for _dummy in amb_instance( lambda x, y, z: x*x + y*y == z*z ):
            print ('%s%s%s'% (x, y, z))


    if True:
        amb_instance = Amb()

        print()
        w1 = amb_instance([, , ])
        w2 = amb_instance([, , ])
        w3 = amb_instance([, , ])
        w4 = amb_instance([, ])

        for _dummy in amb_instance( lambda w1, w2, w3, w4: \
                             w1[-1] == w2[0] and \
                             w2[-1] == w3[0] and \
                             w3[-1] == w4[0] ):
            print ('%s%s%s%s'% (w1, w2, w3, w4))

    if True:
        amb_instance = Amb()

        print(
            )
        x = amb_instance([1, 2, 3])
        y = amb_instance([4, 5, 6])

        for _dummy in amb_instance( lambda x, y: x * y != 8 ):
            print ('%s%s'% (x, y))"
t3mfw_3_1,t3mfw,Amb,Programming Concepts,Functional Programming,python,T3,Added Statements,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values   = {}       
        self._func           = None     
        self._valueiterator  = None     
        self._funcargnames   = None     

    def __call__(self, arg=None):
        if hasattr(arg, '__code__'):                
            globls = arg.__globals__ if hasattr(arg, '__globals__') else arg.func_globals
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            for name in argv:
                if name not in self._names2values:
                    assert name in globls, \
                           '%s not found in globals' % name
                    self._names2values[name] = globls[name]
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            arg = frozenset(arg)
            return arg
        else:
            return self._nextinsearch()

    def _nextinsearch(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        found = False
        for values in self._valueiterator:
            if arg(*values):
                found = True
                for n, v in zip(argv, values):
                    globls[n] = v
                break
        if not found: 
            raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()
    next = __next__ 

if __name__ == '__main__':
    if True:
        amb = Amb()

        print(""Finding Pythagorean triples:"")
        x = amb(range(1,11))
        y = amb(range(1,11))
        z = amb(range(1,11))

        for _dummy in amb( lambda x, y, z: x*x + y*y == z*z ):
            print ('%s%s%s'% (x, y, z))


    if True:
        amb = Amb()

        print(""Finding sequences:"")
        w1 = amb([, , ])
        w2 = amb([, , ])
        w3 = amb([, , ])
        w4 = amb([, ])

        for _dummy in amb( lambda w1, w2, w3, w4: \
                             w1[-1] == w2[0] and \
                             w2[-1] == w3[0] and \
                             w3[-1] == w4[0] ):
            print ('%s%s%s%s'% (w1, w2, w3, w4))

    if True:
        amb = Amb()

        print(""Finding non-eight products:"")
        x = amb([1, 2, 3])
        y = amb([4, 5, 6])

        for _dummy in amb( lambda x, y: x * y != 8 ):
            print ('%s%s'% (x, y))"
t3mfw_3_2,t3mfw,Amb,Programming Concepts,Functional Programming,python,T3,Removed Statements,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values   = {}       
        self._func           = None     
        self._valueiterator  = None     
        self._funcargnames   = None     

    def __call__(self, arg=None):
        if hasattr(arg, '__code__'):                
            globls = arg.__globals__
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            for name in argv:
                if name not in self._names2values:
                    assert name in globls
                    self._names2values[name] = globls[name]
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            return frozenset(arg)
        else:
            return self._nextinsearch()

    def _nextinsearch(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        for values in self._valueiterator:
            if arg(*values):
                for n, v in zip(argv, values):
                    globls[n] = v
                return values
        raise StopIteration

    def __iter__(self):
        return self

    def __next__(self):
        return self()

if __name__ == '__main__':
    amb = Amb()
    print()
    x = amb(range(1,11))
    y = amb(range(1,11))
    z = amb(range(1,11))
    for _dummy in amb(lambda x, y, z: x*x + y*y == z*z):
        print('%s%s%s' % (x, y, z))

    amb = Amb()
    print()
    w1 = amb([, , ])
    w2 = amb([, , ])
    w3 = amb([, , ])
    w4 = amb([, ])
    for _dummy in amb(lambda w1, w2, w3, w4: w1[-1] == w2[0] and w2[-1] == w3[0] and w3[-1] == w4[0]):
        print('%s%s%s%s' % (w1, w2, w3, w4))

    amb = Amb()
    print()
    x = amb([1, 2, 3])
    y = amb([4, 5, 6])
    for _dummy in amb(lambda x, y: x * y != 8):
        print('%s%s' % (x, y))"
t3mfw_3_3,t3mfw,Amb,Programming Concepts,Functional Programming,python,T3,Reordered Statements,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values = {}
        self._func = None
        self._valueiterator = None
        self._funcargnames = None

    def __call__(self, arg=None):
        if arg is not None:
            arg = frozenset(arg)
            return arg
        elif hasattr(arg, '__code__'):
            globls = arg.__globals__ if hasattr(arg, '__globals__') else arg.func_globals
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            for name in argv:
                if name not in self._names2values:
                    assert name in globls, \
                           % name
                    self._names2values[name] = globls[name]
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        else:
            return self._nextinsearch()

    def _nextinsearch(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        found = False
        for values in self._valueiterator:
            if arg(*values):
                found = True
                for n, v in zip(argv, values):
                    globls[n] = v
                break
        if not found: raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()
    next = __next__

if __name__ == '__main__':
    if True:
        amb = Amb()

        print()
        x = amb(range(1,11))
        y = amb(range(1,11))
        z = amb(range(1,11))

        for _dummy in amb(lambda x, y, z: x*x + y*y == z*z):
            print('%s%s%s' % (x, y, z))

    if True:
        amb = Amb()

        print()
        w1 = amb([, , ])
        w2 = amb([, , ])
        w3 = amb([, , ])
        w4 = amb([, ])

        for _dummy in amb(lambda w1, w2, w3, w4: \
                           w1[-1] == w2[0] and \
                           w2[-1] == w3[0] and \
                           w3[-1] == w4[0]):
            print('%s%s%s%s' % (w1, w2, w3, w4))

    if True:
        amb = Amb()

        print()
        x = amb([1, 2, 3])
        y = amb([4, 5, 6])

        for _dummy in amb(lambda x, y: x * y != 8):
            print('%s%s' % (x, y))"
t3mfw_3_4,t3mfw,Amb,Programming Concepts,Functional Programming,python,T3,Control Flow Modifications,"import itertools as _itertools

class Amb(object):
    def __init__(self):
        self._names2values   = {}       
        self._func           = None     
        self._valueiterator  = None     
        self._funcargnames   = None     

    def __call__(self, arg=None):
        if hasattr(arg, '__code__'):
            globls = arg.__globals__ if hasattr(arg, '__globals__') else arg.func_globals
            
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            for name in argv:
                if name not in self._names2values:
                    assert name in globls, f""{name}""
                    self._names2values[name] = globls[name]
            
            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = _itertools.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            return frozenset(arg)
        return self._nextinsearch()

    def _nextinsearch(self):
        arg = self._func
        globls = arg.__globals__
        argv = self._funcargnames
        for values in self._valueiterator:
            if arg(*values):
                for n, v in zip(argv, values):
                    globls[n] = v
                return values
        raise StopIteration

    def __iter__(self):
        return self

    def __next__(self):
        return self()

if __name__ == '__main__':
    amb = Amb()

    print()
    x = amb(range(1, 11))
    y = amb(range(1, 11))
    z = amb(range(1, 11))

    for _dummy in amb(lambda x, y, z: x*x + y*y == z*z):
        print('%s%s%s' % (x, y, z))

    amb = Amb()

    print()
    w1 = amb([, , ])
    w2 = amb([, , ])
    w3 = amb([, , ])
    w4 = amb([, ])

    for _dummy in amb(lambda w1, w2, w3, w4: \
                       w1[-1] == w2[0] and \
                       w2[-1] == w3[0] and \
                       w3[-1] == w4[0]):
        print('%s%s%s%s' % (w1, w2, w3, w4))

    amb = Amb()

    print()
    x = amb([1, 2, 3])
    y = amb([4, 5, 6])

    for _dummy in amb(lambda x, y: x * y != 8):
        print('%s%s' % (x, y))"
t3mfw_4_1,t3mfw,Amb,Programming Concepts,Functional Programming,python,T4,Same Language,"import itertools as it

class Amb:
    def __init__(self):
        self._names2values = {}
        self._func = None
        self._valueiterator = None
        self._funcargnames = None

    def __call__(self, arg=None):
        if callable(arg):
            globls = arg.__globals__
            argv = arg.__code__.co_varnames[:arg.__code__.co_argcount]
            self._names2values.update({name: globls[name] for name in argv if name not in self._names2values and name in globls})

            valuesets = [self._names2values[name] for name in argv]
            self._valueiterator = it.product(*valuesets)
            self._func = arg
            self._funcargnames = argv
            return self
        elif arg is not None:
            return frozenset(arg)
        return self._nextinsearch()

    def _nextinsearch(self):
        found = False
        for values in self._valueiterator:
            if self._func(*values):
                found = True
                for n, v in zip(self._funcargnames, values):
                    self._func.__globals__[n] = v
                break
        if not found: raise StopIteration
        return values

    def __iter__(self):
        return self

    def __next__(self):
        return self()

if __name__ == '__main__':
    amb = Amb()
    print()
    x, y, z = amb(range(1,11)), amb(range(1,11)), amb(range(1,11))
    for _ in amb(lambda x, y, z: x*x + y*y == z*z):
        print('%s%s%s' % (x, y, z))

    amb = Amb()
    print()
    w1, w2, w3, w4 = amb([, , ]), amb([, , ]), amb([, , ]), amb([, ])
    for _ in amb(lambda w1, w2, w3, w4: w1[-1] == w2[0] and w2[-1] == w3[0] and w3[-1] == w4[0]):
        print('%s%s%s%s' % (w1, w2, w3, w4))

    amb = Amb()
    print()
    x, y = amb([1, 2, 3]), amb([4, 5, 6])
    for _ in amb(lambda x, y: x * y != 8):
        print('%s%s' % (x, y))"
t3mfw_4_2,t3mfw,Amb,Programming Concepts,Functional Programming,go,T4,Different Language,"package main

import (
    ""fmt""
    ""sync""
)

func ambStrings(ss []string) chan []string {
    c := make(chan []string)
    go func() {
        for _, s := range ss {
            c <- []string{s}
        }
        close(c)
    }()
    return c
}

func ambChain(ss []string, cIn chan []string) chan []string {
    cOut := make(chan []string)
    go func() {
        var w sync.WaitGroup
        for chain := range cIn {
            w.Add(1)
            go func(chain []string) {
                for s1 := range ambStrings(ss) {
                    if s1[0][len(s1[0])-1] == chain[0][0] {
                        cOut <- append(s1, chain...)
                    }
                }
                w.Done()
            }(chain)
        }
        w.Wait()
        close(cOut)
    }()
    return cOut
}

func main() {
    s1 := []string{""the"", ""that"", ""a""}
    s2 := []string{""frog"", ""elephant"", ""thing""}
    s3 := []string{""walked"", ""treaded"", ""grows""}
    s4 := []string{""slowly"", ""quickly""}
    c := ambChain(s1, ambChain(s2, ambChain(s3, ambStrings(s4))))
    for s := range c {
        fmt.Println(s)
    }
}"
t3mfw_4_2,t3mfw,Amb,Programming Concepts,Functional Programming,javascript,T4,Different Language,"function ambRun(func) {
    var choices = [];
    var index;

    function amb(values) {
        if (values.length == 0) {
            fail();
        }
        if (index == choices.length) {
            choices.push({i: 0,
                          count: values.length});
        }
        var choice = choices[index++];
        return values[choice.i];
    }

    function fail() { throw fail; }

    while (true) {
        try {
            index = 0;
            return func(amb, fail);
        } catch (e) {
            if (e != fail) {
                throw e;
            }
            var choice;
            while ((choice = choices.pop()) && ++choice.i == choice.count) {}
            if (choice == undefined) {
                return undefined;
            }
            choices.push(choice);
        }
    }
}

ambRun(function(amb, fail) {
    function linked(s1, s2) {
        return s1.slice(-1) == s2.slice(0, 1);
    }

    var w1 = amb([""the"", ""that"", ""a""]);
    var w2 = amb([""frog"", ""elephant"", ""thing""]);
    if (!linked(w1, w2)) fail();

    var w3 = amb([""walked"", ""treaded"", ""grows""]);
    if (!linked(w2, w3)) fail();

    var w4 = amb([""slowly"", ""quickly""]);
    if (!linked(w3, w4)) fail();

    return [w1, w2, w3, w4].join(' ');
});"
t3mfw_4_2,t3mfw,Amb,Programming Concepts,Functional Programming,ruby,T4,Different Language,"require 

class Amb
  class ExhaustedError < RuntimeError; end

  def initialize
    @fail = proc { fail ExhaustedError,  }
  end

  def choose(*choices)
    prev_fail = @fail
    callcc { |sk|
      choices.each { |choice|
	callcc { |fk|
	  @fail = proc {
	    @fail = prev_fail
	    fk.call(:fail)
	  }
	  if choice.respond_to? :call
	    sk.call(choice.call)
	  else
	    sk.call(choice)
	  end
	}
      }
      @fail.call
    }
  end

  def failure
    choose
  end

  def assert(cond)
    failure unless cond
  end
end

A = Amb.new
w1 = A.choose(, , )
w2 = A.choose(, , )
w3 = A.choose(, , )
w4 = A.choose(, )

A.choose() unless w1[-1] == w2[0]
A.choose() unless w2[-1] == w3[0]
A.choose() unless w3[-1] == w4[0]

puts w1, w2, w3, w4"
c279q_1_1,c279q,Amicable pairs,Mathematics,Number Theory,python,T1,Identical Clone,"from proper_divisors import proper_divs

def amicable(rangemax=20000):
    n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
    for num, divsum in n2divsum.items():
        if num < divsum and divsum <= rangemax and n2divsum[divsum] == num:
            yield num, divsum

if __name__ == '__main__':
    for num, divsum in amicable():
        print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r'
             % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_1_2,c279q,Amicable pairs,Mathematics,Number Theory,python,T1,Different Whitespaces,"from proper_divisors import proper_divs
def amicable(rangemax=20000):
 n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
 for num, divsum in n2divsum.items():
  if num < divsum and divsum <= rangemax and n2divsum[divsum] == num:
   yield num, divsum
if __name__ == '__main__':
 for num, divsum in amicable():
  print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r'
        % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_1_3,c279q,Amicable pairs,Mathematics,Number Theory,python,T1,Different Comments,"from proper_divisors import proper_divs

def amicable(rangemax=20000):
    n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
    for num, divsum in n2divsum.items():
        if num < divsum and divsum <= rangemax and n2divsum[divsum] == num:
            yield num, divsum

if __name__ == '__main__':
    for num, divsum in amicable():
        print('Amicable pair: %i and %i With proper divisors:\n   %r\n   %r'
             % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_1_4,c279q,Amicable pairs,Mathematics,Number Theory,python,T1,Different Formatting,"from proper_divisors import proper_divs

def amicable(rangemax=20000):
    n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
    for num, divsum in n2divsum.items():
        if num < divsum and divsum <= rangemax and n2divsum[divsum] == num:
            yield num, divsum

if __name__ == '__main__':
    for num, divsum in amicable():
        print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r' % 
              (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_2_1,c279q,Amicable pairs,Mathematics,Number Theory,python,T2,Different Variable Names,"from proper_divisors import proper_divs

def amicable(max_range=20000):
    number_to_divisor_sum = {num: sum(proper_divs(num)) for num in range(1, max_range + 1)}
    for value, divisor_sum in number_to_divisor_sum.items():
        if value < divisor_sum and divisor_sum <= max_range and number_to_divisor_sum[divisor_sum] == value:
            yield value, divisor_sum

if __name__ == '__main__':
    for value, divisor_sum in amicable():
        print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r'
             % (value, divisor_sum, sorted(proper_divs(value)), sorted(proper_divs(divisor_sum))))"
c279q_2_2,c279q,Amicable pairs,Mathematics,Number Theory,python,T2,Different Data Types,"from proper_divisors import proper_divs

def amicable(rangemax=int(20000)):
    n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
    for num, divsum in n2divsum.items():
        if num < divsum and divsum <= rangemax and n2divsum[divsum] == num:
            yield num, divsum

if __name__ == '__main__':
    for num, divsum in amicable():
        print('Amicable pair:%d and%d With proper divisors:\n   %s\n   %s'
             % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_2_3,c279q,Amicable pairs,Mathematics,Number Theory,python,T2,Different Function Names,"from proper_divisors import proper_divs

def find_amicable_pairs(rangemax=20000):
    n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
    for num, divsum in n2divsum.items():
        if num < divsum and divsum <= rangemax and n2divsum[divsum] == num:
            yield num, divsum

if __name__ == '__main__':
    for num, divsum in find_amicable_pairs():
        print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r'
             % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_3_1,c279q,Amicable pairs,Mathematics,Number Theory,python,T3,Added Statements,"from proper_divisors import proper_divs

def find_amicable_pairs(max_range=20000):
    divisor_sum = {n: sum(proper_divs(n)) for n in range(1, max_range + 1)}
    for number, total in divisor_sum.items():
        if number < total < max_range and divisor_sum.get(total) == number:
            yield number, total

if __name__ == '__main__':
    for number, total in find_amicable_pairs():
        print('Amicable pair: %i and %i With proper divisors:\n   %r\n   %r'
              % (number, total, sorted(proper_divs(number)), sorted(proper_divs(total))))"
c279q_3_2,c279q,Amicable pairs,Mathematics,Number Theory,python,T3,Removed Statements,"from proper_divisors import proper_divs

def amicable(rangemax=20000):
    n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
    for num, divsum in n2divsum.items():
        if num < divsum <= rangemax and n2divsum[divsum] == num:
            yield num, divsum

if __name__ == '__main__':
    for num, divsum in amicable():
        print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r' % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_3_3,c279q,Amicable pairs,Mathematics,Number Theory,python,T3,Reordered Statements,"from proper_divisors import proper_divs

def amicable(rangemax=20000):
    n2divsum = {n: sum(proper_divs(n)) for n in range(1, rangemax + 1)}
    for num in n2divsum:
        divsum = n2divsum[num]
        if num < divsum and divsum <= rangemax and n2divsum[divsum] == num:
            yield num, divsum

if __name__ == '__main__':
    for num, divsum in amicable():
        print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r'
             % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_3_4,c279q,Amicable pairs,Mathematics,Number Theory,python,T3,Control Flow Modifications,"from proper_divisors import proper_divs

def amicable(rangemax=20000):
    n2divsum = {}
    for n in range(1, rangemax + 1):
        n2divsum[n] = sum(proper_divs(n))
    for num in n2divsum:
        divsum = n2divsum[num]
        if num < divsum <= rangemax and n2divsum.get(divsum) == num:
            yield num, divsum

if __name__ == '__main__':
    amicable_pairs = amicable()
    while True:
        try:
            num, divsum = next(amicable_pairs)
            print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r'
                 % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))
        except StopIteration:
            break"
c279q_4_1,c279q,Amicable pairs,Mathematics,Number Theory,python,T4,Same Language,"from proper_divisors import proper_divs

def find_amicable_pairs(max_limit=20000):
    divisor_sums = {}
    for n in range(1, max_limit + 1):
        divisor_sums[n] = sum(proper_divs(n))
    
    amicable_pairs = []
    for num in divisor_sums:
        divsum = divisor_sums[num]
        if num < divsum <= max_limit and divisor_sums.get(divsum) == num:
            amicable_pairs.append((num, divsum))
    
    return amicable_pairs

if __name__ == '__main__':
    pairs = find_amicable_pairs()
    for num, divsum in pairs:
        print('Amicable pair:%i and%i With proper divisors:\n   %r\n   %r'
              % (num, divsum, sorted(proper_divs(num)), sorted(proper_divs(divsum))))"
c279q_4_2,c279q,Amicable pairs,Mathematics,Number Theory,go,T4,Different Language,"package main

import ""fmt""

func pfacSum(i int) int {
    sum := 0
    for p := 1; p <= i/2; p++ {
        if i%p == 0 {
            sum += p
        }
    }
    return sum
}

func main() {
    var a[20000]int
    for i := 1; i < 20000; i++ {
        a[i] = pfacSum(i)
    }
    fmt.Println(""The amicable pairs below 20,000 are:"")
    for n := 2; n < 19999; n++ {
        m := a[n]
        if m > n && m < 20000 && n == a[m] {
            fmt.Printf("" %5d and%5d\n"", n, m)
        } 
    }
}"
c279q_4_2,c279q,Amicable pairs,Mathematics,Number Theory,java,T4,Different Language,"import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.LongStream;

public class AmicablePairs {

    public static void main(String[] args) {
        int limit = 20_000;

        Map<Long, Long> map = LongStream.rangeClosed(1, limit)
                .parallel()
                .boxed()
                .collect(Collectors.toMap(Function.identity(), AmicablePairs::properDivsSum));

        LongStream.rangeClosed(1, limit)
                .forEach(n -> {
                    long m = map.get(n);
                    if (m > n && m <= limit && map.get(m) == n)
                        System.out.printf(""%s%s%n"", n, m);
                });
    }

    public static Long properDivsSum(long n) {
        return LongStream.rangeClosed(1, (n + 1) / 2).filter(i -> n % i == 0).sum();
    }
}"
c279q_4_2,c279q,Amicable pairs,Mathematics,Number Theory,javascript,T4,Different Language,(function (max) {
c279q_4_2,c279q,Amicable pairs,Mathematics,Number Theory,php,T4,Different Language,"<?php

function sumDivs ($n) {
    $sum = 1;
    for ($d = 2; $d <= sqrt($n); $d++) {
        if ($n % $d == 0) $sum += $n / $d + $d;
    }
    return $sum;
}

for ($n = 2; $n < 20000; $n++) {
    $m = sumDivs($n);
    if ($m > $n) {
        if (sumDivs($m) == $n) echo $n..$m.;
    }
}

?>"
c279q_4_2,c279q,Amicable pairs,Mathematics,Number Theory,ruby,T4,Different Language,"h = {}
(1..20_000).each{|n| h[n] = n.proper_divisors.sum }
h.select{|k,v| h[v] == k && k < v}.each do |key,val|  
  puts 
end"
xsqwr_1_1,xsqwr,Anagrams,Programming Concepts,String Operations,python,T1,Identical Clone,">>> import urllib.request
>>> from collections import defaultdict
>>> words = urllib.request.urlopen('http:
>>> anagram = defaultdict(list) 
>>> for word in words:
	anagram[tuple(sorted(word))].append( word )


>>> count = max(len(ana) for ana in anagram.values())
>>> for ana in anagram.values():
	if len(ana) >= count:
		print ([x.decode() for x in ana])"
xsqwr_1_2,xsqwr,Anagrams,Programming Concepts,String Operations,python,T1,Different Whitespaces,"import urllib.request
from collections import defaultdict
words = urllib.request.urlopen('http:
anagram = defaultdict(list)
for word in words:
 anagram[tuple(sorted(word))].append(word)
count = max(len(ana) for ana in anagram.values())
for ana in anagram.values():
 if len(ana) >= count:
  print([x.decode() for x in ana])"
xsqwr_1_3,xsqwr,Anagrams,Programming Concepts,String Operations,python,T1,Different Comments,"import urllib.request
from collections import defaultdict
words = urllib.request.urlopen('http:
anagram = defaultdict(list) 
for word in words:
	anagram[tuple(sorted(word))].append(word)

count = max(len(ana) for ana in anagram.values())
for ana in anagram.values():
	if len(ana) >= count:
		print([x.decode() for x in ana])"
xsqwr_1_4,xsqwr,Anagrams,Programming Concepts,String Operations,python,T1,Different Formatting,"import urllib.request
from collections import defaultdict
words = urllib.request.urlopen('http:')
anagram = defaultdict(list) 
for word in words:
    anagram[tuple(sorted(word))].append(word)
count = max(len(ana) for ana in anagram.values())
for ana in anagram.values():
    if len(ana) >= count:
        print([x.decode() for x in ana])"
xsqwr_2_1,xsqwr,Anagrams,Programming Concepts,String Operations,python,T2,Different Variable Names,"import urllib.request
from collections import defaultdict
text_source = urllib.request.urlopen('http:')
groups = defaultdict(list) 
for item in text_source:
    groups[tuple(sorted(item))].append(item)

maximum_count = max(len(group) for group in groups.values())
for group in groups.values():
    if len(group) >= maximum_count:
        print([element.decode() for element in group])"
xsqwr_2_2,xsqwr,Anagrams,Programming Concepts,String Operations,python,T2,Different Data Types,"import urllib.request
from collections import defaultdict
words = urllib.request.urlopen('http:
anagram = defaultdict(list) 
for word in words:
    anagram[frozenset(word)].append(word)

count = max(len(ana) for ana in anagram.values())
for ana in anagram.values():
    if len(ana) >= count:
        print([x.decode('utf-8') for x in ana])"
xsqwr_2_3,xsqwr,Anagrams,Programming Concepts,String Operations,python,T2,Different Function Names,"import urllib.request
from collections import defaultdict
words = urllib.request.urlopen('http:
anagram_dict = defaultdict(list) 
for word in words:
	anagram_dict[tuple(sorted(word))].append(word)

max_count = max(len(group) for group in anagram_dict.values())
for group in anagram_dict.values():
	if len(group) >= max_count:
		print([x.decode() for x in group])"
xsqwr_3_1,xsqwr,Anagrams,Programming Concepts,String Operations,python,T3,Added Statements,"import urllib.request
from collections import defaultdict
response = urllib.request.urlopen('http:
words = response.readlines()
anagram = defaultdict(list) 
for word in words:
    sorted_word = tuple(sorted(word))
    anagram[sorted_word].append(word)

count = max(len(ana) for ana in anagram.values())
for ana in anagram.values():
    if len(ana) >= count:
        print([x.decode('utf-8') for x in ana])"
xsqwr_3_2,xsqwr,Anagrams,Programming Concepts,String Operations,python,T3,Removed Statements,"import urllib.request
from collections import defaultdict
words = urllib.request.urlopen('http:')
anagram = defaultdict(list)
for word in words:
	anagram[tuple(sorted(word))].append(word)
count = max(len(ana) for ana in anagram.values())
for ana in anagram.values():
	if len(ana) >= count:
		print([x.decode() for x in ana])"
xsqwr_3_3,xsqwr,Anagrams,Programming Concepts,String Operations,python,T3,Reordered Statements,">>> import urllib.request
>>> from collections import defaultdict
>>> anagram = defaultdict(list) 
>>> words = urllib.request.urlopen('http:
>>> for word in words:
	anagram[tuple(sorted(word))].append(word)

>>> count = max(len(ana) for ana in anagram.values())
>>> for ana in anagram.values():
	if len(ana) >= count:
		print([x.decode() for x in ana])"
xsqwr_3_4,xsqwr,Anagrams,Programming Concepts,String Operations,python,T3,Control Flow Modifications,"import urllib.request
from collections import defaultdict
words = urllib.request.urlopen('http:
anagram = defaultdict(list) 
for word in words:
    sorted_word = tuple(sorted(word))
    anagram[sorted_word].append(word)

count = 0
for ana in anagram.values():
    count = max(count, len(ana))

for ana in anagram.values():
    if len(ana) == count:
        print([x.decode() for x in ana])"
xsqwr_4_1,xsqwr,Anagrams,Programming Concepts,String Operations,python,T4,Same Language,"import urllib.request
from collections import defaultdict

words = urllib.request.urlopen('http://example.com/words.txt')
anagram = defaultdict(list)

for word in words:
    sorted_word = tuple(sorted(word))
    anagram[sorted_word].append(word)

max_count = max(len(ana) for ana in anagram.values())
result = [x.decode() for ana in anagram.values() if len(ana) >= max_count for x in ana]
print(result)"
xsqwr_4_2,xsqwr,Anagrams,Programming Concepts,String Operations,go,T4,Different Language,"package main

import (
    ""bytes""
    ""fmt""
    ""io/ioutil""
    ""net/http""
    ""sort""
)

func main() {
    r, err := http.Get(""http:"
xsqwr_4_2,xsqwr,Anagrams,Programming Concepts,String Operations,java,T4,Different Language,"import java.net.*;
import java.io.*;
import java.util.*;

public class WordsOfEqChars {
    public static void main(String[] args) throws IOException {
        URL url = new URL(""http:"
xsqwr_4_2,xsqwr,Anagrams,Programming Concepts,String Operations,javascript,T4,Different Language,"var fs = require('fs');
var words = fs.readFileSync('unixdict.txt', 'UTF-8').split('\n');

var i, item, max = 0,
    anagrams = {};

for (i = 0; i < words.length; i += 1) {
  var key = words[i].split('').sort().join('');
  if (!anagrams.hasOwnProperty(key)) {"
xsqwr_4_2,xsqwr,Anagrams,Programming Concepts,String Operations,php,T4,Different Language,"<?php
$words = explode(, file_get_contents('http:
foreach ($words as $word) {
    $chars = str_split($word);
    sort($chars);
    $anagram[implode($chars)][] = $word;
}

$best = max(array_map('count', $anagram));
foreach ($anagram as $ana)
    if (count($ana) == $best)
        print_r($ana);
?>"
xsqwr_4_2,xsqwr,Anagrams,Programming Concepts,String Operations,ruby,T4,Different Language,"require 'open-uri'

anagram = Hash.new {|hash, key| hash[key] = []} 

URI.open('http:
  words = f.read.split
  for word in words
    anagram[word.split('').sort] << word
  end
end

count = anagram.values.map {|ana| ana.length}.max
anagram.each_value do |ana|
  if ana.length >= count
    p ana
  end
end"
u4wvd_1_1,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T1,Identical Clone,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http:
    return list(set(urllib.request.urlopen(url).read().decode().split()))

def find_anagrams(words):
    anagram = defaultdict(list) 
    for word in words:
        anagram[tuple(sorted(word))].append( word )
    return dict((key, words) for key, words in anagram.items()
                if len(words) > 1)

def is_deranged(words):
    'returns pairs of words that have no character in the same position'
    return [ (word1, word2)
             for word1,word2 in combinations(words, 2)
             if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2)) ]

def largest_deranged_ana(anagrams):
    ordered_anagrams = sorted(anagrams.items(),
                              key=lambda x:(-len(x[0]), x[0]))
    for _, words in ordered_anagrams:
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = getwords('http:
    print(, len(words))

    anagrams = find_anagrams(words)
    print(, len(anagrams),)

    print()
    print('  ' + '\n  '.join(', '.join(pairs)
                             for pairs in largest_deranged_ana(anagrams)))"
u4wvd_1_2,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T1,Different Whitespaces,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http:
 return list(set(urllib.request.urlopen(url).read().decode().split()))

def find_anagrams(words):
 anagram = defaultdict(list) 
 for word in words:
  anagram[tuple(sorted(word))].append(word)
 return dict((key, words) for key, words in anagram.items()
             if len(words) > 1)

def is_deranged(words):
 return [(word1, word2)
         for word1, word2 in combinations(words, 2)
         if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2))]

def largest_deranged_ana(anagrams):
 ordered_anagrams = sorted(anagrams.items(),
                           key=lambda x: (-len(x[0]), x[0]))
 for _, words in ordered_anagrams:
  deranged_pairs = is_deranged(words)
  if deranged_pairs:
   return deranged_pairs
 return []

if __name__ == '__main__':
 words = getwords('http:
 print(, len(words))

 anagrams = find_anagrams(words)
 print(, len(anagrams),)

 print()
 print('  ' + '\n  '.join(', '.join(pairs)
                           for pairs in largest_deranged_ana(anagrams)))"
u4wvd_1_3,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T1,Different Comments,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http:'):
    return list(set(urllib.request.urlopen(url).read().decode().split()))

def find_anagrams(words):
    anagram = defaultdict(list) 
    for word in words:
        anagram[tuple(sorted(word))].append(word)
    return dict((key, words) for key, words in anagram.items() if len(words) > 1)

def is_deranged(words):
    return [(word1, word2) for word1, word2 in combinations(words, 2) if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2))]

def largest_deranged_ana(anagrams):
    ordered_anagrams = sorted(anagrams.items(), key=lambda x: (-len(x[0]), x[0]))
    for _, words in ordered_anagrams:
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = getwords('http:')
    print(len(words))

    anagrams = find_anagrams(words)
    print(len(anagrams))

    print()
    print('  ' + '\n  '.join(', '.join(pairs) for pairs in largest_deranged_ana(anagrams)))"
u4wvd_1_4,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T1,Different Formatting,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http:'):
    return list(set(urllib.request.urlopen(url).read().decode().split()))

def find_anagrams(words):
    anagram = defaultdict(list) 
    for word in words:
        anagram[tuple(sorted(word))].append(word)
    return dict((key, words) for key, words in anagram.items() if len(words) > 1)

def is_deranged(words):
    return [(word1, word2) for word1, word2 in combinations(words, 2) if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2))]

def largest_deranged_ana(anagrams):
    ordered_anagrams = sorted(anagrams.items(), key=lambda x: (-len(x[0]), x[0]))
    for _, words in ordered_anagrams:
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = getwords('http:')
    print(len(words))
    anagrams = find_anagrams(words)
    print(len(anagrams))
    print()
    print('  ' + '\n  '.join(', '.join(pairs) for pairs in largest_deranged_ana(anagrams)))"
u4wvd_2_1,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T2,Different Variable Names,"import urllib.request
from collections import defaultdict
from itertools import combinations

def fetch_words(source='http:
    return list(set(urllib.request.urlopen(source).read().decode().split()))

def locate_anagrams(term_list):
    anagram_dict = defaultdict(list) 
    for term in term_list:
        anagram_dict[tuple(sorted(term))].append(term)
    return dict((key, terms) for key, terms in anagram_dict.items()
                if len(terms) > 1)

def identify_deranged(term_list):
    'returns pairs of terms that have no character in the same position'
    return [ (first_term, second_term)
             for first_term, second_term in combinations(term_list, 2)
             if all(char1 != char2 for char1, char2 in zip(first_term, second_term)) ]

def largest_deranged_anagram(anagram_data):
    sorted_anagrams = sorted(anagram_data.items(),
                              key=lambda x:(-len(x[0]), x[0]))
    for _, terms in sorted_anagrams:
        deranged_pairs = identify_deranged(terms)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    term_list = fetch_words('http:
    print(, len(term_list))

    anagram_data = locate_anagrams(term_list)
    print(, len(anagram_data),)

    print()
    print('  ' + '\n  '.join(', '.join(pair)
                             for pair in largest_deranged_anagram(anagram_data)))"
u4wvd_2_2,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T2,Different Data Types,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http:'):
    return list(set(urllib.request.urlopen(url).read().decode().split()))

def find_anagrams(words):
    anagram = defaultdict(list) 
    for word in words:
        anagram[frozenset(word)].append(word)
    return dict((key, words) for key, words in anagram.items()
                if len(words) > 1)

def is_deranged(words):
    return [ (word1, word2)
             for word1, word2 in combinations(words, 2)
             if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2)) ]

def largest_deranged_ana(anagrams):
    ordered_anagrams = sorted(anagrams.items(),
                              key=lambda x: (-len(x[0]), x[0]))
    for _, words in ordered_anagrams:
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = getwords('http:')
    print(len(words))

    anagrams = find_anagrams(words)
    print(len(anagrams))

    print()
    print('  ' + '\n  '.join(', '.join(pairs)
                             for pairs in largest_deranged_ana(anagrams)))"
u4wvd_2_3,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T2,Different Function Names,"import urllib.request
from collections import defaultdict
from itertools import combinations

def fetch_words(url='http:'):
    return list(set(urllib.request.urlopen(url).read().decode().split()))

def discover_anagrams(words):
    anagram_dict = defaultdict(list) 
    for word in words:
        anagram_dict[tuple(sorted(word))].append(word)
    return dict((key, words) for key, words in anagram_dict.items()
                if len(words) > 1)

def check_deranged(words):
    return [(word1, word2)
            for word1, word2 in combinations(words, 2)
            if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2))]

def find_largest_deranged_anagram(anagrams):
    ordered_anagram_list = sorted(anagrams.items(),
                                   key=lambda x: (-len(x[0]), x[0]))
    for _, words in ordered_anagram_list:
        deranged_pairs = check_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = fetch_words('http:')
    print(len(words))

    anagrams = discover_anagrams(words)
    print(len(anagrams))

    print()
    print('  ' + '\n  '.join(', '.join(pairs)
                               for pairs in find_largest_deranged_anagram(anagrams)))"
u4wvd_3_1,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T3,Added Statements,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http://'):
    return list(set(urllib.request.urlopen(url).read().decode().split()))

def find_anagrams(words):
    anagram = defaultdict(list) 
    for word in words:
        anagram[tuple(sorted(word))].append(word)
    return {key: words for key, words in anagram.items() if len(words) > 1}

def is_deranged(words):
    return [(word1, word2) for word1, word2 in combinations(words, 2) if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2))]

def largest_deranged_ana(anagrams):
    ordered_anagrams = sorted(anagrams.items(), key=lambda x: (-len(x[0]), x[0]))
    for _, words in ordered_anagrams:
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = getwords('http://')
    print(""Total words:"", len(words))

    anagrams = find_anagrams(words)
    print(""Total anagrams:"", len(anagrams))

    print()
    print('  ' + '\n  '.join(', '.join(pair) for pair in largest_deranged_ana(anagrams)))"
u4wvd_3_2,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T3,Removed Statements,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http:'):
    return list(set(urllib.request.urlopen(url).read().decode().split()))

def find_anagrams(words):
    anagram = defaultdict(list) 
    for word in words:
        anagram[tuple(sorted(word))].append(word)
    return {key: words for key, words in anagram.items() if len(words) > 1}

def is_deranged(words):
    return [(word1, word2) for word1, word2 in combinations(words, 2) if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2))]

def largest_deranged_ana(anagrams):
    for _, words in sorted(anagrams.items(), key=lambda x: (-len(x[0]), x[0])):
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = getwords('http:')
    anagrams = find_anagrams(words)
    print('  ' + '\n  '.join(', '.join(pairs) for pairs in largest_deranged_ana(anagrams)))"
u4wvd_3_3,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T3,Reordered Statements,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http:'):
    return list(set(urllib.request.urlopen(url).read().decode().split()))

def find_anagrams(words):
    anagram = defaultdict(list) 
    for word in words:
        anagram[tuple(sorted(word))].append(word)
    return dict((key, words) for key, words in anagram.items() if len(words) > 1)

def is_deranged(words):
    return [(word1, word2) for word1, word2 in combinations(words, 2) if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2))]

def largest_deranged_ana(anagrams):
    ordered_anagrams = sorted(anagrams.items(), key=lambda x: (-len(x[0]), x[0]))
    for _, words in ordered_anagrams:
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = getwords('http:')
    anagrams = find_anagrams(words)
    
    print(len(words))
    print(len(anagrams))
    print()
    print('  ' + '\n  '.join(', '.join(pairs) for pairs in largest_deranged_ana(anagrams)))"
u4wvd_3_4,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T3,Control Flow Modifications,"import urllib.request
from collections import defaultdict
from itertools import combinations

def getwords(url='http:'):
    response = urllib.request.urlopen(url).read().decode()
    return list(set(response.split()))

def find_anagrams(words):
    anagram = defaultdict(list)
    for word in words:
        sorted_word = tuple(sorted(word))
        anagram[sorted_word].append(word)
    return {key: words for key, words in anagram.items() if len(words) > 1}

def is_deranged(words):
    return [(word1, word2) for word1, word2 in combinations(words, 2) if all(ch1 != ch2 for ch1, ch2 in zip(word1, word2))]

def largest_deranged_ana(anagrams):
    ordered_anagrams = sorted(anagrams.items(), key=lambda x: (-len(x[0]), x[0]))
    for words in (words for _, words in ordered_anagrams):
        deranged_pairs = is_deranged(words)
        if deranged_pairs:
            return deranged_pairs
    return []

if __name__ == '__main__':
    words = getwords('http:')
    print(len(words))

    anagrams = find_anagrams(words)
    print(len(anagrams))

    print()
    print('  ' + '\n  '.join(', '.join(pairs) for pairs in largest_deranged_ana(anagrams)))"
u4wvd_4_1,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,python,T4,Same Language,"import urllib.request
from collections import defaultdict
from itertools import combinations

def fetch_words(url='http:'):
    response = urllib.request.urlopen(url)
    text = response.read().decode()
    return list(set(text.split()))

def group_anagrams(words):
    anagram_map = defaultdict(list)
    for word in words:
        key = tuple(sorted(word))
        anagram_map[key].append(word)
    return {key: value for key, value in anagram_map.items() if len(value) > 1}

def find_deranged_pairs(words):
    return [(w1, w2) for w1, w2 in combinations(words, 2) if all(c1 != c2 for c1, c2 in zip(w1, w2))]

def get_largest_deranged_anagrams(anagrams):
    sorted_anagrams = sorted(anagrams.items(), key=lambda x: (-len(x[0]), x[0]))
    for _, word_list in sorted_anagrams:
        deranged = find_deranged_pairs(word_list)
        if deranged:
            return deranged
    return []

if __name__ == '__main__':
    words = fetch_words('http:')
    print(len(words))

    anagrams = group_anagrams(words)
    print(len(anagrams))

    print()
    result = ['  ' + ', '.join(pair) for pair in get_largest_deranged_anagrams(anagrams)]
    print('\n  '.join(result))"
u4wvd_4_2,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,go,T4,Different Language,"package main
import (
	""fmt""
	""io/ioutil""
	""strings""
	""sort""
)

func deranged(a, b string) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range(a) {
		if a[i] == b[i] { return false }
	}
	return true
}

func main() {
	
	buf, _ := ioutil.ReadFile(""unixdict.txt"")
	words := strings.Split(string(buf), ""\n"")

	m := make(map[string] []string)
	best_len, w1, w2 := 0, """", """"

	for _, w := range(words) {"
u4wvd_4_2,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,java,T4,Different Language,"import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DerangedAnagrams {

    public static void main(String[] args) throws IOException {
        List<String> words = Files.readAllLines(new File(""unixdict.txt"").toPath());
        printLongestDerangedAnagram(words);
    }

    private static void printLongestDerangedAnagram(List<String> words) {
        words.sort(Comparator.comparingInt(String::length).reversed().thenComparing(String::toString));

        Map<String, ArrayList<String>> map = new HashMap<>();
        for (String word : words) {
            char[] chars = word.toCharArray();
            Arrays.sort(chars);
            String key = String.valueOf(chars);

            List<String> anagrams = map.computeIfAbsent(key, k -> new ArrayList<>());
            for (String anagram : anagrams) {
                if (isDeranged(word, anagram)) {
                    System.out.printf(""%s%s%n"", anagram, word);
                    return;
                }
            }
            anagrams.add(word);
        }
        System.out.println(""no result"");
    }

    private static boolean isDeranged(String word1, String word2) {
        for (int i = 0; i < word1.length(); i++) {
            if (word1.charAt(i) == word2.charAt(i)) {
                return false;
            }
        }
        return true;
    }
}"
u4wvd_4_2,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,javascript,T4,Different Language,"#!/usr/bin/env js

function main() {
    var wordList = read('unixdict.txt').split(/\s+/);
    var anagrams = findAnagrams(wordList);
    var derangedAnagrams = findDerangedAnagrams(anagrams);
    var longestPair = findLongestDerangedPair(derangedAnagrams);
    print(longestPair.join(' '));

}

function findLongestDerangedPair(danas) {
    var longestLen = danas[0][0].length;
    var longestPair = danas[0];
    for (var i in danas) {
        if (danas[i][0].length > longestLen) {
            longestLen = danas[i][0].length;
            longestPair = danas[i];
        }
    }
    return longestPair;
}

function findDerangedAnagrams(anagrams) {
    var deranged = [];

    function isDeranged(w1, w2) {
        for (var c = 0; c < w1.length; c++) {
            if (w1[c] == w2[c]) {
                return false;
            }
        }
        return true;
    }

    function findDeranged(anas) {
        for (var a = 0; a < anas.length; a++) {
            for (var b = a + 1; b < anas.length; b++) {
                if (isDeranged(anas[a], anas[b])) {
                    deranged.push([anas[a], anas[b]]);
                }   
            }
        }
    }

    for (var a in anagrams) {
        var anas = anagrams[a];
        findDeranged(anas);
    }

    return deranged;
}

function findAnagrams(wordList) {
    var anagrams = {};

    for (var wordNum in wordList) {
        var word = wordList[wordNum];
        var key = word.split('').sort().join('');
        if (!(key in anagrams)) {
            anagrams[key] = [];
        }
        anagrams[key].push(word);
    }

    for (var a in anagrams) {
        if (anagrams[a].length < 2) {
            delete(anagrams[a]);
        }
    }

    return anagrams;
}

main();"
u4wvd_4_2,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,php,T4,Different Language,"<?php
$words = file(
    'http:
    FILE_IGNORE_NEW_LINES
);
$length = 0;

foreach ($words as $word) {
    $chars = str_split($word);
    sort($chars);
    $chars = implode(, $chars);
    $length = strlen($chars);
    $anagrams[$length][$chars][] = $word;
}

krsort($anagrams);

foreach ($anagrams as $anagram) {
    $final_words = array();
    foreach ($anagram as $words) {
        if (count($words) >= 2) {
            $counts = array();
            foreach ($words as $word) {
                $counts[$word] = array($word);
                foreach ($words as $second_word) {
                    for ($i = 0, $length = strlen($word); $i < $length; $i++) {
                        if ($word[$i] === $second_word[$i]) continue 2;
                    }
                    $counts[$word][] = $second_word;
                }
            }
            $max = 0;
            $max_key = '';
            foreach ($counts as $name => $count) {
                if (count($count) > $max) {
                    $max = count($count);
                    $max_key = $name;
                }
            }
            if ($max > 1) {
                $final_words[] = $counts[$max_key];
            }
        }
    }
    if ($final_words) break;
}

foreach ($final_words as $final_word) {
    echo implode(, $final_word), ;
}
?>"
u4wvd_4_2,u4wvd,Anagrams/Deranged anagrams,Programming Concepts,String Operations,ruby,T4,Different Language,"def deranged?(a, b)
  a.chars.zip(b.chars).all? {|char_a, char_b| char_a!= char_b}
end

def find_derangements(list)
  list.combination(2) {|a,b| return a,b  if deranged?(a,b)}
  nil
end

require 'open-uri'
anagram = open('http:
  f.read.split.group_by {|s| s.each_char.sort}
end

anagram = anagram.select{|k,list| list.size>1}.sort_by{|k,list| -k.size}

anagram.each do |k,list|
  if derangements = find_derangements(list)
    puts 
    break
  end
end"
jks7p_1_1,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T1,Identical Clone,"from __future__ import print_function

def getDifference(b1, b2):
	r = (b2 - b1)% 360.0
	
	
	if r >= 180.0:
		r -= 360.0
	return r

if __name__ == :
	print ()
	print (getDifference(20.0, 45.0))
	print (getDifference(-45.0, 45.0))
	print (getDifference(-85.0, 90.0))
	print (getDifference(-95.0, 90.0))
	print (getDifference(-45.0, 125.0))
	print (getDifference(-45.0, 145.0))
	print (getDifference(-45.0, 125.0))
	print (getDifference(-45.0, 145.0))
	print (getDifference(29.4803, -88.6381))
	print (getDifference(-78.3251, -159.036))

	print ()
	print (getDifference(-70099.74233810938, 29840.67437876723))
	print (getDifference(-165313.6666297357, 33693.9894517456))
	print (getDifference(1174.8380510598456, -154146.66490124757))
	print (getDifference(60175.77306795546, 42213.07192354373))"
jks7p_1_2,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T1,Different Whitespaces,"from __future__ import print_function

def getDifference(b1, b2):
 r = (b2 - b1) % 360.0
 if r >= 180.0:
  r -= 360.0
 return r

if __name__ == ""__main__"":
 print()
 print(getDifference(20.0, 45.0))
 print(getDifference(-45.0, 45.0))
 print(getDifference(-85.0, 90.0))
 print(getDifference(-95.0, 90.0))
 print(getDifference(-45.0, 125.0))
 print(getDifference(-45.0, 145.0))
 print(getDifference(-45.0, 125.0))
 print(getDifference(-45.0, 145.0))
 print(getDifference(29.4803, -88.6381))
 print(getDifference(-78.3251, -159.036))
 print()
 print(getDifference(-70099.74233810938, 29840.67437876723))
 print(getDifference(-165313.6666297357, 33693.9894517456))
 print(getDifference(1174.8380510598456, -154146.66490124757))
 print(getDifference(60175.77306795546, 42213.07192354373))"
jks7p_1_3,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T1,Different Comments,"from __future__ import print_function

def getDifference(b1, b2):
	r = (b2 - b1) % 360.0
	
	if r >= 180.0:
		r -= 360.0
	return r

if __name__ == ""__main__"":
	print()
	print(getDifference(20.0, 45.0))
	print(getDifference(-45.0, 45.0))
	print(getDifference(-85.0, 90.0))
	print(getDifference(-95.0, 90.0))
	print(getDifference(-45.0, 125.0))
	print(getDifference(-45.0, 145.0))
	print(getDifference(-45.0, 125.0))
	print(getDifference(-45.0, 145.0))
	print(getDifference(29.4803, -88.6381))
	print(getDifference(-78.3251, -159.036))

	print()
	print(getDifference(-70099.74233810938, 29840.67437876723))
	print(getDifference(-165313.6666297357, 33693.9894517456))
	print(getDifference(1174.8380510598456, -154146.66490124757))
	print(getDifference(60175.77306795546, 42213.07192354373))"
jks7p_1_4,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T1,Different Formatting,"from __future__ import print_function

def getDifference(b1, b2):
    r = (b2 - b1) % 360.0
    
    if r >= 180.0:
        r -= 360.0
    return r

if __name__ == '__main__':
    print()
    print(getDifference(20.0, 45.0))
    print(getDifference(-45.0, 45.0))
    print(getDifference(-85.0, 90.0))
    print(getDifference(-95.0, 90.0))
    print(getDifference(-45.0, 125.0))
    print(getDifference(-45.0, 145.0))
    print(getDifference(-45.0, 125.0))
    print(getDifference(-45.0, 145.0))
    print(getDifference(29.4803, -88.6381))
    print(getDifference(-78.3251, -159.036))

    print()
    print(getDifference(-70099.74233810938, 29840.67437876723))
    print(getDifference(-165313.6666297357, 33693.9894517456))
    print(getDifference(1174.8380510598456, -154146.66490124757))
    print(getDifference(60175.77306795546, 42213.07192354373))"
jks7p_2_1,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T2,Different Variable Names,"from __future__ import print_function

def calculateDifference(angle1, angle2):
	result = (angle2 - angle1) % 360.0
	
	if result >= 180.0:
		result -= 360.0
	return result

if __name__ == ""__main__"":
	print()
	print(calculateDifference(20.0, 45.0))
	print(calculateDifference(-45.0, 45.0))
	print(calculateDifference(-85.0, 90.0))
	print(calculateDifference(-95.0, 90.0))
	print(calculateDifference(-45.0, 125.0))
	print(calculateDifference(-45.0, 145.0))
	print(calculateDifference(-45.0, 125.0))
	print(calculateDifference(-45.0, 145.0))
	print(calculateDifference(29.4803, -88.6381))
	print(calculateDifference(-78.3251, -159.036))

	print()
	print(calculateDifference(-70099.74233810938, 29840.67437876723))
	print(calculateDifference(-165313.6666297357, 33693.9894517456))
	print(calculateDifference(1174.8380510598456, -154146.66490124757))
	print(calculateDifference(60175.77306795546, 42213.07192354373))"
jks7p_2_2,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T2,Different Data Types,"from __future__ import print_function

def getDifference(b1:int, b2:int) -> int:
	r = (b2 - b1) % 360
	
	if r >= 180:
		r -= 360
	return r

if __name__ == ""__main__"":
	print ()
	print (getDifference(20, 45))
	print (getDifference(-45, 45))
	print (getDifference(-85, 90))
	print (getDifference(-95, 90))
	print (getDifference(-45, 125))
	print (getDifference(-45, 145))
	print (getDifference(-45, 125))
	print (getDifference(-45, 145))
	print (getDifference(29, -88))
	print (getDifference(-78, -159))

	print ()
	print (getDifference(-70099, 29840))
	print (getDifference(-165313, 33693))
	print (getDifference(1174, -154146))
	print (getDifference(60175, 42213))"
jks7p_2_3,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T2,Different Function Names,"from __future__ import print_function

def calculateDifference(b1, b2):
	r = (b2 - b1) % 360.0
	
	if r >= 180.0:
		r -= 360.0
	return r

if __name__ == ""__main__"":
	print()
	print(calculateDifference(20.0, 45.0))
	print(calculateDifference(-45.0, 45.0))
	print(calculateDifference(-85.0, 90.0))
	print(calculateDifference(-95.0, 90.0))
	print(calculateDifference(-45.0, 125.0))
	print(calculateDifference(-45.0, 145.0))
	print(calculateDifference(-45.0, 125.0))
	print(calculateDifference(-45.0, 145.0))
	print(calculateDifference(29.4803, -88.6381))
	print(calculateDifference(-78.3251, -159.036))

	print()
	print(calculateDifference(-70099.74233810938, 29840.67437876723))
	print(calculateDifference(-165313.6666297357, 33693.9894517456))
	print(calculateDifference(1174.8380510598456, -154146.66490124757))
	print(calculateDifference(60175.77306795546, 42213.07192354373))"
jks7p_3_1,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T3,Added Statements,"from __future__ import print_function

def getDifference(b1, b2):
	r = (b2 - b1) % 360.0
	if r >= 180.0:
		r -= 360.0
	return r

if __name__ == ""__main__"":
	print()
	print(getDifference(20.0, 45.0))
	print(getDifference(-45.0, 45.0))
	print(getDifference(-85.0, 90.0))
	print(getDifference(-95.0, 90.0))
	print(getDifference(-45.0, 125.0))
	print(getDifference(-45.0, 145.0))
	print(getDifference(-45.0, 125.0))
	print(getDifference(-45.0, 145.0))
	print(getDifference(29.4803, -88.6381))
	print(getDifference(-78.3251, -159.036))

	print()
	print(getDifference(-70099.74233810938, 29840.67437876723))
	print(getDifference(-165313.6666297357, 33693.9894517456))
	print(getDifference(1174.8380510598456, -154146.66490124757))
	print(getDifference(60175.77306795546, 42213.07192354373))"
jks7p_3_2,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T3,Removed Statements,"def getDifference(b1, b2):
	r = (b2 - b1) % 360.0
	if r >= 180.0:
		r -= 360.0
	return r

if __name__ == '__main__':
	print(getDifference(20.0, 45.0))
	print(getDifference(-45.0, 45.0))
	print(getDifference(-85.0, 90.0))
	print(getDifference(-95.0, 90.0))
	print(getDifference(-45.0, 125.0))
	print(getDifference(-45.0, 145.0))
	print(getDifference(29.4803, -88.6381))
	print(getDifference(-78.3251, -159.036))
	print(getDifference(-70099.74233810938, 29840.67437876723))
	print(getDifference(-165313.6666297357, 33693.9894517456))
	print(getDifference(1174.8380510598456, -154146.66490124757))
	print(getDifference(60175.77306795546, 42213.07192354373))"
jks7p_3_3,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T3,Reordered Statements,"from __future__ import print_function

def getDifference(b1, b2):
    r = (b2 - b1) % 360.0
    if r >= 180.0:
        r -= 360.0
    return r

if __name__ == ""__main__"":
    print ()
    print (getDifference(20.0, 45.0))
    print (getDifference(-45.0, 45.0))
    print (getDifference(-85.0, 90.0))
    print (getDifference(-95.0, 90.0))
    print (getDifference(-45.0, 125.0))
    print (getDifference(-45.0, 145.0))
    print (getDifference(-45.0, 125.0))
    print (getDifference(-45.0, 145.0))
    print (getDifference(29.4803, -88.6381))
    print (getDifference(-78.3251, -159.036))
    
    print ()
    print (getDifference(-70099.74233810938, 29840.67437876723))
    print (getDifference(-165313.6666297357, 33693.9894517456))
    print (getDifference(1174.8380510598456, -154146.66490124757))
    print (getDifference(60175.77306795546, 42213.07192354373))"
jks7p_3_4,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T3,Control Flow Modifications,"from __future__ import print_function

def getDifference(b1, b2):
    r = (b2 - b1) % 360.0
    r = r - 360.0 if r >= 180.0 else r
    return r

if __name__ == ""__main__"":
    print()
    for pair in [(20.0, 45.0), (-45.0, 45.0), (-85.0, 90.0), 
                 (-95.0, 90.0), (-45.0, 125.0), (-45.0, 145.0), 
                 (-45.0, 125.0), (-45.0, 145.0), (29.4803, -88.6381), 
                 (-78.3251, -159.036)]:
        print(getDifference(*pair))

    print()
    for pair in [(-70099.74233810938, 29840.67437876723), 
                 (-165313.6666297357, 33693.9894517456), 
                 (1174.8380510598456, -154146.66490124757), 
                 (60175.77306795546, 42213.07192354373)]:
        print(getDifference(*pair))"
jks7p_4_1,jks7p,Angle difference between two bearings,Mathematics,Geometry,python,T4,Same Language,"from __future__ import print_function

def calculate_difference(start, end):
    difference = (end - start) % 360.0
    if difference >= 180.0:
        difference -= 360.0
    return difference

def main():
    results = [
        calculate_difference(20.0, 45.0),
        calculate_difference(-45.0, 45.0),
        calculate_difference(-85.0, 90.0),
        calculate_difference(-95.0, 90.0),
        calculate_difference(-45.0, 125.0),
        calculate_difference(-45.0, 145.0),
        calculate_difference(-45.0, 125.0),
        calculate_difference(-45.0, 145.0),
        calculate_difference(29.4803, -88.6381),
        calculate_difference(-78.3251, -159.036),
        calculate_difference(-70099.74233810938, 29840.67437876723),
        calculate_difference(-165313.6666297357, 33693.9894517456),
        calculate_difference(1174.8380510598456, -154146.66490124757),
        calculate_difference(60175.77306795546, 42213.07192354373)
    ]
    
    for result in results:
        print(result)

if __name__ == ""__main__"":
    print()
    main()"
jks7p_4_2,jks7p,Angle difference between two bearings,Mathematics,Geometry,go,T4,Different Language,"package main

import ""fmt""

type bearing float64

var testCases = []struct{ b1, b2 bearing }{
    {20, 45},
    {-45, 45},
    {-85, 90},
    {-95, 90},
    {-45, 125},
    {-45, 145},
    {29.4803, -88.6381},
    {-78.3251, -159.036},
}

func main() {
    for _, tc := range testCases {
        fmt.Println(tc.b2.Sub(tc.b1))
    }
}

func (b2 bearing) Sub(b1 bearing) bearing {
    switch d := b2 - b1; {
    case d < -180:
        return d + 360
    case d > 180:
        return d - 360
    default:
        return d
    }
}"
jks7p_4_2,jks7p,Angle difference between two bearings,Mathematics,Geometry,java,T4,Different Language,"public class AngleDifference {

    public static double getDifference(double b1, double b2) {
        double r = (b2 - b1) % 360.0;
        if (r < -180.0)
            r += 360.0;
        if (r >= 180.0)
            r -= 360.0;
        return r;
    }

    public static void main(String[] args) {
        System.out.println(""Input in -180 to +180 range"");
        System.out.println(getDifference(20.0, 45.0));
        System.out.println(getDifference(-45.0, 45.0));
        System.out.println(getDifference(-85.0, 90.0));
        System.out.println(getDifference(-95.0, 90.0));
        System.out.println(getDifference(-45.0, 125.0));
        System.out.println(getDifference(-45.0, 145.0));
        System.out.println(getDifference(-45.0, 125.0));
        System.out.println(getDifference(-45.0, 145.0));
        System.out.println(getDifference(29.4803, -88.6381));
        System.out.println(getDifference(-78.3251, -159.036));

        System.out.println(""Input in wider range"");
        System.out.println(getDifference(-70099.74233810938, 29840.67437876723));
        System.out.println(getDifference(-165313.6666297357, 33693.9894517456));
        System.out.println(getDifference(1174.8380510598456, -154146.66490124757));
        System.out.println(getDifference(60175.77306795546, 42213.07192354373));
    }
}"
jks7p_4_2,jks7p,Angle difference between two bearings,Mathematics,Geometry,javascript,T4,Different Language,"function relativeBearing(b1Rad, b2Rad)
{
	b1y = Math.cos(b1Rad);
	b1x = Math.sin(b1Rad);
	b2y = Math.cos(b2Rad);
	b2x = Math.sin(b2Rad);
	crossp = b1y * b2x - b2y * b1x;
	dotp = b1x * b2x + b1y * b2y;
	if(crossp > 0.)
		return Math.acos(dotp);
	return -Math.acos(dotp);
}

function test()
{
	var deg2rad = 3.14159265/180.0;
	var rad2deg = 180.0/3.14159265;
	return ""Input in -180 to +180 range\n""
		+relativeBearing(20.0*deg2rad, 45.0*deg2rad)*rad2deg+""\n""
		+relativeBearing(-45.0*deg2rad, 45.0*deg2rad)*rad2deg+""\n""
		+relativeBearing(-85.0*deg2rad, 90.0*deg2rad)*rad2deg+""\n""
		+relativeBearing(-95.0*deg2rad, 90.0*deg2rad)*rad2deg+""\n""
		+relativeBearing(-45.0*deg2rad, 125.0*deg2rad)*rad2deg+""\n""
		+relativeBearing(-45.0*deg2rad, 145.0*deg2rad)*rad2deg+""\n""

		+relativeBearing(29.4803*deg2rad, -88.6381*deg2rad)*rad2deg+""\n""
		+relativeBearing(-78.3251*deg2rad, -159.036*deg2rad)*rad2deg+""\n""

		+ ""Input in wider range\n""
		+relativeBearing(-70099.74233810938*deg2rad, 29840.67437876723*deg2rad)*rad2deg+""\n""
		+relativeBearing(-165313.6666297357*deg2rad, 33693.9894517456*deg2rad)*rad2deg+""\n""
		+relativeBearing(1174.8380510598456*deg2rad, -154146.66490124757*deg2rad)*rad2deg+""\n""
		+relativeBearing(60175.77306795546*deg2rad, 42213.07192354373*deg2rad)*rad2deg+""\n"";

}"
jks7p_4_2,jks7p,Angle difference between two bearings,Mathematics,Geometry,ruby,T4,Different Language,"def getDifference(b1, b2)
	r = (b2 - b1) % 360.0
	
	
	if r >= 180.0
		r -= 360.0
	end
	return r
end

if __FILE__ == $PROGRAM_NAME
	puts 
	puts getDifference(20.0, 45.0)
	puts getDifference(-45.0, 45.0)
	puts getDifference(-85.0, 90.0)
	puts getDifference(-95.0, 90.0)
	puts getDifference(-45.0, 125.0)
	puts getDifference(-45.0, 145.0)
	puts getDifference(-45.0, 125.0)
	puts getDifference(-45.0, 145.0)
	puts getDifference(29.4803, -88.6381)
	puts getDifference(-78.3251, -159.036)

	puts 
	puts getDifference(-70099.74233810938, 29840.67437876723)
	puts getDifference(-165313.6666297357, 33693.9894517456)
	puts getDifference(1174.8380510598456, -154146.66490124757)
	puts getDifference(60175.77306795546, 42213.07192354373)
end"
hb8jw_1_1,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T1,Identical Clone,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize2deg(a):
  while a < 0: a += 360
  while a >= 360: a -= 360
  return a
def normalize2grad(a):
  while a < 0: a += 400
  while a >= 400: a -= 400
  return a
def normalize2mil(a):
  while a < 0: a += 6400
  while a >= 6400: a -= 6400
  return a
def normalize2rad(a):
  while a < 0: a += TWO_PI
  while a >= TWO_PI: a -= TWO_PI
  return a

def deg2grad(a): return a * 10.0 / 9.0
def deg2mil(a): return a * 160.0 / 9.0
def deg2rad(a): return a * PI / 180.0

def grad2deg(a): return a * 9.0 / 10.0
def grad2mil(a): return a * 16.0
def grad2rad(a): return a * PI / 200.0

def mil2deg(a): return a * 9.0 / 160.0
def mil2grad(a): return a / 16.0
def mil2rad(a): return a * PI / 3200.0

def rad2deg(a): return a * 180.0 / PI
def rad2grad(a): return a * 200.0 / PI
def rad2mil(a): return a * 3200.0 / PI"
hb8jw_1_2,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T1,Different Whitespaces,"PI=3.141592653589793
TWO_PI=6.283185307179586
def normalize2deg(a):
 while a<0: a+=360
 while a>=360: a-=360
 return a
def normalize2grad(a):
 while a<0: a+=400
 while a>=400: a-=400
 return a
def normalize2mil(a):
 while a<0: a+=6400
 while a>=6400: a-=6400
 return a
def normalize2rad(a):
 while a<0: a+=TWO_PI
 while a>=TWO_PI: a-=TWO_PI
 return a
def deg2grad(a): return a*10.0/9.0
def deg2mil(a): return a*160.0/9.0
def deg2rad(a): return a*PI/180.0
def grad2deg(a): return a*9.0/10.0
def grad2mil(a): return a*16.0
def grad2rad(a): return a*PI/200.0
def mil2deg(a): return a*9.0/160.0
def mil2grad(a): return a/16.0
def mil2rad(a): return a*PI/3200.0
def rad2deg(a): return a*180.0/PI
def rad2grad(a): return a*200.0/PI
def rad2mil(a): return a*3200.0/PI"
hb8jw_1_3,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T1,Different Comments,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize2deg(a):
  while a < 0: a += 360
  while a >= 360: a -= 360
  return a

def normalize2grad(a):
  while a < 0: a += 400
  while a >= 400: a -= 400
  return a

def normalize2mil(a):
  while a < 0: a += 6400
  while a >= 6400: a -= 6400
  return a

def normalize2rad(a):
  while a < 0: a += TWO_PI
  while a >= TWO_PI: a -= TWO_PI
  return a

def deg2grad(a): return a * 10.0 / 9.0
def deg2mil(a): return a * 160.0 / 9.0
def deg2rad(a): return a * PI / 180.0

def grad2deg(a): return a * 9.0 / 10.0
def grad2mil(a): return a * 16.0
def grad2rad(a): return a * PI / 200.0

def mil2deg(a): return a * 9.0 / 160.0
def mil2grad(a): return a / 16.0
def mil2rad(a): return a * PI / 3200.0

def rad2deg(a): return a * 180.0 / PI
def rad2grad(a): return a * 200.0 / PI
def rad2mil(a): return a * 3200.0 / PI"
hb8jw_1_4,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T1,Different Formatting,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize2deg(a):
    while a < 0: a += 360
    while a >= 360: a -= 360
    return a

def normalize2grad(a):
    while a < 0: a += 400
    while a >= 400: a -= 400
    return a

def normalize2mil(a):
    while a < 0: a += 6400
    while a >= 6400: a -= 6400
    return a

def normalize2rad(a):
    while a < 0: a += TWO_PI
    while a >= TWO_PI: a -= TWO_PI
    return a

def deg2grad(a): 
    return a * 10.0 / 9.0

def deg2mil(a): 
    return a * 160.0 / 9.0

def deg2rad(a): 
    return a * PI / 180.0

def grad2deg(a): 
    return a * 9.0 / 10.0

def grad2mil(a): 
    return a * 16.0

def grad2rad(a): 
    return a * PI / 200.0

def mil2deg(a): 
    return a * 9.0 / 160.0

def mil2grad(a): 
    return a / 16.0

def mil2rad(a): 
    return a * PI / 3200.0

def rad2deg(a): 
    return a * 180.0 / PI

def rad2grad(a): 
    return a * 200.0 / PI

def rad2mil(a): 
    return a * 3200.0 / PI"
hb8jw_2_1,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T2,Different Variable Names,"CIRCLE_CONSTANT = 3.141592653589793
FULL_CIRCLE = 6.283185307179586

def adjust_to_deg(angle):
  while angle < 0: angle += 360
  while angle >= 360: angle -= 360
  return angle
def adjust_to_grad(angle):
  while angle < 0: angle += 400
  while angle >= 400: angle -= 400
  return angle
def adjust_to_mil(angle):
  while angle < 0: angle += 6400
  while angle >= 6400: angle -= 6400
  return angle
def adjust_to_rad(angle):
  while angle < 0: angle += FULL_CIRCLE
  while angle >= FULL_CIRCLE: angle -= FULL_CIRCLE
  return angle

def convert_deg_to_grad(angle): return angle * 10.0 / 9.0
def convert_deg_to_mil(angle): return angle * 160.0 / 9.0
def convert_deg_to_rad(angle): return angle * CIRCLE_CONSTANT / 180.0

def convert_grad_to_deg(angle): return angle * 9.0 / 10.0
def convert_grad_to_mil(angle): return angle * 16.0
def convert_grad_to_rad(angle): return angle * CIRCLE_CONSTANT / 200.0

def convert_mil_to_deg(angle): return angle * 9.0 / 160.0
def convert_mil_to_grad(angle): return angle / 16.0
def convert_mil_to_rad(angle): return angle * CIRCLE_CONSTANT / 3200.0

def convert_rad_to_deg(angle): return angle * 180.0 / CIRCLE_CONSTANT
def convert_rad_to_grad(angle): return angle * 200.0 / CIRCLE_CONSTANT
def convert_rad_to_mil(angle): return angle * 3200.0 / CIRCLE_CONSTANT"
hb8jw_2_2,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T2,Different Data Types,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize2deg(a: float) -> float:
  while a < 0: a += 360.0
  while a >= 360: a -= 360.0
  return a

def normalize2grad(a: float) -> float:
  while a < 0: a += 400.0
  while a >= 400: a -= 400.0
  return a

def normalize2mil(a: float) -> float:
  while a < 0: a += 6400.0
  while a >= 6400: a -= 6400.0
  return a

def normalize2rad(a: float) -> float:
  while a < 0: a += TWO_PI
  while a >= TWO_PI: a -= TWO_PI
  return a

def deg2grad(a: float) -> float: return a * 10.0 / 9.0
def deg2mil(a: float) -> float: return a * 160.0 / 9.0
def deg2rad(a: float) -> float: return a * PI / 180.0

def grad2deg(a: float) -> float: return a * 9.0 / 10.0
def grad2mil(a: float) -> float: return a * 16.0
def grad2rad(a: float) -> float: return a * PI / 200.0

def mil2deg(a: float) -> float: return a * 9.0 / 160.0
def mil2grad(a: float) -> float: return a / 16.0
def mil2rad(a: float) -> float: return a * PI / 3200.0

def rad2deg(a: float) -> float: return a * 180.0 / PI
def rad2grad(a: float) -> float: return a * 200.0 / PI
def rad2mil(a: float) -> float: return a * 3200.0 / PI"
hb8jw_2_3,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T2,Different Function Names,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def adjust_angle_deg(a):
  while a < 0: a += 360
  while a >= 360: a -= 360
  return a
def adjust_angle_grad(a):
  while a < 0: a += 400
  while a >= 400: a -= 400
  return a
def adjust_angle_mil(a):
  while a < 0: a += 6400
  while a >= 6400: a -= 6400
  return a
def adjust_angle_rad(a):
  while a < 0: a += TWO_PI
  while a >= TWO_PI: a -= TWO_PI
  return a

def convert_deg_to_grad(a): return a * 10.0 / 9.0
def convert_deg_to_mil(a): return a * 160.0 / 9.0
def convert_deg_to_rad(a): return a * PI / 180.0

def convert_grad_to_deg(a): return a * 9.0 / 10.0
def convert_grad_to_mil(a): return a * 16.0
def convert_grad_to_rad(a): return a * PI / 200.0

def convert_mil_to_deg(a): return a * 9.0 / 160.0
def convert_mil_to_grad(a): return a / 16.0
def convert_mil_to_rad(a): return a * PI / 3200.0

def convert_rad_to_deg(a): return a * 180.0 / PI
def convert_rad_to_grad(a): return a * 200.0 / PI
def convert_rad_to_mil(a): return a * 3200.0 / PI"
hb8jw_3_1,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T3,Added Statements,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize2deg(a):
  while a < 0: 
    a += 360
  while a >= 360: 
    a -= 360
  return a

def normalize2grad(a):
  while a < 0: 
    a += 400
  while a >= 400: 
    a -= 400
  return a

def normalize2mil(a):
  while a < 0: 
    a += 6400
  while a >= 6400: 
    a -= 6400
  return a

def normalize2rad(a):
  while a < 0: 
    a += TWO_PI
  while a >= TWO_PI: 
    a -= TWO_PI
  return a

def deg2grad(a):
  return a * 10.0 / 9.0

def deg2mil(a):
  return a * 160.0 / 9.0

def deg2rad(a):
  return a * PI / 180.0

def grad2deg(a):
  return a * 9.0 / 10.0

def grad2mil(a):
  return a * 16.0

def grad2rad(a):
  return a * PI / 200.0

def mil2deg(a):
  return a * 9.0 / 160.0

def mil2grad(a):
  return a / 16.0

def mil2rad(a):
  return a * PI / 3200.0

def rad2deg(a):
  return a * 180.0 / PI

def rad2grad(a):
  return a * 200.0 / PI

def rad2mil(a):
  return a * 3200.0 / PI

def increment_degrees(a, increment):
  return normalize2deg(a + increment)

def increment_grads(a, increment):
  return normalize2grad(a + increment)

def increment_mils(a, increment):
  return normalize2mil(a + increment)

def increment_radians(a, increment):
  return normalize2rad(a + increment)"
hb8jw_3_2,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T3,Removed Statements,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize2deg(a):
  while a < 0: a += 360
  while a >= 360: a -= 360
  return a

def normalize2rad(a):
  while a < 0: a += TWO_PI
  while a >= TWO_PI: a -= TWO_PI
  return a

def deg2rad(a): return a * PI / 180.0

def grad2deg(a): return a * 9.0 / 10.0
def grad2rad(a): return a * PI / 200.0

def mil2deg(a): return a * 9.0 / 160.0
def mil2rad(a): return a * PI / 3200.0

def rad2deg(a): return a * 180.0 / PI"
hb8jw_3_3,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T3,Reordered Statements,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize2deg(a):
  while a >= 360: a -= 360
  while a < 0: a += 360
  return a

def normalize2grad(a):
  while a >= 400: a -= 400
  while a < 0: a += 400
  return a

def normalize2mil(a):
  while a >= 6400: a -= 6400
  while a < 0: a += 6400
  return a

def normalize2rad(a):
  while a >= TWO_PI: a -= TWO_PI
  while a < 0: a += TWO_PI
  return a

def deg2rad(a): return a * PI / 180.0
def deg2grad(a): return a * 10.0 / 9.0
def deg2mil(a): return a * 160.0 / 9.0

def rad2deg(a): return a * 180.0 / PI
def rad2grad(a): return a * 200.0 / PI
def rad2mil(a): return a * 3200.0 / PI

def grad2deg(a): return a * 9.0 / 10.0
def grad2rad(a): return a * PI / 200.0
def grad2mil(a): return a * 16.0

def mil2deg(a): return a * 9.0 / 160.0
def mil2grad(a): return a / 16.0
def mil2rad(a): return a * PI / 3200.0"
hb8jw_3_4,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T3,Control Flow Modifications,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize2deg(a):
  a = a % 360
  return a if a >= 0 else a + 360

def normalize2grad(a):
  a = a % 400
  return a if a >= 0 else a + 400

def normalize2mil(a):
  a = a % 6400
  return a if a >= 0 else a + 6400

def normalize2rad(a):
  a = a % TWO_PI
  return a if a >= 0 else a + TWO_PI

def deg2grad(a): return a * 10.0 / 9.0
def deg2mil(a): return a * 160.0 / 9.0
def deg2rad(a): return a * PI / 180.0

def grad2deg(a): return a * 9.0 / 10.0
def grad2mil(a): return a * 16.0
def grad2rad(a): return a * PI / 200.0

def mil2deg(a): return a * 9.0 / 160.0
def mil2grad(a): return a / 16.0
def mil2rad(a): return a * PI / 3200.0

def rad2deg(a): return a * 180.0 / PI
def rad2grad(a): return a * 200.0 / PI
def rad2mil(a): return a * 3200.0 / PI"
hb8jw_4_1,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,python,T4,Same Language,"PI = 3.141592653589793
TWO_PI = 6.283185307179586

def normalize(a, mod):
    while a < 0: a += mod
    while a >= mod: a -= mod
    return a

def normalize2deg(a): return normalize(a, 360)
def normalize2grad(a): return normalize(a, 400)
def normalize2mil(a): return normalize(a, 6400)
def normalize2rad(a): return normalize(a, TWO_PI)

def deg2grad(a): return a * 10.0 / 9.0
def deg2mil(a): return a * 160.0 / 9.0
def deg2rad(a): return a * PI / 180.0

def grad2deg(a): return a * 9.0 / 10.0
def grad2mil(a): return a * 16.0
def grad2rad(a): return a * PI / 200.0

def mil2deg(a): return a * 9.0 / 160.0
def mil2grad(a): return a / 16.0
def mil2rad(a): return a * PI / 3200.0

def rad2deg(a): return a * 180.0 / PI
def rad2grad(a): return a * 200.0 / PI
def rad2mil(a): return a * 3200.0 / PI"
hb8jw_4_2,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,go,T4,Different Language,"package main

import (
    ""fmt""
    ""math""
    ""strconv""
    ""strings""
)

func d2d(d float64) float64 { return math.Mod(d, 360) }

func g2g(g float64) float64 { return math.Mod(g, 400) }

func m2m(m float64) float64 { return math.Mod(m, 6400) }

func r2r(r float64) float64 { return math.Mod(r, 2*math.Pi) }

func d2g(d float64) float64 { return d2d(d) * 400 / 360 }

func d2m(d float64) float64 { return d2d(d) * 6400 / 360 }

func d2r(d float64) float64 { return d2d(d) * math.Pi / 180 }

func g2d(g float64) float64 { return g2g(g) * 360 / 400 }

func g2m(g float64) float64 { return g2g(g) * 6400 / 400 }

func g2r(g float64) float64 { return g2g(g) * math.Pi / 200 }

func m2d(m float64) float64 { return m2m(m) * 360 / 6400 }

func m2g(m float64) float64 { return m2m(m) * 400 / 6400 }

func m2r(m float64) float64 { return m2m(m) * math.Pi / 3200 }

func r2d(r float64) float64 { return r2r(r) * 180 / math.Pi }

func r2g(r float64) float64 { return r2r(r) * 200 / math.Pi }

func r2m(r float64) float64 { return r2r(r) * 3200 / math.Pi }"
hb8jw_4_2,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,java,T4,Different Language,import java.text.DecimalFormat;
hb8jw_4_2,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,javascript,T4,Different Language,"function angleConv(deg, inp, out) {
  inp = inp.toLowerCase();
  out = out.toLowerCase();
  const D = 360,
        G = 400,
        M = 6400,
        R = 2 * Math.PI;"
hb8jw_4_2,hb8jw,"Angles (geometric), normalization and conversion",Mathematics,Geometry,ruby,T4,Different Language,"module Angles
  BASES = { => 360,  => 400,  => 6400,  => Math::PI*2 , => 24 }

  def self.method_missing(meth, angle)
    from, to = BASES.values_at(*meth.to_s.split())
    raise NoMethodError, meth if (from.nil? or to.nil?)
    mod = (angle.to_f * to / from) % to
    angle < 0? mod - to: mod
  end

end


names = Angles::BASES.keys
puts  + *names.size % names
test = [-2, -1, 0, 1, 2*Math::PI, 16, 360/(2*Math::PI), 360-1, 400-1, 6400-1, 1_000_000]

test.each do |n|
  names.each do |first|
    res = names.map{|last| Angles.send((first +  + last).to_sym, n)}
    puts first + *names.size % res
  end
  puts
end"
id9of_1_1,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T1,Identical Clone,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption()

screen = pygame.display.get_surface()
screen.fill((255,255,255))

PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.theta = 45
        self.dtheta = 0
        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),
                                PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),
                                1,1)
        self.draw()

    def recomputeAngle(self):
        scaling = 3000.0/(SWINGLENGTH**2)

        firstDDtheta = -sin(radians(self.theta))*scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta)/2.0

        midDDtheta = -sin(radians(midtheta))*scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2
        midtheta = self.theta + (self.dtheta + midDtheta)/2

        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.rect = pygame.Rect(PIVOT[0]-
                                SWINGLENGTH*sin(radians(self.theta)), 
                                PIVOT[1]+
                                SWINGLENGTH*cos(radians(self.theta)),1,1)


    def draw(self):
        pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0,0,0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

    def update(self):
        self.recomputeAngle()
        screen.fill((255,255,255))
        self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def input(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TICK:
            bob.update()

while True:
    input(pygame.event.get())
    pygame.display.flip()"
id9of_1_2,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T1,Different Whitespaces,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption()

screen = pygame.display.get_surface()
screen.fill((255,255,255))

PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

class BobMass(pygame.sprite.Sprite):
 def __init__(self():
  pygame.sprite.Sprite.__init__(self)
  self.theta = 45
  self.dtheta = 0
  self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),
   PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),
   1,1)
  self.draw()

 def recomputeAngle(self):
  scaling = 3000.0/(SWINGLENGTH**2)

  firstDDtheta = -sin(radians(self.theta))*scaling
  midDtheta = self.dtheta + firstDDtheta
  midtheta = self.theta + (self.dtheta + midDtheta)/2.0

  midDDtheta = -sin(radians(midtheta))*scaling
  midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2
  midtheta = self.theta + (self.dtheta + midDtheta)/2

  midDDtheta = -sin(radians(midtheta)) * scaling
  lastDtheta = midDtheta + midDDtheta
  lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

  lastDDtheta = -sin(radians(lasttheta)) * scaling
  lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0
  lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

  self.dtheta = lastDtheta
  self.theta = lasttheta
  self.rect = pygame.Rect(PIVOT[0]-
   SWINGLENGTH*sin(radians(self.theta)), 
   PIVOT[1]+
   SWINGLENGTH*cos(radians(self.theta)),1,1)

 def draw(self):
  pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)
  pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)
  pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)
  pygame.draw.line(screen, (0,0,0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

 def update(self):
  self.recomputeAngle()
  screen.fill((255,255,255))
  self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def input(events):
 for event in events:
  if event.type == QUIT:
   sys.exit(0)
  elif event.type == TICK:
   bob.update()

while True:
 input(pygame.event.get())
 pygame.display.flip()"
id9of_1_3,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T1,Different Comments,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption()

screen = pygame.display.get_surface()
screen.fill((255,255,255))

PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.theta = 45
        self.dtheta = 0
        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),
                                PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),
                                1,1)
        self.draw()

    def recomputeAngle(self):
        scaling = 3000.0/(SWINGLENGTH**2)

        firstDDtheta = -sin(radians(self.theta))*scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta)/2.0

        midDDtheta = -sin(radians(midtheta))*scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2
        midtheta = self.theta + (self.dtheta + midDtheta)/2

        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.rect = pygame.Rect(PIVOT[0]-
                                SWINGLENGTH*sin(radians(self.theta)), 
                                PIVOT[1]+
                                SWINGLENGTH*cos(radians(self.theta)),1,1)

    def draw(self):
        pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0,0,0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

    def update(self):
        self.recomputeAngle()
        screen.fill((255,255,255))
        self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def input(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TICK:
            bob.update()

while True:
    input(pygame.event.get())
    pygame.display.flip()"
id9of_1_4,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T1,Different Formatting,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()
WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption()
screen = pygame.display.get_surface()
screen.fill((255, 255, 255))
PIVOT = (WINDOWSIZE / 2, WINDOWSIZE / 10)
SWINGLENGTH = PIVOT[1] * 4

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.theta = 45
        self.dtheta = 0
        self.rect = pygame.Rect(PIVOT[0] - SWINGLENGTH * cos(radians(self.theta)),
                                PIVOT[1] + SWINGLENGTH * sin(radians(self.theta)),
                                1, 1)
        self.draw()

    def recomputeAngle(self):
        scaling = 3000.0 / (SWINGLENGTH ** 2)
        firstDDtheta = -sin(radians(self.theta)) * scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta) / 2.0
        midDDtheta = -sin(radians(midtheta)) * scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta) / 2
        midtheta = self.theta + (self.dtheta + midDtheta) / 2
        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta) / 2.0
        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta) / 2.0
        lasttheta = midtheta + (midDtheta + lastDtheta) / 2.0
        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.rect = pygame.Rect(PIVOT[0] - SWINGLENGTH * sin(radians(self.theta)),
                                PIVOT[1] + SWINGLENGTH * cos(radians(self.theta)), 1, 1)

    def draw(self):
        pygame.draw.circle(screen, (0, 0, 0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0, 0, 0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0, 0, 0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0, 0, 0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

    def update(self):
        self.recomputeAngle()
        screen.fill((255, 255, 255))
        self.draw()

bob = BobMass()
TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def input(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TICK:
            bob.update()

while True:
    input(pygame.event.get())
    pygame.display.flip()"
id9of_2_1,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T2,Different Variable Names,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

DISPLAY_SIZE = 250
INTERVAL = 100
CIRCLE_SIZE = 15

display = pygame.display.set_mode((DISPLAY_SIZE, DISPLAY_SIZE))
pygame.display.set_caption()

canvas = pygame.display.get_surface()
canvas.fill((255,255,255))

CENTER = (DISPLAY_SIZE/2, DISPLAY_SIZE/10)
ROPE_LENGTH = CENTER[1]*4

class PendulumBob(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.angle = 45
        self.angular_velocity = 0
        self.rect = pygame.Rect(CENTER[0]-ROPE_LENGTH*cos(radians(self.angle)),
                                CENTER[1]+ROPE_LENGTH*sin(radians(self.angle)),
                                1,1)
        self.render()

    def calculateAngle(self):
        factor = 3000.0/(ROPE_LENGTH**2)

        initial_angular_acceleration = -sin(radians(self.angle))*factor
        average_angular_velocity = self.angular_velocity + initial_angular_acceleration
        intermediate_angle = self.angle + (self.angular_velocity + average_angular_velocity)/2.0

        mid_angular_acceleration = -sin(radians(intermediate_angle))*factor
        average_angular_velocity = self.angular_velocity + (initial_angular_acceleration + mid_angular_acceleration)/2
        intermediate_angle = self.angle + (self.angular_velocity + average_angular_velocity)/2

        mid_angular_acceleration = -sin(radians(intermediate_angle)) * factor
        final_angular_velocity = average_angular_velocity + mid_angular_acceleration
        final_angle = intermediate_angle + (average_angular_velocity + final_angular_velocity)/2.0

        final_angular_acceleration = -sin(radians(final_angle)) * factor
        final_angular_velocity = average_angular_velocity + (mid_angular_acceleration + final_angular_acceleration)/2.0
        final_angle = intermediate_angle + (average_angular_velocity + final_angular_velocity)/2.0

        self.angular_velocity = final_angular_velocity
        self.angle = final_angle
        self.rect = pygame.Rect(CENTER[0]-
                                ROPE_LENGTH*sin(radians(self.angle)), 
                                CENTER[1]+
                                ROPE_LENGTH*cos(radians(self.angle)),1,1)

    def render(self):
        pygame.draw.circle(canvas, (0,0,0), CENTER, 5, 0)
        pygame.draw.circle(canvas, (0,0,0), self.rect.center, CIRCLE_SIZE, 0)
        pygame.draw.aaline(canvas, (0,0,0), CENTER, self.rect.center)
        pygame.draw.line(canvas, (0,0,0), (0, CENTER[1]), (DISPLAY_SIZE, CENTER[1]))

    def update(self):
        self.calculateAngle()
        canvas.fill((255,255,255))
        self.render()

pendulum = PendulumBob()

TIMER_EVENT = USEREVENT + 2
pygame.time.set_timer(TIMER_EVENT, INTERVAL)

def handle_events(event_list):
    for event in event_list:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TIMER_EVENT:
            pendulum.update()

while True:
    handle_events(pygame.event.get())
    pygame.display.flip()"
id9of_2_2,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T2,Different Data Types,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption()

screen = pygame.display.get_surface()
screen.fill((255,255,255))

PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.theta = 45.0
        self.dtheta = 0.0
        self.rect = pygame.Rect(int(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta))),
                                int(PIVOT[1]+SWINGLENGTH*sin(radians(self.theta))),
                                1,1)
        self.draw()

    def recomputeAngle(self):
        scaling = 3000.0/(SWINGLENGTH**2)

        firstDDtheta = -sin(radians(self.theta))*scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta)/2.0

        midDDtheta = -sin(radians(midtheta))*scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2.0
        midtheta = self.theta + (self.dtheta + midDtheta)/2.0

        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.rect = pygame.Rect(int(PIVOT[0]-
                                    SWINGLENGTH*sin(radians(self.theta))), 
                                int(PIVOT[1]+
                                    SWINGLENGTH*cos(radians(self.theta))), 1, 1)

    def draw(self):
        pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0,0,0), (0, int(PIVOT[1])), (WINDOWSIZE, int(PIVOT[1])))

    def update(self):
        self.recomputeAngle()
        screen.fill((255,255,255))
        self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def input(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TICK:
            bob.update()

while True:
    input(pygame.event.get())
    pygame.display.flip()"
id9of_2_3,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T2,Different Function Names,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption()

screen = pygame.display.get_surface()
screen.fill((255,255,255))

PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

class PendulumBob(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.theta = 45
        self.dtheta = 0
        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),
                                PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),
                                1,1)
        self.render()

    def calculateAngle(self):
        scaling = 3000.0/(SWINGLENGTH**2)

        firstDDtheta = -sin(radians(self.theta))*scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta)/2.0

        midDDtheta = -sin(radians(midtheta))*scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2
        midtheta = self.theta + (self.dtheta + midDtheta)/2

        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.rect = pygame.Rect(PIVOT[0]-
                                SWINGLENGTH*sin(radians(self.theta)), 
                                PIVOT[1]+
                                SWINGLENGTH*cos(radians(self.theta)),1,1)


    def render(self):
        pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0,0,0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

    def update(self):
        self.calculateAngle()
        screen.fill((255,255,255))
        self.render()

bob = PendulumBob()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def handleInput(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TICK:
            bob.update()

while True:
    handleInput(pygame.event.get())
    pygame.display.flip()"
id9of_3_1,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T3,Added Statements,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption('Pendulum Simulation')

screen = pygame.display.get_surface()
screen.fill((255,255,255))

PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.theta = 45
        self.dtheta = 0
        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),
                                PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),
                                1,1)
        self.draw()

    def recomputeAngle(self):
        scaling = 3000.0/(SWINGLENGTH**2)

        firstDDtheta = -sin(radians(self.theta))*scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta)/2.0

        midDDtheta = -sin(radians(midtheta))*scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2
        midtheta = self.theta + (self.dtheta + midDtheta)/2

        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.rect = pygame.Rect(PIVOT[0]-
                                SWINGLENGTH*sin(radians(self.theta)), 
                                PIVOT[1]+
                                SWINGLENGTH*cos(radians(self.theta)),1,1)

    def draw(self):
        pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0,0,0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

    def update(self):
        self.recomputeAngle()
        screen.fill((255,255,255))
        self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def handle_events(events):
    for event in events:
        if event.type == QUIT:
            pygame.quit()
            sys.exit(0)
        elif event.type == TICK:
            bob.update()

while True:
    handle_events(pygame.event.get())
    pygame.display.flip()"
id9of_3_2,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T3,Removed Statements,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.theta = 45
        self.dtheta = 0
        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),
                                PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),
                                1,1)

    def recomputeAngle(self):
        scaling = 3000.0/(SWINGLENGTH**2)

        firstDDtheta = -sin(radians(self.theta))*scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta)/2.0

        midDDtheta = -sin(radians(midtheta))*scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2
        midtheta = self.theta + (self.dtheta + midDtheta)/2

        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.rect = pygame.Rect(PIVOT[0]-
                                SWINGLENGTH*sin(radians(self.theta)), 
                                PIVOT[1]+
                                SWINGLENGTH*cos(radians(self.theta)),1,1)

    def draw(self):
        pygame.draw.circle(window, (0,0,0), PIVOT, 5, 0)
        pygame.draw.circle(window, (0,0,0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(window, (0,0,0), PIVOT, self.rect.center)

    def update(self):
        self.recomputeAngle()
        window.fill((255,255,255))
        self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TICK:
            bob.update()
    pygame.display.flip()"
id9of_3_3,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T3,Reordered Statements,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption()

PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

screen = pygame.display.get_surface()
screen.fill((255,255,255))

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.theta = 45
        self.dtheta = 0
        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),
                                PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),
                                1,1)
        self.draw()

    def recomputeAngle(self):
        scaling = 3000.0/(SWINGLENGTH**2)

        firstDDtheta = -sin(radians(self.theta))*scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta)/2.0

        midDDtheta = -sin(radians(midtheta))*scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta)/2
        midtheta = self.theta + (self.dtheta + midDtheta)/2

        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta)/2.0
        lasttheta = midtheta + (midDtheta + lastDtheta)/2.0

        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.rect = pygame.Rect(PIVOT[0]-
                                SWINGLENGTH*sin(radians(self.theta)), 
                                PIVOT[1]+
                                SWINGLENGTH*cos(radians(self.theta)),1,1)

    def draw(self):
        pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0,0,0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

    def update(self):
        self.recomputeAngle()
        screen.fill((255,255,255))
        self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def input(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TICK:
            bob.update()

while True:
    input(pygame.event.get())
    pygame.display.flip()"
id9of_3_4,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T3,Control Flow Modifications,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))
pygame.display.set_caption()

screen = pygame.display.get_surface()
screen.fill((255,255,255))

PIVOT = (WINDOWSIZE/2, WINDOWSIZE/10)
SWINGLENGTH = PIVOT[1]*4

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.theta = 45
        self.dtheta = 0
        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*cos(radians(self.theta)),
                                PIVOT[1]+SWINGLENGTH*sin(radians(self.theta)),
                                1,1)
        self.draw()

    def recomputeAngle(self):
        scaling = 3000.0/(SWINGLENGTH**2)
        angles_and_deltas = []

        for _ in range(4):
            current_ddtheta = -sin(radians(self.theta)) * scaling
            new_dtheta = self.dtheta + current_ddtheta
            new_theta = self.theta + (self.dtheta + new_dtheta)/2.0
            angles_and_deltas.append((new_theta, new_dtheta))
            self.theta, self.dtheta = new_theta, new_dtheta

        final_theta, final_dtheta = angles_and_deltas[-1]
        self.rect = pygame.Rect(PIVOT[0]-SWINGLENGTH*sin(radians(final_theta)), 
                                PIVOT[1]+SWINGLENGTH*cos(radians(final_theta)), 1, 1)

    def draw(self):
        pygame.draw.circle(screen, (0,0,0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0,0,0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0,0,0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0,0,0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

    def update(self):
        self.recomputeAngle()
        screen.fill((255,255,255))
        self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def handle_events(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        if event.type == TICK:
            bob.update()

while True:
    events = pygame.event.get()
    handle_events(events)
    pygame.display.flip()"
id9of_4_1,id9of,Animate a pendulum,Game Development,Physics Simulations,python,T4,Same Language,"import pygame, sys
from pygame.locals import *
from math import sin, cos, radians

pygame.init()

WINDOWSIZE = 250
TIMETICK = 100
BOBSIZE = 15

window = pygame.display.set_mode((WINDOWSIZE, WINDOWSIZE))

PIVOT = (WINDOWSIZE / 2, WINDOWSIZE / 10)
SWINGLENGTH = PIVOT[1] * 4

class BobMass(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.theta = 45
        self.dtheta = 0
        self.update_rect()
        self.draw()

    def update_rect(self):
        self.rect = pygame.Rect(
            PIVOT[0] - SWINGLENGTH * sin(radians(self.theta)),
            PIVOT[1] + SWINGLENGTH * cos(radians(self.theta)), 
            1, 1
        )

    def recomputeAngle(self):
        scaling = 3000.0 / (SWINGLENGTH ** 2)
        firstDDtheta = -sin(radians(self.theta)) * scaling
        midDtheta = self.dtheta + firstDDtheta
        midtheta = self.theta + (self.dtheta + midDtheta) / 2.0
        midDDtheta = -sin(radians(midtheta)) * scaling
        midDtheta = self.dtheta + (firstDDtheta + midDDtheta) / 2
        midtheta = self.theta + (self.dtheta + midDtheta) / 2
        midDDtheta = -sin(radians(midtheta)) * scaling
        lastDtheta = midDtheta + midDDtheta
        lasttheta = midtheta + (midDtheta + lastDtheta) / 2.0
        lastDDtheta = -sin(radians(lasttheta)) * scaling
        lastDtheta = midDtheta + (midDDtheta + lastDDtheta) / 2.0
        lasttheta = midtheta + (midDtheta + lastDtheta) / 2.0

        self.dtheta = lastDtheta
        self.theta = lasttheta
        self.update_rect()

    def draw(self):
        screen.fill((255, 255, 255))
        pygame.draw.circle(screen, (0, 0, 0), PIVOT, 5, 0)
        pygame.draw.circle(screen, (0, 0, 0), self.rect.center, BOBSIZE, 0)
        pygame.draw.aaline(screen, (0, 0, 0), PIVOT, self.rect.center)
        pygame.draw.line(screen, (0, 0, 0), (0, PIVOT[1]), (WINDOWSIZE, PIVOT[1]))

    def update(self):
        self.recomputeAngle()
        self.draw()

bob = BobMass()

TICK = USEREVENT + 2
pygame.time.set_timer(TICK, TIMETICK)

def handle_events(events):
    for event in events:
        if event.type == QUIT:
            sys.exit(0)
        elif event.type == TICK:
            bob.update()

while True:
    handle_events(pygame.event.get())
    pygame.display.flip()"
id9of_4_2,id9of,Animate a pendulum,Game Development,Physics Simulations,go,T4,Different Language,"package main

import (
	""github.com/google/gxui""
	""github.com/google/gxui/drivers/gl""
	""github.com/google/gxui/math""
	""github.com/google/gxui/themes/dark""
	omath ""math""
	""time""
)"
id9of_4_2,id9of,Animate a pendulum,Game Development,Physics Simulations,java,T4,Different Language,"import java.awt.*;
import javax.swing.*;

public class Pendulum extends JPanel implements Runnable {

    private double angle = Math.PI / 2;
    private int length;

    public Pendulum(int length) {
        this.length = length;
        setDoubleBuffered(true);
    }

    @Override
    public void paint(Graphics g) {
        g.setColor(Color.WHITE);
        g.fillRect(0, 0, getWidth(), getHeight());
        g.setColor(Color.BLACK);
        int anchorX = getWidth() / 2, anchorY = getHeight() / 4;
        int ballX = anchorX + (int) (Math.sin(angle) * length);
        int ballY = anchorY + (int) (Math.cos(angle) * length);
        g.drawLine(anchorX, anchorY, ballX, ballY);
        g.fillOval(anchorX - 3, anchorY - 4, 7, 7);
        g.fillOval(ballX - 7, ballY - 7, 14, 14);
    }

    public void run() {
        double angleAccel, angleVelocity = 0, dt = 0.1;
        while (true) {
            angleAccel = -9.81 / length * Math.sin(angle);
            angleVelocity += angleAccel * dt;
            angle += angleVelocity * dt;
            repaint();
            try { Thread.sleep(15); } catch (InterruptedException ex) {}
        }
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(2 * length + 50, length / 2 * 3);
    }

    public static void main(String[] args) {
        JFrame f = new JFrame(""Pendulum"");
        Pendulum p = new Pendulum(200);
        f.add(p);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.pack();
        f.setVisible(true);
        new Thread(p).start();
    }
}"
id9of_4_2,id9of,Animate a pendulum,Game Development,Physics Simulations,javascript,T4,Different Language,"<html><head>
  <title>Pendulum</title>
</head><body style=""background: gray;"">

<canvas id=""canvas"" width=""600"" height=""600"">
  <p>Sorry, your browser does not support the &lt;canvas&gt; used to display the pendulum animation.</p>
</canvas>
<script>
  function PendulumSim(length_m, gravity_mps2, initialAngle_rad, timestep_ms, callback) {
    var velocity = 0;
    var angle = initialAngle_rad;
    var k = -gravity_mps2/length_m;
    var timestep_s = timestep_ms / 1000;
    return setInterval(function () {
      var acceleration = k * Math.sin(angle);
      velocity += acceleration * timestep_s;
      angle    += velocity     * timestep_s;
      callback(angle);
    }, timestep_ms);
  }

  var canvas = document.getElementById('canvas');
  var context = canvas.getContext('2d');
  var prev=0;
  var sim = PendulumSim(1, 9.80665, Math.PI*99/100, 10, function (angle) {
    var rPend = Math.min(canvas.width, canvas.height) * 0.47;
    var rBall = Math.min(canvas.width, canvas.height) * 0.02;
    var rBar = Math.min(canvas.width, canvas.height) * 0.005;
    var ballX = Math.sin(angle) * rPend;
    var ballY = Math.cos(angle) * rPend;

    context.fillStyle = ""rgba(255,255,255,0.51)"";
    context.globalCompositeOperation = ""destination-out"";
    context.fillRect(0, 0, canvas.width, canvas.height);

    context.fillStyle = ""yellow"";
    context.strokeStyle = ""rgba(0,0,0,""+Math.max(0,1-Math.abs(prev-angle)*10)+"")"";
    context.globalCompositeOperation = ""source-over"";

    context.save();
      context.translate(canvas.width/2, canvas.height/2);
      context.rotate(angle);

      context.beginPath();
      context.rect(-rBar, -rBar, rBar*2, rPend+rBar*2);
      context.fill();
      context.stroke();

      context.beginPath();
      context.arc(0, rPend, rBall, 0, Math.PI*2, false);
      context.fill();
      context.stroke();
    context.restore();
    prev=angle;
  });
</script>

</body></html>"
id9of_4_2,id9of,Animate a pendulum,Game Development,Physics Simulations,ruby,T4,Different Language,"require 'tk'

$root = TkRoot.new( => )
$canvas = TkCanvas.new($root) do
  width 320
  height 200
  create TkcLine, 0,25,320,25,   'tags' => 'plate', 'width' => 2, 'fill' => 'grey50'
  create TkcOval, 155,20,165,30, 'tags' => 'pivot', 'outline' => , 'fill' => 'grey50'
  create TkcLine, 1,1,1,1, 'tags' => 'rod', 'width' => 3, 'fill' => 'black'
  create TkcOval, 1,1,2,2, 'tags' => 'bob', 'outline' => 'black', 'fill' => 'yellow'
end
$canvas.raise('pivot')
$canvas.pack('fill' => 'both', 'expand' => true)

$Theta = 45.0
$dTheta = 0.0
$length = 150
$homeX = 160
$homeY = 25

def show_pendulum
  angle = $Theta * Math::PI / 180
  x = $homeX + $length * Math.sin(angle)
  y = $homeY + $length * Math.cos(angle)
  $canvas.coords('rod', $homeX, $homeY, x, y)
  $canvas.coords('bob', x-15, y-15, x+15, y+15)
end

def recompute_angle
  scaling = 3000.0 / ($length ** 2)
  
  firstDDTheta = -Math.sin($Theta * Math::PI / 180) * scaling
  midDTheta = $dTheta + firstDDTheta
  midTheta = $Theta + ($dTheta + midDTheta)/2
  
  midDDTheta = -Math.sin(midTheta * Math::PI / 180) * scaling
  midDTheta = $dTheta + (firstDDTheta + midDDTheta)/2
  midTheta = $Theta + ($dTheta + midDTheta)/2
  
  midDDTheta = -Math.sin(midTheta * Math::PI / 180) * scaling
  lastDTheta = midDTheta + midDDTheta
  lastTheta = midTheta + (midDTheta + lastDTheta)/2
  
  lastDDTheta = -Math.sin(lastTheta * Math::PI/180) * scaling
  lastDTheta = midDTheta + (midDDTheta + lastDDTheta)/2
  lastTheta = midTheta + (midDTheta + lastDTheta)/2
  
  $dTheta  = lastDTheta
  $Theta = lastTheta
end

def animate
  recompute_angle
  show_pendulum
  $after_id = $root.after(15) {animate}
end

show_pendulum
$after_id = $root.after(500) {animate}

$canvas.bind('<Destroy>') {$root.after_cancel($after_id)}

Tk.mainloop"
v5a29_1_1,v5a29,Animation,Game Development,Graphics,python,T1,Identical Clone,"import sys

from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.initUI()
        self.timer = QBasicTimer()
        self.timer.start(80, self)

    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText()
        self.setFont(QFont(None, 50, QFont.Bold))
        
        self.setStyleSheet()

    def timerEvent(self, event):
        i = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[i:] + self.text()[:i])  

    def mouseReleaseEvent(self, event):  
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = Marquee()

w.adjustSize()  
w.move(QApplication.instance().desktop().screen().rect().center()
       - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_1_2,v5a29,Animation,Game Development,Graphics,python,T1,Different Whitespaces,"import sys
from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel

class Marquee(QLabel):
 def __init__(self, **kwargs):
  super().__init__(**kwargs)
  self.right_to_left_direction = True
  self.initUI()
  self.timer = QBasicTimer()
  self.timer.start(80, self)

 def initUI(self):
  self.setWindowFlags(Qt.FramelessWindowHint)
  self.setAttribute(Qt.WA_TranslucentBackground)
  self.setText()
  self.setFont(QFont(None, 50, QFont.Bold))
  self.setStyleSheet()

 def timerEvent(self, event):
  i = 1 if self.right_to_left_direction else -1
  self.setText(self.text()[i:] + self.text()[:i])

 def mouseReleaseEvent(self, event):
  self.right_to_left_direction = not self.right_to_left_direction

 def keyPressEvent(self, event):
  if event.key() == Qt.Key_Escape:
   self.close()

app = QApplication(sys.argv)
w = Marquee()
w.adjustSize()
w.move(QApplication.instance().desktop().screen().rect().center() - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_1_3,v5a29,Animation,Game Development,Graphics,python,T1,Different Comments,"import sys

from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.setupUI()
        self.timer = QBasicTimer()
        self.timer.start(80, self)

    def setupUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText()
        self.setFont(QFont(None, 50, QFont.Bold))
        
        self.setStyleSheet()

    def timerEvent(self, event):
        direction = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[direction:] + self.text()[:direction])  

    def mouseReleaseEvent(self, event):  
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = Marquee()

w.adjustSize()  
w.move(QApplication.instance().desktop().screen().rect().center()
       - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_1_4,v5a29,Animation,Game Development,Graphics,python,T1,Different Formatting,"import sys
from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.initUI()
        self.timer = QBasicTimer()
        self.timer.start(80, self)
        
    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText()
        self.setFont(QFont(None, 50, QFont.Bold))
        self.setStyleSheet()
        
    def timerEvent(self, event):
        i = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[i:] + self.text()[:i])

    def mouseReleaseEvent(self, event):
        self.right_to_left_direction = not self.right_to_left_direction
        
    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = Marquee()
w.adjustSize()
w.move(QApplication.instance().desktop().screen().rect().center() - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_2_1,v5a29,Animation,Game Development,Graphics,python,T2,Different Variable Names,"import sys

from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Scroller(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.is_right_to_left = True
        self.setupUI()
        self.timer_instance = QBasicTimer()
        self.timer_instance.start(80, self)

    def setupUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText()
        self.setFont(QFont(None, 50, QFont.Bold))
        
        self.setStyleSheet()

    def timerEvent(self, event):
        index = 1 if self.is_right_to_left else -1
        self.setText(self.text()[index:] + self.text()[:index])  

    def mouseReleaseEvent(self, event):  
        self.is_right_to_left = not self.is_right_to_left

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


application = QApplication(sys.argv)
window = Scroller()

window.adjustSize()  
window.move(QApplication.instance().desktop().screen().rect().center()
            - window.rect().center())
window.show()
sys.exit(application.exec())"
v5a29_2_2,v5a29,Animation,Game Development,Graphics,python,T2,Different Data Types,"import sys

from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.initUI()
        self.timer = QBasicTimer()
        self.timer.start(80, self)

    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText("""")
        self.setFont(QFont(None, 50, QFont.Bold))
        
        self.setStyleSheet("""")

    def timerEvent(self, event):
        i = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[i:] + self.text()[:i])  

    def mouseReleaseEvent(self, event):  
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = Marquee()

w.adjustSize()  
w.move(QApplication.instance().desktop().screen().rect().center()
       - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_2_3,v5a29,Animation,Game Development,Graphics,python,T2,Different Function Names,"import sys

from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class ScrollingText(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.setupUI()
        self.timer = QBasicTimer()
        self.timer.start(80, self)

    def setupUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText()
        self.setFont(QFont(None, 50, QFont.Bold))
        
        self.setStyleSheet()

    def timerEvent(self, event):
        i = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[i:] + self.text()[:i])  

    def mouseReleaseEvent(self, event):  
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = ScrollingText()

w.adjustSize()  
w.move(QApplication.instance().desktop().screen().rect().center()
       - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_3_1,v5a29,Animation,Game Development,Graphics,python,T3,Added Statements,"import sys

from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.initUI()
        self.timer = QBasicTimer()
        self.timer.start(80, self)

    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText(""Welcome to the Marquee!"")
        self.setFont(QFont(None, 50, QFont.Bold))
        
        self.setStyleSheet(""color: white;"")

    def timerEvent(self, event):
        dir_increment = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[dir_increment:] + self.text()[:dir_increment])  

    def mouseReleaseEvent(self, event):  
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = Marquee()

w.adjustSize()  
center_position = QApplication.instance().desktop().screen().rect().center()
w.move(center_position - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_3_2,v5a29,Animation,Game Development,Graphics,python,T3,Removed Statements,"import sys
from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.timer = QBasicTimer()
        self.timer.start(80, self)

    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFont(QFont(None, 50, QFont.Bold))

    def timerEvent(self, event):
        i = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[i:] + self.text()[:i])  

    def mouseReleaseEvent(self, event):  
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = Marquee()
w.adjustSize()  
w.move(QApplication.instance().desktop().screen().rect().center() - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_3_3,v5a29,Animation,Game Development,Graphics,python,T3,Reordered Statements,"import sys

from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.timer = QBasicTimer()
        self.timer.start(80, self)
        self.initUI()

    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFont(QFont(None, 50, QFont.Bold))
        self.setText()
        self.setStyleSheet()

    def timerEvent(self, event):
        i = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[i:] + self.text()[:i])  

    def mouseReleaseEvent(self, event):  
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = Marquee()

w.adjustSize()  
w.move(QApplication.instance().desktop().screen().rect().center()
       - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_3_4,v5a29,Animation,Game Development,Graphics,python,T3,Control Flow Modifications,"import sys

from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel


class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.initUI()
        self.timer = QBasicTimer()
        self.timer.start(80, self)

    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setText()
        self.setFont(QFont(None, 50, QFont.Bold))
        self.setStyleSheet()

    def timerEvent(self, event):
        if self.right_to_left_direction:
            self.setText(self.text()[1:] + self.text()[:1])  
        else:
            self.setText(self.text()[:-1] + self.text()[-1:]) 

    def mouseReleaseEvent(self, event):  
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):  
        if event.key() == Qt.Key_Escape:
            self.close()


app = QApplication(sys.argv)
w = Marquee()

w.adjustSize()  
center_point = QApplication.instance().desktop().screen().rect().center()
w.move(center_point - w.rect().center())
w.show()
sys.exit(app.exec())"
v5a29_4_1,v5a29,Animation,Game Development,Graphics,python,T4,Same Language,"import sys
from PyQt5.QtCore import QBasicTimer, Qt
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication, QLabel

class Marquee(QLabel):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.right_to_left_direction = True
        self.initUI()
        self.startTimer()

    def initUI(self):
        self.setWindowFlags(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFont(QFont(None, 50, QFont.Bold))

    def startTimer(self):
        self.timer = QBasicTimer()
        self.timer.start(80, self)

    def timerEvent(self, event):
        step = 1 if self.right_to_left_direction else -1
        self.setText(self.text()[step:] + self.text()[:step])  

    def mouseReleaseEvent(self, event):
        self.right_to_left_direction = not self.right_to_left_direction

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Escape:
            self.close()

def main():
    app = QApplication(sys.argv)
    w = Marquee()
    w.adjustSize()
    w.move(QApplication.instance().desktop().screen().rect().center() - w.rect().center())
    w.show()
    sys.exit(app.exec())

if __name__ == '__main__':
    main()"
v5a29_4_2,v5a29,Animation,Game Development,Graphics,go,T4,Different Language,"package main

import (
    ""log""
    ""time""

    ""github.com/gdamore/tcell""
)

const (
    msg             = ""Hello World! ""
    x0, y0          = 8, 3
    shiftsPerSecond = 4
    clicksToExit    = 5
)

func main() {
    s, err := tcell.NewScreen()
    if err != nil {
        log.Fatal(err)
    }
    if err = s.Init(); err != nil {
        log.Fatal(err)
    }
    s.Clear()
    s.EnableMouse()
    tick := time.Tick(time.Second / shiftsPerSecond)
    click := make(chan bool)
    go func() {
        for {
            em, ok := s.PollEvent().(*tcell.EventMouse)
            if !ok || em.Buttons()&0xFF == tcell.ButtonNone {
                continue
            }
            mx, my := em.Position()
            if my == y0 && mx >= x0 && mx < x0+len(msg) {
                click <- true
            }
        }
    }()
    for inc, shift, clicks := 1, 0, 0; ; {
        select {
        case <-tick:
            shift = (shift + inc) % len(msg)
            for i, r := range msg {
                s.SetContent(x0+((shift+i)%len(msg)), y0, r, nil, 0)
            }
            s.Show()
        case <-click:
            clicks++
            if clicks == clicksToExit {
                s.Fini()
                return
            }
            inc = len(msg) - inc
        }
    }
}"
v5a29_4_2,v5a29,Animation,Game Development,Graphics,java,T4,Different Language,"import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.WindowConstants;

public class Rotate {

    private static class State {
        private final String text = ""Hello World! "";
        private int startIndex = 0;
        private boolean rotateRight = true;
    }

    public static void main(String[] args) {
        State state = new State();

        JLabel label = new JLabel(state.text);
        label.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent event) {
                state.rotateRight = !state.rotateRight;
            }
        });

        TimerTask task = new TimerTask() {
            public void run() {
                int delta = state.rotateRight ? 1 : -1;
                state.startIndex = (state.startIndex + state.text.length() + delta) % state.text.length();
                label.setText(rotate(state.text, state.startIndex));
            }
        };
        Timer timer = new Timer(false);
        timer.schedule(task, 0, 500);

        JFrame rot = new JFrame();
        rot.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        rot.add(label);
        rot.pack();
        rot.setLocationRelativeTo(null);
        rot.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                timer.cancel();
            }
        });
        rot.setVisible(true);
    }

    private static String rotate(String text, int startIdx) {
        char[] rotated = new char[text.length()];
        for (int i = 0; i < text.length(); i++) {
            rotated[i] = text.charAt((i + startIdx) % text.length());
        }
        return String.valueOf(rotated);
    }
}"
v5a29_4_2,v5a29,Animation,Game Development,Graphics,ruby,T4,Different Language,"require 'tk'
$str = TkVariable.new()
$dir = :right

def animate
  $str.value = shift_char($str.value, $dir)
  $root.after(125) {animate}
end

def shift_char(str, dir)
  case dir
  when :right then str[-1,1] + str[0..-2]
  when :left  then str[1..-1] + str[0,1]
  end
end

$root = TkRoot.new( => )

TkLabel.new($root) do
  textvariable $str
  font 
  pack {side 'top'}
  bind() {$dir = {:right=>:left,:left=>:right}[$dir]}
end

animate
Tk.mainloop"
rj8gq_1_1,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T1,Identical Clone,">>> Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
>>> fib = lambda f: lambda n: None if n < 0 else (0 if n == 0 else (1 if n == 1 else f(n-1) + f(n-2)))
>>> [ Y(fib)(i) for i in range(-2, 10) ]
[None, None, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
rj8gq_1_2,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T1,Different Whitespaces,">>>Y=lambda f:(lambda x:x(x))(lambda y:f(lambda *args:y(y)(*args)))
>>>fib=lambda f:lambda n:none if n<0 else (0 if n==0 else (1 if n==1 else f(n-1)+f(n-2)))
>>>[Y(fib)(i)for i in range(-2,10)]
[None,None,0,1,1,2,3,5,8,13,21,34]"
rj8gq_1_3,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T1,Different Comments,"Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
fib = lambda f: lambda n: None if n < 0 else (0 if n == 0 else (1 if n == 1 else f(n-1) + f(n-2)))
[Y(fib)(i) for i in range(-2, 10)]"
rj8gq_1_4,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T1,Different Formatting,">>> Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
>>> fib = lambda f: lambda n: None if n < 0 else (0 if n == 0 else (1 if n == 1 else f(n-1) + f(n-2)))
>>> [Y(fib)(i) for i in range(-2, 10)]
[None, None, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
rj8gq_2_1,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T2,Different Variable Names,">>> A = lambda B: (lambda C: C(C))(lambda D: B(lambda *E: D(D)(*E)))
>>> G = lambda H: lambda I: None if I < 0 else (0 if I == 0 else (1 if I == 1 else H(I-1) + H(I-2)))
>>> [ A(G)(J) for J in range(-2, 10) ]
[None, None, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
rj8gq_2_2,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T2,Different Data Types,"Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
fib = lambda f: lambda n: None if n < 0 else (0 if n == 0 else (1 if n == 1 else f(n-1) + f(n-2)))
list(Y(fib)(i) for i in range(-2, 10))"
rj8gq_2_3,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T2,Different Function Names,">>> Z = lambda g: (lambda x: x(x))(lambda y: g(lambda *args: y(y)(*args)))
>>> fibonacci = lambda g: lambda m: None if m < 0 else (0 if m == 0 else (1 if m == 1 else g(m-1) + g(m-2)))
>>> [ Z(fibonacci)(i) for i in range(-2, 10) ]
[None, None, 0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"
rj8gq_3_1,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T3,Added Statements,"Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
fib = lambda f: lambda n: None if n < 0 else (0 if n == 0 else (1 if n == 1 else f(n-1) + f(n-2)))
result = [Y(fib)(i) for i in range(-2, 10)]
print(result)"
rj8gq_3_2,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T3,Removed Statements,"Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
fib = lambda f: lambda n: None if n < 0 else (1 if n == 1 else f(n-1) + f(n-2))
[Y(fib)(i) for i in range(-2, 10)]"
rj8gq_3_3,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T3,Reordered Statements,"```python
>>> fib = lambda f: lambda n: None if n < 0 else (1 if n == 1 else (0 if n == 0 else f(n-1) + f(n-2)))
>>> Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
>>> [ Y(fib)(i) for i in range(-2, 10) ]
```"
rj8gq_3_4,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T3,Control Flow Modifications,"Y = lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args)))
fib = lambda f: lambda n: (n < 0 and None) or (n == 0 and 0) or (n == 1 and 1) or f(n-1) + f(n-2)
result = []
for i in range(-2, 10):
    result.append(Y(fib)(i))
result"
rj8gq_4_1,rj8gq,Anonymous recursion,Programming Concepts,Recursion,python,T4,Same Language,"Y = (lambda f: (lambda x: x(x))(lambda y: f(lambda *args: y(y)(*args))))  
fib = (lambda f: (lambda n: None if n < 0 else (0 if n == 0 else (1 if n == 1 else f(n-1) + f(n-2)))))  
result = []  
for i in range(-2, 10):  
    result.append(Y(fib)(i))  
result  "
rj8gq_4_2,rj8gq,Anonymous recursion,Programming Concepts,Recursion,go,T4,Different Language,"package main

import ""fmt""

func main() {
    for _, n := range []int{0, 1, 2, 3, 4, 5, 10, 40, -1} {
        f, ok := arFib(n)
        if ok {
            fmt.Printf(""fib%d =%d\n"", n, f)
        } else {
            fmt.Println(""fib undefined for negative numbers"")
        }
    }
}

func arFib(n int) (int, bool) {
    switch {
    case n < 0:
        return 0, false
    case n < 2:
        return n, true
    }
    return yc(func(recurse fn) fn {
        return func(left, term1, term2 int) int {
            if left == 0 {
                return term1+term2
            }
            return recurse(left-1, term1+term2, term1)
        }
    })(n-2, 1, 0), true
}

type fn func(int, int, int) int
type ff func(fn) fn
type fx func(fx) fn

func yc(f ff) fn {
    return func(x fx) fn {
        return x(x)
    }(func(x fx) fn {
        return f(func(a1, a2, a3 int) int {
            return x(x)(a1, a2, a3)
        })
    })
}"
rj8gq_4_2,rj8gq,Anonymous recursion,Programming Concepts,Recursion,java,T4,Different Language,"public static long fib(int n) {
    if (n < 0)
        throw new IllegalArgumentException(""n can not be a negative number"");

    return new Object() {
        private long fibInner(int n) {
            return (n < 2) ? n : (fibInner(n - 1) + fibInner(n - 2));
        }
    }.fibInner(n);
}"
rj8gq_4_2,rj8gq,Anonymous recursion,Programming Concepts,Recursion,javascript,T4,Different Language,"function fibo(n) {
  if (n < 0) { throw ""Argument cannot be negative""; }

  return (function(n) {
    return (n < 2) ? 1 : arguments.callee(n-1) + arguments.callee(n-2);
  })(n);
}"
rj8gq_4_2,rj8gq,Anonymous recursion,Programming Concepts,Recursion,php,T4,Different Language,"<?php
function fib($n) {
    if ($n < 0)
        throw new Exception('Negative numbers not allowed');
    $f = function($n) { 
        if ($n < 2)
            return 1;
        else {
            $g = debug_backtrace()[1]['args'][0];
            return call_user_func($g, $n-1) + call_user_func($g, $n-2);
        }
    };
    return call_user_func($f, $n);
}
echo fib(8), ;
?>"
rj8gq_4_2,rj8gq,Anonymous recursion,Programming Concepts,Recursion,ruby,T4,Different Language,"def fib(n)
  raise RangeError,  if n < 0
  (fib2 = proc { |m| m < 2? m: fib2[m - 1] + fib2[m - 2] })[n]
end"
1eypc_1_1,1eypc,Anti-primes,Mathematics,Number Theory,python,T1,Identical Clone,"from itertools import chain, count, cycle, islice, accumulate

def factors(n):
    def prime_powers(n):
        for c in accumulate(chain([2, 1, 2], cycle([2,4]))):
            if c*c > n: break
            if n%c: continue
            d,p = (), c
            while not n%c:
                n,p,d = n
            yield d
        if n > 1: yield n,

    r = [1]
    for e in prime_powers(n):
        r += [a*b for a in r for b in e]
    return r

def antiprimes():
    mx = 0
    yield 1
    for c in count(2,2):
        if c >= 58: break
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60,30):
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln  

if __name__ == '__main__':
    print(*islice(antiprimes(), 40)))"
1eypc_1_2,1eypc,Anti-primes,Mathematics,Number Theory,python,T1,Different Whitespaces,"from itertools import chain,count,cycle,islice,accumulate

def factors(n):
 def prime_powers(n):
  for c in accumulate(chain([2,1,2],cycle([2,4]))):
   if c*c > n: break
   if n%c: continue
   d,p = (),c
   while not n%c:
    n,p,d = n//c,p*(c),d+(c,)
   yield d
  if n > 1: yield n,

 r = [1]
 for e in prime_powers(n):
  r += [a*b for a in r for b in e]
 return r

def antiprimes():
 mx = 0
 yield 1
 for c in count(2,2):
  if c >= 58: break
  ln = len(factors(c))
  if ln > mx:
   yield c
   mx = ln
 for c in count(60,30):
  ln = len(factors(c))
  if ln > mx:
   yield c
   mx = ln  

if __name__ == '__main__':
 print(*islice(antiprimes(),40))"
1eypc_1_3,1eypc,Anti-primes,Mathematics,Number Theory,python,T1,Different Comments,"from itertools import chain, count, cycle, islice, accumulate

def factors(n):
    def prime_powers(n):
        for c in accumulate(chain([2, 1, 2], cycle([2,4]))):
            if c*c > n: break
            if n%c: continue
            d,p = (), c
            while not n%c:
                n,p,d = n
            yield d
        if n > 1: yield n,

    r = [1]
    for e in prime_powers(n):
        r += [a*b for a in r for b in e]
    return r

def antiprimes():
    mx = 0
    yield 1
    for c in count(2,2):
        if c >= 58: break
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60,30):
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln  

if __name__ == '__main__':
    print(*islice(antiprimes(), 40))"
1eypc_1_4,1eypc,Anti-primes,Mathematics,Number Theory,python,T1,Different Formatting,"from itertools import chain, count, cycle, islice, accumulate

def factors(n):
    def prime_powers(n):
        for c in accumulate(chain([2, 1, 2], cycle([2, 4]))):
            if c * c > n: 
                break
            if n % c: 
                continue
            d, p = (), c
            while not n % c:
                n, p, d = n, p, d
            yield d
        if n > 1: 
            yield n,

    r = [1]
    for e in prime_powers(n):
        r += [a * b for a in r for b in e]
    return r

def antiprimes():
    mx = 0
    yield 1
    for c in count(2, 2):
        if c >= 58: 
            break
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60, 30):
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln  

if __name__ == '__main__':
    print(*islice(antiprimes(), 40))"
1eypc_2_1,1eypc,Anti-primes,Mathematics,Number Theory,python,T2,Different Variable Names,"from itertools import chain, count, cycle, islice, accumulate

def divisors(x):
    def prime_divisors(x):
        for y in accumulate(chain([2, 1, 2], cycle([2, 4]))):
            if y*y > x: break
            if x%y: continue
            z,q = (), y
            while not x%y:
                x,q,z = x
            yield z
        if x > 1: yield x,

    result = [1]
    for element in prime_divisors(x):
        result += [a*b for a in result for b in element]
    return result

def superprimes():
    maximum = 0
    yield 1
    for counter in count(2, 2):
        if counter >= 58: break
        length = len(divisors(counter))
        if length > maximum:
            yield counter
            maximum = length
    for counter in count(60, 30):
        length = len(divisors(counter))
        if length > maximum:
            yield counter
            maximum = length  

if __name__ == '__main__':
    print(*islice(superprimes(), 40))"
1eypc_2_2,1eypc,Anti-primes,Mathematics,Number Theory,python,T2,Different Data Types,"from itertools import chain, count, cycle, islice, accumulate

def factors(n: int) -> list[int]:
    def prime_powers(n: int) -> iter[tuple[int]]:
        for c in accumulate(chain([2, 1, 2], cycle([2, 4]))):
            if c * c > n: break
            if n % c: continue
            d, p = (), c
            while not n % c:
                n, p, d = n, p, d
            yield d,
        if n > 1: yield n,

    r: list[int] = [1]
    for e in prime_powers(n):
        r += [a * b for a in r for b in e]
    return r

def antiprimes() -> iter[int]:
    mx: int = 0
    yield 1
    for c in count(2, 2):
        if c >= 58: break
        ln: int = len(factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60, 30):
        ln: int = len(factors(c))
        if ln > mx:
            yield c
            mx = ln  

if __name__ == '__main__':
    print(*islice(antiprimes(), 40))"
1eypc_2_3,1eypc,Anti-primes,Mathematics,Number Theory,python,T2,Different Function Names,"from itertools import chain, count, cycle, islice, accumulate

def divisor_factors(n):
    def prime_factors(n):
        for c in accumulate(chain([2, 1, 2], cycle([2,4]))):
            if c*c > n: break
            if n%c: continue
            d,p = (), c
            while not n%c:
                n,p,d = n
            yield d
        if n > 1: yield n,

    r = [1]
    for e in prime_factors(n):
        r += [a*b for a in r for b in e]
    return r

def generate_antiprimes():
    mx = 0
    yield 1
    for c in count(2,2):
        if c >= 58: break
        ln = len(divisor_factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60,30):
        ln = len(divisor_factors(c))
        if ln > mx:
            yield c
            mx = ln  

if __name__ == '__main__':
    print(*islice(generate_antiprimes(), 40))"
1eypc_3_1,1eypc,Anti-primes,Mathematics,Number Theory,python,T3,Added Statements,"from itertools import chain, count, cycle, islice, accumulate

def factors(n):
    def prime_powers(n):
        for c in accumulate(chain([2, 1, 2], cycle([2, 4]))):
            if c * c > n: break
            if n % c: continue
            d, p = (), c
            while not n % c:
                n, p, d = n, p, d + (c,)
            yield d
        if n > 1: yield n,

    r = [1]
    for e in prime_powers(n):
        r += [a * b for a in r for b in e]
    return r

def antiprimes():
    mx = 0
    yield 1
    for c in count(2, 2):
        if c >= 58: break
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60, 30):
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln  

if __name__ == '__main__':
    for num in islice(antiprimes(), 40):
        print(num)"
1eypc_3_2,1eypc,Anti-primes,Mathematics,Number Theory,python,T3,Removed Statements,"from itertools import chain, count, islice, accumulate

def factors(n):
    def prime_powers(n):
        for c in accumulate(chain([2, 1, 2], cycle([2, 4]))):
            if c * c > n: break
            if n % c: continue
            d, p = (), c
            while not n % c:
                n, p, d = n
            yield d
        if n > 1: yield n,

    r = [1]
    for e in prime_powers(n):
        r += [a * b for a in r for b in e]
    return r

def antiprimes():
    mx = 0
    yield 1
    for c in count(2, 2):
        if c >= 58: break
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60, 30):
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln  

if __name__ == '__main__':
    print(*islice(antiprimes(), 40))"
1eypc_3_3,1eypc,Anti-primes,Mathematics,Number Theory,python,T3,Reordered Statements,"from itertools import chain, count, cycle, islice, accumulate

def factors(n):
    r = [1]
    for e in prime_powers(n):
        r += [a*b for a in r for b in e]
    return r

def prime_powers(n):
    for c in accumulate(chain([2, 1, 2], cycle([2,4]))):
        if c*c > n: break
        if n%c: continue
        d,p = (), c
        while not n%c:
            n,p,d = n
        yield d
    if n > 1: yield n,

def antiprimes():
    mx = 0
    yield 1
    for c in count(2,2):
        if c >= 58: break
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln
    for c in count(60,30):
        ln = len(factors(c))
        if ln > mx:
            yield c
            mx = ln  

if __name__ == '__main__':
    print(*islice(antiprimes(), 40))"
1eypc_3_4,1eypc,Anti-primes,Mathematics,Number Theory,python,T3,Control Flow Modifications,"from itertools import chain, count, cycle, islice, accumulate

def factors(n):
    def prime_powers(n):
        for c in accumulate(chain([2, 1, 2], cycle([2, 4]))):
            if c * c > n: 
                break
            if n % c != 0: 
                continue
            d, p = (), c
            while n % c == 0:
                n, p, d = n // c, c, d + (c,)
            yield d
        if n > 1: 
            yield n,

    r = [1]
    for e in prime_powers(n):
        r.extend(a * b for a in r for b in e)
    return r

def antiprimes():
    mx = 0
    yield 1
    for c in count(2, 2):
        if c >= 58: 
            break
        ln = len(factors(c))
        if ln > mx:
            mx = ln
            yield c
    for c in count(60, 30):
        ln = len(factors(c))
        if ln > mx:
            mx = ln
            yield c  

if __name__ == '__main__':
    print(*islice(antiprimes(), 40))"
1eypc_4_1,1eypc,Anti-primes,Mathematics,Number Theory,python,T4,Same Language,"from itertools import chain, count, cycle, islice, accumulate

def factors(n):
    def prime_powers(n):
        for c in accumulate(chain([2, 1, 2], cycle([2, 4]))):
            if c * c > n: break
            if n % c: continue
            d, p = (), c
            while not n % c:
                n, p, d = n, p, d + (c,)
            yield d
        if n > 1:
            yield n,

    result = [1]
    for elements in prime_powers(n):
        result.extend(a * b for a in result for b in elements)
    return result

def antiprimes():
    max_count = 0
    yield 1
    for c in count(2, 2):
        if c >= 58: break
        length = len(factors(c))
        if length > max_count:
            yield c
            max_count = length
    for c in count(60, 30):
        length = len(factors(c))
        if length > max_count:
            yield c
            max_count = length

if __name__ == '__main__':
    print(*islice(antiprimes(), 40))"
1eypc_4_2,1eypc,Anti-primes,Mathematics,Number Theory,go,T4,Different Language,"package main

import ""fmt""

func countDivisors(n int) int {
    if n < 2 {
        return 1
    }
    count := 2"
1eypc_4_2,1eypc,Anti-primes,Mathematics,Number Theory,java,T4,Different Language,"public class Antiprime {

    static int countDivisors(int n) {
        if (n < 2) return 1;
        int count = 2;"
1eypc_4_2,1eypc,Anti-primes,Mathematics,Number Theory,javascript,T4,Different Language,"function factors(n) {
  var factors = [];
  for (var i = 1; i <= n; i++) {
    if (n % i == 0) {
      factors.push(i);
    }
  }
  return factors;
}

function generateAntiprimes(n) {
  var antiprimes = [];
  var maxFactors = 0;
  for (var i = 1; antiprimes.length < n; i++) {
    var ifactors = factors(i);
    if (ifactors.length > maxFactors) {
      antiprimes.push(i);
      maxFactors = ifactors.length;
    }
  }
  return antiprimes;
}

function go() {
  var number = document.getElementById(""n"").value;
  document.body.removeChild(document.getElementById(""result-list""));
  document.body.appendChild(showList(generateAntiprimes(number)));
}

function showList(array) {
  var list = document.createElement(""ul"");
  list.id = ""result-list"";
  for (var i = 0; i < array.length; i++) {
    var item = document.createElement(""li"");
    item.appendChild(document.createTextNode(array[i]));
    list.appendChild(item);
  }
  return list;
}"
1eypc_4_2,1eypc,Anti-primes,Mathematics,Number Theory,ruby,T4,Different Language,"require 'prime'

def num_divisors(n)
  n.prime_division.inject(1){|prod, (_p,n)| prod *= (n + 1) } 
end

anti_primes = Enumerator.new do |y| 
  max = 0
  y << 1                            
  2.step(nil,2) do |candidate|      
     num = num_divisors(candidate)
     if  num > max
       y << candidate               
       max = num
     end
  end
end

puts anti_primes.take(20).join()"
kpyhf_1_1,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T1,Identical Clone,"passwd_list=[
  dict(account='jsmith', password='x', UID=1001, GID=1000, 
       GECOS=dict(fullname='Joe Smith', office='Room 1007', extension='(234)555-8917',
                  homephone='(234)555-0077', email='jsmith@rosettacode.org'),
                  directory='/home/jsmith', shell='/bin/bash'),
  dict(account='jdoe', password='x', UID=1002, GID=1000,
       GECOS=dict(fullname='Jane Doe', office='Room 1004', extension='(234)555-8914',
                  homephone='(234)555-0044', email='jdoe@rosettacode.org'),
       directory='/home/jdoe', shell='/bin/bash')
]

passwd_fields=.split()
GECOS_fields=.split()

def passwd_text_repr(passwd_rec):

  passwd_rec[]=.join([ passwd_rec[][field] for field in GECOS_fields])
  for field in passwd_rec: 
    if not isinstance(passwd_rec[field], str):
      passwd_rec[field]=`passwd_rec[field]`
  return .join([ passwd_rec[field] for field in passwd_fields ])

passwd_text=open(,)
for passwd_rec in passwd_list:
  print >> passwd_text,passwd_text_repr(passwd_rec)
passwd_text.close()




passwd_text=open(,)
new_rec=dict(account='xyz', password='x', UID=1003, GID=1000,
             GECOS=dict(fullname='X Yz', office='Room 1003', extension='(234)555-8913',
                        homephone='(234)555-0033', email='xyz@rosettacode.org'),
             directory='/home/xyz', shell='/bin/bash')
print >> passwd_text,  passwd_text_repr(new_rec)
passwd_text.close()




passwd_list=list(open(,))
if  in passwd_list[-1]:
  print ,passwd_list[-1][:-1]"
kpyhf_1_2,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T1,Different Whitespaces,"passwd_list=[dict(account='jsmith',password='x',UID=1001,GID=1000,GECOS=dict(fullname='Joe Smith',office='Room 1007',extension='(234)555-8917',homephone='(234)555-0077',email='jsmith@rosettacode.org'),directory='/home/jsmith',shell='/bin/bash'),dict(account='jdoe',password='x',UID=1002,GID=1000,GECOS=dict(fullname='Jane Doe',office='Room 1004',extension='(234)555-8914',homephone='(234)555-0044',email='jdoe@rosettacode.org'),directory='/home/jdoe',shell='/bin/bash')]
passwd_fields=[].split()
GECOS_fields=[].split()
def passwd_text_repr(passwd_rec):
 passwd_rec[GECOS]=.join([passwd_rec[field]for field in GECOS_fields])
 for field in passwd_rec:
  if not isinstance(passwd_rec[field],str):
   passwd_rec[field]=`passwd_rec[field]`
 return .join([passwd_rec[field]for field in passwd_fields])
passwd_text=open('')
for passwd_rec in passwd_list:
 print>>passwd_text,passwd_text_repr(passwd_rec)
passwd_text.close()
passwd_text=open('')
new_rec=dict(account='xyz',password='x',UID=1003,GID=1000,GECOS=dict(fullname='X Yz',office='Room 1003',extension='(234)555-8913',homephone='(234)555-0033',email='xyz@rosettacode.org'),directory='/home/xyz',shell='/bin/bash')
print>>passwd_text,passwd_text_repr(new_rec)
passwd_text.close()
passwd_list=list(open(''))
if ''in passwd_list[-1]:
 print ,passwd_list[-1][:-1]"
kpyhf_1_3,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T1,Different Comments,"passwd_list=[
  dict(account='jsmith', password='x', UID=1001, GID=1000, 
       GECOS=dict(fullname='Joe Smith', office='Room 1007', extension='(234)555-8917',
                  homephone='(234)555-0077', email='jsmith@rosettacode.org'),
                  directory='/home/jsmith', shell='/bin/bash'),
  dict(account='jdoe', password='x', UID=1002, GID=1000,
       GECOS=dict(fullname='Jane Doe', office='Room 1004', extension='(234)555-8914',
                  homephone='(234)555-0044', email='jdoe@rosettacode.org'),
       directory='/home/jdoe', shell='/bin/bash')
]

passwd_fields=.split()
GECOS_fields=.split()

def passwd_text_repr(passwd_rec):

  passwd_rec[]=.join([ passwd_rec[][field] for field in GECOS_fields])
  for field in passwd_rec: 
    if not isinstance(passwd_rec[field], str):
      passwd_rec[field]=`passwd_rec[field]`
  return .join([ passwd_rec[field] for field in passwd_fields ])

passwd_text=open(,)
for passwd_rec in passwd_list:
  print >> passwd_text,passwd_text_repr(passwd_rec)
passwd_text.close()




passwd_text=open(,)
new_rec=dict(account='xyz', password='x', UID=1003, GID=1000,
             GECOS=dict(fullname='X Yz', office='Room 1003', extension='(234)555-8913',
                        homephone='(234)555-0033', email='xyz@rosettacode.org'),
             directory='/home/xyz', shell='/bin/bash')
print >> passwd_text,  passwd_text_repr(new_rec)
passwd_text.close()




passwd_list=list(open(,))
if  in passwd_list[-1]:
  print ,passwd_list[-1][:-1]"
kpyhf_1_4,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T1,Different Formatting,"passwd_list = [dict(account='jsmith', password='x', UID=1001, GID=1000, 
                    GECOS=dict(fullname='Joe Smith', office='Room 1007', 
                               extension='(234)555-8917', homephone='(234)555-0077', 
                               email='jsmith@rosettacode.org'),
                    directory='/home/jsmith', shell='/bin/bash'),
                dict(account='jdoe', password='x', UID=1002, GID=1000, 
                    GECOS=dict(fullname='Jane Doe', office='Room 1004', 
                               extension='(234)555-8914', homephone='(234)555-0044', 
                               email='jdoe@rosettacode.org'),
                    directory='/home/jdoe', shell='/bin/bash')]

passwd_fields = .split()
GECOS_fields = .split()

def passwd_text_repr(passwd_rec):
    passwd_rec[] = .join([passwd_rec[][field] for field in GECOS_fields])
    for field in passwd_rec:
        if not isinstance(passwd_rec[field], str):
            passwd_rec[field] = `passwd_rec[field]`
    return .join([passwd_rec[field] for field in passwd_fields])

passwd_text = open(,)
for passwd_rec in passwd_list:
    print >> passwd_text, passwd_text_repr(passwd_rec)
passwd_text.close()

passwd_text = open(,)
new_rec = dict(account='xyz', password='x', UID=1003, GID=1000, 
               GECOS=dict(fullname='X Yz', office='Room 1003', 
                          extension='(234)555-8913', homephone='(234)555-0033', 
                          email='xyz@rosettacode.org'),
               directory='/home/xyz', shell='/bin/bash')
print >> passwd_text, passwd_text_repr(new_rec)
passwd_text.close()

passwd_list = list(open(,))
if in passwd_list[-1]:
    print ,passwd_list[-1][:-1]"
kpyhf_2_1,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T2,Different Variable Names,"user_accounts=[
  dict(user='jsmith', pwd='x', user_id=1001, group_id=1000, 
       user_info=dict(full_name='Joe Smith', office_loc='Room 1007', ext='(234)555-8917',
                  home_phone='(234)555-0077', email_addr='jsmith@rosettacode.org'),
                  home_dir='/home/jsmith', shell_path='/bin/bash'),
  dict(user='jdoe', pwd='x', user_id=1002, group_id=1000,
       user_info=dict(full_name='Jane Doe', office_loc='Room 1004', ext='(234)555-8914',
                  home_phone='(234)555-0044', email_addr='jdoe@rosettacode.org'),
       home_dir='/home/jdoe', shell_path='/bin/bash')
]

account_fields=.split()
user_info_fields=.split()

def account_text_repr(user_record):

  user_record[]=.join([ user_record[][field] for field in user_info_fields])
  for field in user_record: 
    if not isinstance(user_record[field], str):
      user_record[field]=`user_record[field]`
  return .join([ user_record[field] for field in account_fields ])

account_file=open(,)
for user_record in user_accounts:
  print >> account_file,account_text_repr(user_record)
account_file.close()




account_file=open(,)
new_entry=dict(user='xyz', pwd='x', user_id=1003, group_id=1000,
             user_info=dict(full_name='X Yz', office_loc='Room 1003', ext='(234)555-8913',
                        home_phone='(234)555-0033', email_addr='xyz@rosettacode.org'),
             home_dir='/home/xyz', shell_path='/bin/bash')
print >> account_file,  account_text_repr(new_entry)
account_file.close()




user_accounts=list(open(,))
if  in user_accounts[-1]:
  print ,user_accounts[-1][:-1]"
kpyhf_2_2,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T2,Different Data Types,"passwd_list=[
  {'account':'jsmith', 'password':'x', 'UID':1001, 'GID':1000, 
       'GECOS':{'fullname':'Joe Smith', 'office':'Room 1007', 'extension':'(234)555-8917',
                  'homephone':'(234)555-0077', 'email':'jsmith@rosettacode.org'},
                  'directory':'/home/jsmith', 'shell':'/bin/bash'},
  {'account':'jdoe', 'password':'x', 'UID':1002, 'GID':1000,
       'GECOS':{'fullname':'Jane Doe', 'office':'Room 1004', 'extension':'(234)555-8914',
                  'homephone':'(234)555-0044', 'email':'jdoe@rosettacode.org'},
       'directory':'/home/jdoe', 'shell':'/bin/bash'}
]

passwd_fields=list()
GECOS_fields=list()

def passwd_text_repr(passwd_rec):

  passwd_rec_text=''.join([ passwd_rec[field] for field in GECOS_fields])
  for field in passwd_rec: 
    if not isinstance(passwd_rec[field], str):
      passwd_rec[field]=str(passwd_rec[field])
  return ''.join([ passwd_rec[field] for field in passwd_fields ])

passwd_text=open('passwd.txt','w')
for passwd_rec in passwd_list:
  print >> passwd_text,passwd_text_repr(passwd_rec)
passwd_text.close()

passwd_text=open('passwd.txt','a')
new_rec={'account':'xyz', 'password':'x', 'UID':1003, 'GID':1000,
             'GECOS':{'fullname':'X Yz', 'office':'Room 1003', 'extension':'(234)555-8913',
                        'homephone':'(234)555-0033', 'email':'xyz@rosettacode.org'},
             'directory':'/home/xyz', 'shell':'/bin/bash'}
print >> passwd_text,  passwd_text_repr(new_rec)
passwd_text.close()

passwd_list=list(open('passwd.txt','r'))
if '' in passwd_list[-1]:
  print(passwd_list[-1][:-1])"
kpyhf_2_3,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T2,Different Function Names,"passwd_list=[
  dict(account='jsmith', password='x', UID=1001, GID=1000, 
       GECOS=dict(fullname='Joe Smith', office='Room 1007', extension='(234)555-8917',
                  homephone='(234)555-0077', email='jsmith@rosettacode.org'),
                  directory='/home/jsmith', shell='/bin/bash'),
  dict(account='jdoe', password='x', UID=1002, GID=1000,
       GECOS=dict(fullname='Jane Doe', office='Room 1004', extension='(234)555-8914',
                  homephone='(234)555-0044', email='jdoe@rosettacode.org'),
       directory='/home/jdoe', shell='/bin/bash')
]

passwd_fields=""account password UID GID GECOS directory shell"".split()
GECOS_fields=""fullname office extension homephone email"".split()

def generate_passwd_text(passwd_rec):

  passwd_rec['GECOS'] = ' '.join([ passwd_rec['GECOS'][field] for field in GECOS_fields])
  for field in passwd_rec: 
    if not isinstance(passwd_rec[field], str):
      passwd_rec[field] = str(passwd_rec[field])
  return ' '.join([ passwd_rec[field] for field in passwd_fields ])

passwd_file=open('passwd.txt','w')
for passwd_rec in passwd_list:
  print >> passwd_file, generate_passwd_text(passwd_rec)
passwd_file.close()

passwd_file=open('passwd.txt','a')
new_record=dict(account='xyz', password='x', UID=1003, GID=1000,
             GECOS=dict(fullname='X Yz', office='Room 1003', extension='(234)555-8913',
                        homephone='(234)555-0033', email='xyz@rosettacode.org'),
             directory='/home/xyz', shell='/bin/bash')
print >> passwd_file,  generate_passwd_text(new_record)
passwd_file.close()

passwd_list=list(open('passwd.txt',))
if 'xyz' in passwd_list[-1]:
  print passwd_list[-1][:-1]"
kpyhf_3_1,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T3,Added Statements,"passwd_list=[
  dict(account='jsmith', password='x', UID=1001, GID=1000, 
       GECOS=dict(fullname='Joe Smith', office='Room 1007', extension='(234)555-8917',
                  homephone='(234)555-0077', email='jsmith@rosettacode.org'),
                  directory='/home/jsmith', shell='/bin/bash'),
  dict(account='jdoe', password='x', UID=1002, GID=1000,
       GECOS=dict(fullname='Jane Doe', office='Room 1004', extension='(234)555-8914',
                  homephone='(234)555-0044', email='jdoe@rosettacode.org'),
       directory='/home/jdoe', shell='/bin/bash')
]

passwd_fields=""account password UID GID GECOS directory shell"".split()
GECOS_fields=""fullname office extension homephone email"".split()

def passwd_text_repr(passwd_rec):
  GECOS_str='; '.join([ passwd_rec['GECOS'][field] for field in GECOS_fields])
  for field in passwd_rec: 
    if not isinstance(passwd_rec[field], str):
      passwd_rec[field]=str(passwd_rec[field])
  return ' '.join([ passwd_rec[field] for field in passwd_fields ]) + "" "" + GECOS_str

passwd_text=open('passwd.txt','w')
for passwd_rec in passwd_list:
  print >> passwd_text,passwd_text_repr(passwd_rec)
passwd_text.close()

passwd_text=open('passwd.txt','a')
new_rec=dict(account='xyz', password='x', UID=1003, GID=1000,
             GECOS=dict(fullname='X Yz', office='Room 1003', extension='(234)555-8913',
                        homephone='(234)555-0033', email='xyz@rosettacode.org'),
             directory='/home/xyz', shell='/bin/bash')
print >> passwd_text,  passwd_text_repr(new_rec)
passwd_text.close()

passwd_list=list(open('passwd.txt','r'))
if 'xyz' in passwd_list[-1]:
  print passwd_list[-1][:-1]"
kpyhf_3_2,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T3,Removed Statements,"passwd_list=[
  dict(account='jsmith', password='x', UID=1001, GID=1000, 
       GECOS=dict(fullname='Joe Smith', office='Room 1007', extension='(234)555-8917',
                  homephone='(234)555-0077', email='jsmith@rosettacode.org'),
                  directory='/home/jsmith', shell='/bin/bash'),
  dict(account='jdoe', password='x', UID=1002, GID=1000,
       GECOS=dict(fullname='Jane Doe', office='Room 1004', extension='(234)555-8914',
                  homephone='(234)555-0044', email='jdoe@rosettacode.org'),
       directory='/home/jdoe', shell='/bin/bash')
]

def passwd_text_repr(passwd_rec):
  for field in passwd_rec: 
    if not isinstance(passwd_rec[field], str):
      passwd_rec[field]=`passwd_rec[field]`
  return .join([ passwd_rec[field] for field in passwd_fields ])

for passwd_rec in passwd_list:
  print >> passwd_text,passwd_text_repr(passwd_rec)

new_rec=dict(account='xyz', password='x', UID=1003, GID=1000,
             GECOS=dict(fullname='X Yz', office='Room 1003', extension='(234)555-8913',
                        homephone='(234)555-0033', email='xyz@rosettacode.org'),
             directory='/home/xyz', shell='/bin/bash')
print >> passwd_text,  passwd_text_repr(new_rec)

passwd_list=list(open(,))
if  in passwd_list[-1]:
  print ,passwd_list[-1][:-1]"
kpyhf_3_3,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T3,Reordered Statements,"passwd_list=[
  dict(account='jsmith', password='x', UID=1001, GID=1000, 
       GECOS=dict(fullname='Joe Smith', office='Room 1007', extension='(234)555-8917',
                  homephone='(234)555-0077', email='jsmith@rosettacode.org'),
                  directory='/home/jsmith', shell='/bin/bash'),
  dict(account='jdoe', password='x', UID=1002, GID=1000,
       GECOS=dict(fullname='Jane Doe', office='Room 1004', extension='(234)555-8914',
                  homephone='(234)555-0044', email='jdoe@rosettacode.org'),
       directory='/home/jdoe', shell='/bin/bash')
]

GECOS_fields=.split()
passwd_fields=.split()

def passwd_text_repr(passwd_rec):
  for field in passwd_rec: 
    if not isinstance(passwd_rec[field], str):
      passwd_rec[field]=`passwd_rec[field]`
  passwd_rec[]=.join([ passwd_rec[][field] for field in GECOS_fields])
  return .join([ passwd_rec[field] for field in passwd_fields ])

passwd_text=open(,)
passwd_list=list(open(,))
for passwd_rec in passwd_list:
  print >> passwd_text,passwd_text_repr(passwd_rec)
passwd_text.close()

new_rec=dict(account='xyz', password='x', UID=1003, GID=1000,
             GECOS=dict(fullname='X Yz', office='Room 1003', extension='(234)555-8913',
                        homephone='(234)555-0033', email='xyz@rosettacode.org'),
             directory='/home/xyz', shell='/bin/bash')
print >> passwd_text,  passwd_text_repr(new_rec)
passwd_text.close()

if  in passwd_list[-1]:
  print ,passwd_list[-1][:-1]"
kpyhf_3_4,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T3,Control Flow Modifications,"passwd_list=[
  dict(account='jsmith', password='x', UID=1001, GID=1000, 
       GECOS=dict(fullname='Joe Smith', office='Room 1007', extension='(234)555-8917',
                  homephone='(234)555-0077', email='jsmith@rosettacode.org'),
                  directory='/home/jsmith', shell='/bin/bash'),
  dict(account='jdoe', password='x', UID=1002, GID=1000,
       GECOS=dict(fullname='Jane Doe', office='Room 1004', extension='(234)555-8914',
                  homephone='(234)555-0044', email='jdoe@rosettacode.org'),
       directory='/home/jdoe', shell='/bin/bash')
]

passwd_fields = ['account', 'password', 'UID', 'GID', 'GECOS', 'directory', 'shell']
GECOS_fields = ['fullname', 'office', 'extension', 'homephone', 'email']

def passwd_text_repr(passwd_rec):
  for field in passwd_rec:
    if not isinstance(passwd_rec[field], str):
      passwd_rec[field] = str(passwd_rec[field])
  gecos_info = ' '.join([passwd_rec['GECOS'][field] for field in GECOS_fields])
  return ' '.join([passwd_rec[field] for field in passwd_fields]) + ' ' + gecos_info

with open('passwd.txt', 'w') as passwd_text:
  for passwd_rec in passwd_list:
    passwd_text.write(passwd_text_repr(passwd_rec) + '\n')

with open('passwd.txt', 'a') as passwd_text:
  new_rec = dict(account='xyz', password='x', UID=1003, GID=1000,
                 GECOS=dict(fullname='X Yz', office='Room 1003', extension='(234)555-8913',
                            homephone='(234)555-0033', email='xyz@rosettacode.org'),
                 directory='/home/xyz', shell='/bin/bash')
  passwd_text.write(passwd_text_repr(new_rec) + '\n')

with open('passwd.txt', 'r') as passwd_text:
  passwd_list = passwd_text.readlines()
if passwd_list and passwd_list[-1].strip():
  print(passwd_list[-1].strip())"
kpyhf_4_1,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,python,T4,Same Language,"passwd_list = [
    {
        'account': 'jsmith', 
        'password': 'x', 
        'UID': 1001, 
        'GID': 1000, 
        'GECOS': {
            'fullname': 'Joe Smith', 
            'office': 'Room 1007', 
            'extension': '(234)555-8917',
            'homephone': '(234)555-0077', 
            'email': 'jsmith@rosettacode.org'
        }, 
        'directory': '/home/jsmith', 
        'shell': '/bin/bash'
    },
    {
        'account': 'jdoe', 
        'password': 'x', 
        'UID': 1002, 
        'GID': 1000,
        'GECOS': {
            'fullname': 'Jane Doe', 
            'office': 'Room 1004', 
            'extension': '(234)555-8914',
            'homephone': '(234)555-0044', 
            'email': 'jdoe@rosettacode.org'
        }, 
        'directory': '/home/jdoe', 
        'shell': '/bin/bash'
    }
]

passwd_fields = []
GECOS_fields = []

def passwd_text_repr(passwd_rec):
    for field in passwd_rec:
        if not isinstance(passwd_rec[field], str):
            passwd_rec[field] = str(passwd_rec[field])
    gecos_values = [passwd_rec['GECOS'][field] for field in GECOS_fields]
    passwd_values = [passwd_rec[field] for field in passwd_fields]
    return ''.join(gecos_values + passwd_values)

with open('passwd.txt', 'w') as passwd_text:
    for passwd_rec in passwd_list:
        passwd_text.write(passwd_text_repr(passwd_rec) + '\n')

with open('passwd.txt', 'a') as passwd_text:
    new_rec = {
        'account': 'xyz', 
        'password': 'x', 
        'UID': 1003, 
        'GID': 1000,
        'GECOS': {
            'fullname': 'X Yz', 
            'office': 'Room 1003', 
            'extension': '(234)555-8913',
            'homephone': '(234)555-0033', 
            'email': 'xyz@rosettacode.org'
        }, 
        'directory': '/home/xyz', 
        'shell': '/bin/bash'
    }
    passwd_text.write(passwd_text_repr(new_rec) + '\n')

with open('passwd.txt', 'r') as passwd_text:
    passwd_list = passwd_text.readlines()
    if len(passwd_list) > 0 and passwd_list[-1].strip():
        print(passwd_list[-1].strip())"
kpyhf_4_2,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,go,T4,Different Language,"package main

import (
    ""bytes""
    ""fmt""
    ""io""
    ""io/ioutil""
    ""os""
)

type pw struct {
    account, password string
    uid, gid          uint
    gecos
    directory, shell string
}

type gecos struct {
    fullname, office, extension, homephone, email string
}

func (p *pw) encode(w io.Writer) (int, error) {
    return fmt.Fprintf(w, ""%s:%s:%d:%d:%s,%s,%s,%s,%s:%s:%s\n"",
        p.account, p.password, p.uid, p.gid,
        p.fullname, p.office, p.extension, p.homephone, p.email,
        p.directory, p.shell)
}"
kpyhf_4_2,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,java,T4,Different Language,"import static java.util.Objects.requireNonNull;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class RecordAppender {
    static class Record {
        private final String account;
        private final String password;
        private final int uid;
        private final int gid;
        private final List<String> gecos;
        private final String directory;
        private final String shell;

        public Record(String account, String password, int uid, int gid, List<String> gecos, String directory, String shell) {
            this.account = requireNonNull(account);
            this.password = requireNonNull(password);
            this.uid = uid;
            this.gid = gid;
            this.gecos = requireNonNull(gecos);
            this.directory = requireNonNull(directory);
            this.shell = requireNonNull(shell);
        }

        @Override
        public String toString() {
            return account + ':' + password + ':' + uid + ':' + gid + ':' + String.join("","", gecos) + ':' + directory + ':' + shell;
        }

        public static Record parse(String text) {
            String[] tokens = text.split("":"");
            return new Record(
                    tokens[0],
                    tokens[1],
                    Integer.parseInt(tokens[2]),
                    Integer.parseInt(tokens[3]),
                    Arrays.asList(tokens[4].split("","")),
                    tokens[5],
                    tokens[6]);
        }
    }

    public static void main(String[] args) throws IOException {
        List<String> rawData = Arrays.asList(
                ""jsmith:x:1001:1000:Joe Smith,Room 1007,(234)555-8917,(234)555-0077,[email protected]:/home/jsmith:/bin/bash"",
                ""jdoe:x:1002:1000:Jane Doe,Room 1004,(234)555-8914,(234)555-0044,[email protected]:/home/jdoe:/bin/bash"",
                ""xyz:x:1003:1000:X Yz,Room 1003,(234)555-8913,(234)555-0033,[email protected]:/home/xyz:/bin/bash""
        );

        List<Record> records = rawData.stream().map(Record::parse).collect(Collectors.toList());

        Path tmp = Paths.get(""_rosetta"", "".passwd"");
        Files.createDirectories(tmp.getParent());
        Files.write(tmp, (Iterable<String>) records.stream().limit(2).map(Record::toString)::iterator);

        Files.write(tmp, Collections.singletonList(records.get(2).toString()), StandardOpenOption.APPEND);

        try (Stream<String> lines = Files.lines(tmp)) {
            lines.map(Record::parse).forEach(System.out::println);
        }
    }
}"
kpyhf_4_2,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,php,T4,Different Language,"<?php

$filename = '/tmp/passwd';

$data = array(
    'account:password:UID:GID:fullname,office,extension,homephone,email:directory:shell' . PHP_EOL,
    'jsmith:x:1001:1000:Joe Smith,Room 1007,(234)555-8917,(234)555-0077,jsmith@rosettacode.org:/home/jsmith:/bin/bash' . PHP_EOL,
    'jdoe:x:1002:1000:Jane Doe,Room 1004,(234)555-8914,(234)555-0044,jdoe@rosettacode.org:/home/jdoe:/bin/bash' . PHP_EOL,
);
file_put_contents($filename, $data, LOCK_EX);

echo 'File contents before new record added:', PHP_EOL, file_get_contents($filename), PHP_EOL;

$data = array(
    'xyz:x:1003:1000:X Yz,Room 1003,(234)555-8913,(234)555-0033,xyz@rosettacode.org:/home/xyz:/bin/bash' . PHP_EOL
);
file_put_contents($filename, $data, FILE_APPEND | LOCK_EX);

echo 'File contents after new record added:', PHP_EOL, file_get_contents($filename), PHP_EOL;"
kpyhf_4_2,kpyhf,Append a record to the end of a text file,Utilities & Scripts,File Operations,ruby,T4,Different Language,"Gecos = Struct.new :fullname, :office, :extension, :homephone, :email 
class Gecos
  def to_s
     % to_a
  end
end


Passwd = Struct.new(:account, :password, :uid, :gid, :gecos, :directory, :shell) do
  def to_s
    to_a.join(':')
  end
end

jsmith = Passwd.new('jsmith','x',1001, 1000, Gecos.new('Joe Smith', 'Room 1007', '(234)555-8917', '(234)555-0077', 'jsmith@rosettacode.org'), '/home/jsmith', '/bin/bash')
jdoe = Passwd.new('jdoe','x',1002, 1000, Gecos.new('Jane Doe', 'Room 1004', '(234)555-8914', '(234)555-0044', 'jdoe@rosettacode.org'), '/home/jdoe', '/bin/bash')
xyz = Passwd.new('xyz','x',1003, 1000, Gecos.new('X Yz', 'Room 1003', '(234)555-8913', '(234)555-0033', 'xyz@rosettacode.org'), '/home/xyz', '/bin/bash')

filename = 'append.records.test'


File.open(filename, 'w') do |io|
  io.puts jsmith
  io.puts jdoe
end

puts 
puts File.readlines(filename)


File.open(filename, 'a') do |io|
  io.puts xyz
end

puts 
puts File.readlines(filename)"
s82q9_1_1,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T1,Identical Clone,"def square(n):
    return n * n

numbers = [1, 3, 5, 7]

squares1 = [square(n) for n in numbers]     

squares2a = map(square, numbers)            

squares2b = map(lambda x: x*x, numbers)     

squares3 = [n * n for n in numbers]         
                                            

isquares1 = (n * n for n in numbers)        

import itertools
isquares2 = itertools.imap(square, numbers)"
s82q9_1_2,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T1,Different Whitespaces,"def square(n): return n * n
numbers = [1, 3, 5, 7]
squares1 = [square(n) for n in numbers]
squares2a = map(square, numbers)
squares2b = map(lambda x: x*x, numbers)
squares3 = [n * n for n in numbers]
isquares1 = (n * n for n in numbers)
import itertools
isquares2 = itertools.imap(square, numbers)"
s82q9_1_3,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T1,Different Comments,"def square(n):
    return n * n

numbers = [1, 3, 5, 7]

squares1 = [square(n) for n in numbers]     

squares2a = map(square, numbers)            

squares2b = map(lambda x: x*x, numbers)     

squares3 = [n * n for n in numbers]         
                                            

isquares1 = (n * n for n in numbers)        

import itertools
isquares2 = itertools.imap(square, numbers)"
s82q9_1_4,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T1,Different Formatting,"def square(n): 
    return n * n 

numbers = [1, 3, 5, 7] 

squares1 = [square(n) for n in numbers] 
squares2a = map(square, numbers) 
squares2b = map(lambda x: x * x, numbers) 
squares3 = [n * n for n in numbers] 
isquares1 = (n * n for n in numbers) 

import itertools 
isquares2 = itertools.imap(square, numbers) "
s82q9_2_1,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T2,Different Variable Names,"def rectangle(x):
    return x * x

list_of_numbers = [1, 3, 5, 7]

rectangle_results1 = [rectangle(x) for x in list_of_numbers]     

rectangle_results2a = map(rectangle, list_of_numbers)            

rectangle_results2b = map(lambda y: y*y, list_of_numbers)     

rectangle_results3 = [x * x for x in list_of_numbers]         
                                            

iterator_rectangle1 = (x * x for x in list_of_numbers)        

import itertools
iterator_rectangle2 = itertools.imap(rectangle, list_of_numbers)"
s82q9_2_2,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T2,Different Data Types,"def square(n: int) -> int:
    return n * n

numbers = {1, 3, 5, 7}

squares1 = {square(n) for n in numbers}     

squares2a = map(square, numbers)            

squares2b = map(lambda x: x*x, numbers)     

squares3 = {n * n for n in numbers}         
                                            

isquares1 = (n * n for n in numbers)        

import itertools
isquares2 = itertools.map(square, numbers)"
s82q9_2_3,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T2,Different Function Names,"def multiply(n):
    return n * n

numbers = [1, 3, 5, 7]

squares1 = [multiply(n) for n in numbers]     

squares2a = map(multiply, numbers)            

squares2b = map(lambda x: x*x, numbers)     

squares3 = [n * n for n in numbers]         
                                            

isquares1 = (n * n for n in numbers)        

import itertools
isquares2 = itertools.imap(multiply, numbers)"
s82q9_3_1,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T3,Added Statements,"def square(n):
    return n * n

numbers = [1, 3, 5, 7]

squares1 = [square(n) for n in numbers]     

squares2a = list(map(square, numbers))            

squares2b = list(map(lambda x: x*x, numbers))     

squares3 = [n ** 2 for n in numbers]         
                                            

isquares1 = (n ** 2 for n in numbers)        

import itertools
isquares2 = (square(n) for n in numbers) "
s82q9_3_2,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T3,Removed Statements,"def square(n):
    return n * n

numbers = [1, 3, 5, 7]

squares1 = [square(n) for n in numbers]     
squares2b = map(lambda x: x*x, numbers)     
squares3 = [n * n for n in numbers]         
isquares1 = (n * n for n in numbers)        "
s82q9_3_3,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T3,Reordered Statements,"def square(n):
    return n * n

numbers = [1, 3, 5, 7]

squares2a = map(square, numbers)            

squares2b = map(lambda x: x*x, numbers)     

squares1 = [square(n) for n in numbers]     

squares3 = [n * n for n in numbers]         

isquares2 = itertools.imap(square, numbers)

isquares1 = (n * n for n in numbers)        

import itertools"
s82q9_3_4,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T3,Control Flow Modifications,"def square(n):
    return n * n

numbers = [1, 3, 5, 7]

squares1 = []
for n in numbers:
    squares1.append(square(n))

squares2a = []
for n in map(square, numbers):
    squares2a.append(n)

squares2b = []
for n in map(lambda x: x*x, numbers):
    squares2b.append(n)

squares3 = []
for n in numbers:
    squares3.append(n * n)

isquares1 = (n * n for n in numbers)

import itertools
isquares2 = (n for n in itertools.imap(square, numbers))"
s82q9_4_1,s82q9,Apply a callback to an array,Programming Concepts,Functions,python,T4,Same Language,"def square(n):
    return n * n

numbers = [1, 3, 5, 7]

def compute_squares(numbers):
    return [square(n) for n in numbers], list(map(square, numbers)), list(map(lambda x: x*x, numbers)), [n * n for n in numbers], (n * n for n in numbers)

import itertools
def compute_isquares(numbers):
    return itertools.imap(square, numbers)

squares1, squares2a, squares2b, squares3, isquares1 = compute_squares(numbers)
isquares2 = compute_isquares(numbers)"
s82q9_4_2,s82q9,Apply a callback to an array,Programming Concepts,Functions,go,T4,Different Language,"package main

import ""fmt""

func main() {
    for _, i := range []int{1, 2, 3, 4, 5} {
        fmt.Println(i * i)
    }
}"
s82q9_4_2,s82q9,Apply a callback to an array,Programming Concepts,Functions,java,T4,Different Language,"public class ArrayCallback7 {

    interface IntConsumer {
        void run(int x);
    }

    interface IntToInt {
        int run(int x);
    }

    static void forEach(int[] arr, IntConsumer consumer) {
        for (int i : arr) {
            consumer.run(i);
        }
    }

    static void update(int[] arr, IntToInt mapper) {
        for (int i = 0; i < arr.length; i++) {
            arr[i] = mapper.run(arr[i]);
        }
    }

    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        forEach(numbers, new IntConsumer() {
            public void run(int x) {
                System.out.println(x);
            }
        });

        update(numbers, new IntToInt() {
            @Override
            public int run(int x) {
                return x * x;
            }
        });

        forEach(numbers, new IntConsumer() {
            public void run(int x) {
                System.out.println(x);
            }
        });
    }
}"
s82q9_4_2,s82q9,Apply a callback to an array,Programming Concepts,Functions,javascript,T4,Different Language,"function map(a, func) {
  var ret = [];
  for (var i = 0; i < a.length; i++) {
    ret[i] = func(a[i]);
  }
  return ret;
}

map([1, 2, 3, 4, 5], function(v) { return v * v; });"
s82q9_4_2,s82q9,Apply a callback to an array,Programming Concepts,Functions,php,T4,Different Language,"function cube($n)
{
   return($n * $n * $n);
}

$a = array(1, 2, 3, 4, 5);
$b = array_map(, $a);
print_r($b);"
s82q9_4_2,s82q9,Apply a callback to an array,Programming Concepts,Functions,ruby,T4,Different Language,"for i in [1,2,3,4,5] do
   puts i**2
end"
7h3rm_1_1,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T1,Identical Clone,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

if __name__==:
	sig = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
		-0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
		0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
		0.0259303398477,0.490105989562,0.549391221511,0.9047198589]

	
	
	a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
	b = [0.16666667, 0.5, 0.5, 0.16666667]

	
	filt = signal.lfilter(b, a, sig)
	print (filt)

	plt.plot(sig, 'b')
	plt.plot(filt, 'r--')
	plt.show()"
7h3rm_1_2,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T1,Different Whitespaces,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt
if __name__== ""__main__"":
 sig = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
  -0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
  0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
  0.0259303398477,0.490105989562,0.549391221511,0.9047198589]
 a = [1.00000000,-2.77555756e-16,3.33333333e-01,-1.85037171e-17]
 b = [0.16666667,0.5,0.5,0.16666667]
 filt = signal.lfilter(b,a,sig)
 print(filt)
 plt.plot(sig,'b')
 plt.plot(filt,'r--')
 plt.show()"
7h3rm_1_3,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T1,Different Comments,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

if __name__ == '__main__':
	data = [-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494,
		-0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207,
		0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293,
		0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589]

	coeff_a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
	coeff_b = [0.16666667, 0.5, 0.5, 0.16666667]

	output = signal.lfilter(coeff_b, coeff_a, data)
	print(output)

	plt.plot(data, 'b')
	plt.plot(output, 'r--')
	plt.show()"
7h3rm_1_4,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T1,Different Formatting,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

if __name__ == ""__main__"":
    sig = [
        -0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, 
        -1.00700480494, -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 
        0.741527555207, 0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, 
        -0.134316096293, 0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589
    ]
    
    a = [
        1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17
    ]
    b = [
        0.16666667, 0.5, 0.5, 0.16666667
    ]
    
    filt = signal.lfilter(b, a, sig)
    print(filt)
    
    plt.plot(sig, 'b')
    plt.plot(filt, 'r--')
    plt.show()"
7h3rm_2_1,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T2,Different Variable Names,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

if __name__==__main__:
	input_signal = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
		-0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
		0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
		0.0259303398477,0.490105989562,0.549391221511,0.9047198589]

	
	denominator = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
	numerator = [0.16666667, 0.5, 0.5, 0.16666667]

	
	filtered_signal = signal.lfilter(numerator, denominator, input_signal)
	print(filtered_signal)

	plt.plot(input_signal, 'b')
	plt.plot(filtered_signal, 'r--')
	plt.show()"
7h3rm_2_2,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T2,Different Data Types,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

if __name__=='':
	sig = {-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
		-0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
		0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
		0.0259303398477,0.490105989562,0.549391221511,0.9047198589}

	
	
	a = (1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17)
	b = (0.16666667, 0.5, 0.5, 0.16666667)

	
	filt = signal.lfilter(b, a, sig)
	print (filt)

	plt.plot(list(sig), 'b')
	plt.plot(filt, 'r--')
	plt.show()"
7h3rm_2_3,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T2,Different Function Names,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

if __name__==:
	input_signal = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
		-0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
		0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
		0.0259303398477,0.490105989562,0.549391221511,0.9047198589]

	
	coeff_a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
	coeff_b = [0.16666667, 0.5, 0.5, 0.16666667]

	
	filtered_signal = signal.lfilter(coeff_b, coeff_a, input_signal)
	print (filtered_signal)

	plt.plot(input_signal, 'b')
	plt.plot(filtered_signal, 'r--')
	plt.show()"
7h3rm_3_1,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T3,Added Statements,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

if __name__ == '__main__':
    sig = [-0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412, -0.662370894973, -1.00700480494,
           -0.404707073677, 0.800482325044, 0.743500089861, 1.01090520172, 0.741527555207,
           0.277841675195, 0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293,
           0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589]

    a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
    b = [0.16666667, 0.5, 0.5, 0.16666667]

    filt = signal.lfilter(b, a, sig)
    print(filt)

    plt.figure()
    plt.plot(sig, color='blue', label='Original Signal')
    plt.plot(filt, linestyle='--', color='red', label='Filtered Signal')
    plt.legend()
    plt.xlabel('Samples')
    plt.ylabel('Amplitude')
    plt.title('Signal and Filtered Signal')
    plt.grid()
    plt.show()"
7h3rm_3_2,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T3,Removed Statements,"from scipy import signal
import matplotlib.pyplot as plt

sig = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
		-0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
		0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
		0.0259303398477,0.490105989562,0.549391221511,0.9047198589]

a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
b = [0.16666667, 0.5, 0.5, 0.16666667]

filt = signal.lfilter(b, a, sig)
print(filt)

plt.plot(sig, 'b')
plt.plot(filt, 'r--')
plt.show()"
7h3rm_3_3,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T3,Reordered Statements,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

if __name__==__main__:
    a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
    b = [0.16666667, 0.5, 0.5, 0.16666667]

    sig = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
           -0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
           0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
           0.0259303398477,0.490105989562,0.549391221511,0.9047198589]

    filt = signal.lfilter(b, a, sig)
    print(filt)

    plt.plot(sig, 'b')
    plt.plot(filt, 'r--')
    plt.show()"
7h3rm_3_4,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T3,Control Flow Modifications,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

def main():
	sig = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
		-0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
		0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
		0.0259303398477,0.490105989562,0.549391221511,0.9047198589]

	a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
	b = [0.16666667, 0.5, 0.5, 0.16666667]

	filt = signal.lfilter(b, a, sig)
	print(filt)

	plt.plot(sig, 'b')
	plt.plot(filt, 'r--')
	plt.show()

if __name__ == ""__main__"":
	main()"
7h3rm_4_1,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,python,T4,Same Language,"from __future__ import print_function
from scipy import signal
import matplotlib.pyplot as plt

def main():
    sig = [-0.917843918645,0.141984778794,1.20536903482,0.190286794412,-0.662370894973,-1.00700480494,
           -0.404707073677,0.800482325044,0.743500089861,1.01090520172,0.741527555207,
           0.277841675195,0.400833448236,-0.2085993586,-0.172842103641,-0.134316096293,
           0.0259303398477,0.490105989562,0.549391221511,0.9047198589]

    a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
    b = [0.16666667, 0.5, 0.5, 0.16666667]

    filt = signal.lfilter(b, a, sig)
    print(filt)

    plt.plot(sig, 'b', label='Original Signal')
    plt.plot(filt, 'r--', label='Filtered Signal')
    plt.legend()
    plt.show()

if __name__ == ""__main__"":
    main()"
7h3rm_4_2,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,go,T4,Different Language,"package main

import ""fmt""

type filter struct {
    b, a []float64
}

func (f filter) filter(in []float64) []float64 {
    out := make([]float64, len(in))
    s := 1. / f.a[0]
    for i := range in {
        tmp := 0.
        b := f.b
        if i+1 < len(b) {
            b = b[:i+1]
        }
        for j, bj := range b {
            tmp += bj * in[i-j]
        }
        a := f.a[1:]
        if i < len(a) {
            a = a[:i]
        }
        for j, aj := range a {
            tmp -= aj * out[i-j-1]
        }
        out[i] = tmp * s
    }
    return out
}"
7h3rm_4_2,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,java,T4,Different Language,"public class DigitalFilter {
    private static double[] filter(double[] a, double[] b, double[] signal) {
        double[] result = new double[signal.length];
        for (int i = 0; i < signal.length; ++i) {
            double tmp = 0.0;
            for (int j = 0; j < b.length; ++j) {
                if (i - j < 0) continue;
                tmp += b[j] * signal[i - j];
            }
            for (int j = 1; j < a.length; ++j) {
                if (i - j < 0) continue;
                tmp -= a[j] * result[i - j];
            }
            tmp /= a[0];
            result[i] = tmp;
        }
        return result;
    }

    public static void main(String[] args) {
        double[] a = new double[]{1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17};
        double[] b = new double[]{0.16666667, 0.5, 0.5, 0.16666667};

        double[] signal = new double[]{
            -0.917843918645, 0.141984778794, 1.20536903482, 0.190286794412,
            -0.662370894973, -1.00700480494, -0.404707073677, 0.800482325044,
            0.743500089861, 1.01090520172, 0.741527555207, 0.277841675195,
            0.400833448236, -0.2085993586, -0.172842103641, -0.134316096293,
            0.0259303398477, 0.490105989562, 0.549391221511, 0.9047198589
        };

        double[] result = filter(a, b, signal);
        for (int i = 0; i < result.length; ++i) {
            System.out.printf(""% .8f"", result[i]);
            System.out.print((i + 1) % 5 != 0 ? "", "" : ""\n"");
        }
    }
}"
7h3rm_4_2,7h3rm,Apply a digital filter (direct form II transposed),Mathematics,Signal Processing,ruby,T4,Different Language,"def filter(a,b,signal)
    result = Array.new(signal.length(), 0.0)
    for i in 0..signal.length()-1 do
        tmp = 0.0
        for j in 0 .. b.length()-1 do
            if i - j < 0 then next end
            tmp += b[j] * signal[i - j]
        end
        for j in 1 .. a.length()-1 do
            if i - j < 0 then next end
            tmp -= a[j] * result[i - j]
        end
        tmp /= a[0]
        result[i] = tmp
    end
    return result
end

def main
    a = [1.00000000, -2.77555756e-16, 3.33333333e-01, -1.85037171e-17]
    b = [0.16666667, 0.5, 0.5, 0.16666667]
    signal = [
        -0.917843918645,  0.141984778794, 1.20536903482,   0.190286794412,
        -0.662370894973, -1.00700480494, -0.404707073677,  0.800482325044,
         0.743500089861,  1.01090520172,  0.741527555207,  0.277841675195,
         0.400833448236, -0.2085993586,  -0.172842103641, -0.134316096293,
         0.0259303398477, 0.490105989562, 0.549391221511,  0.9047198589
    ]

    result = filter(a,b,signal)
    for i in 0 .. result.length() - 1 do
        print  % [result[i]]
        if (i + 1) % 5 == 0 then
            print 
        else
            print 
        end
    end
end

main()"
onb81_1_1,onb81,Approximate equality,Mathematics,Numerical Methods,python,T1,Identical Clone,"math.isclose -> bool
    a: double
    b: double
    *
    rel_tol: double = 1e-09
        maximum difference for being considered , relative to the
        magnitude of the input values
    abs_tol: double = 0.0
        maximum difference for being considered , regardless of the
        magnitude of the input values
Determine whether two floating point numbers are close in value.
Return True if a is close in value to b, and False otherwise.
For the values to be considered close, the difference between them
must be smaller than at least one of the tolerances.
-inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
is, NaN is not close to anything, even itself.  inf and -inf are
only close to themselves."
onb81_1_2,onb81,Approximate equality,Mathematics,Numerical Methods,python,T1,Different Whitespaces,"def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
 if abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol):
  return True
 if a == b:
  return True
 if math.isinf(a) or math.isinf(b):
  return a == b
 return False"
onb81_1_3,onb81,Approximate equality,Mathematics,Numerical Methods,python,T1,Different Comments,"def is_approximately_equal(a, b, rel_tol=1e-09, abs_tol=0.0):
    avg = (abs(a) + abs(b)) / 2
    diff = abs(a - b)
    if diff <= abs_tol:
        return True
    return diff <= rel_tol * avg and diff <= rel_tol * max(abs(a), abs(b))"
onb81_1_4,onb81,Approximate equality,Mathematics,Numerical Methods,python,T1,Different Formatting,"def isclose(a: float, b: float, rel_tol: float = 1e-09, abs_tol: float = 0.0) -> bool:
    if a == b:
        return True
    if math.isinf(a) and math.isinf(b):
        return a == b
    if math.isnan(a) or math.isnan(b):
        return False
    return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)"
onb81_2_1,onb81,Approximate equality,Mathematics,Numerical Methods,python,T2,Different Variable Names,"def similar(a: float, b: float, rel_margin: float = 1e-09, abs_margin: float = 0.0) -> bool:
    if a == b:
        return True
    if math.isinf(a) and math.isinf(b):
        return a == b
    if math.isnan(a) or math.isnan(b):
        return False
    diff = abs(a - b)
    return diff <= max(rel_margin * max(abs(a), abs(b)), abs_margin)"
onb81_2_2,onb81,Approximate equality,Mathematics,Numerical Methods,python,T2,Different Data Types,"def is_close(a: float, b: float, rel_tol: float = 1e-09, abs_tol: float = 0.0) -> bool:
    if a == b:
        return True
    if abs(a - b) <= abs_tol:
        return True
    return abs(a - b) <= rel_tol * max(abs(a), abs(b))"
onb81_2_3,onb81,Approximate equality,Mathematics,Numerical Methods,python,T2,Different Function Names,"bool_isclose -> bool_compare
    a: double
    b: double
    *
    rel_tol: double = 1e-09
    abs_tol: double = 0.0
Determine whether two floating point numbers are close in value.
Return True if a is close in value to b, and False otherwise.
For the values to be considered close, the difference between them
must be smaller than at least one of the tolerances.
-inf, inf and NaN behave similarly to the IEEE 754 Standard.  That
is, NaN is not close to anything, even itself.  inf and -inf are
only close to themselves."
onb81_3_1,onb81,Approximate equality,Mathematics,Numerical Methods,python,T3,Added Statements,"def is_close(a: float, b: float, rel_tol: float = 1e-09, abs_tol: float = 0.0) -> bool:
    if a == b:
        return True
    if math.isnan(a) or math.isnan(b):
        return False
    if math.isinf(a) and math.isinf(b):
        return a == b
    diff = abs(a - b)
    return diff <= max(rel_tol * max(abs(a), abs(b)), abs_tol)"
onb81_3_2,onb81,Approximate equality,Mathematics,Numerical Methods,python,T3,Removed Statements,"def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
    if a == b:
        return True
    if math.isnan(a) or math.isnan(b):
        return False
    if math.isinf(a) or math.isinf(b):
        return a == b
    return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)"
onb81_3_3,onb81,Approximate equality,Mathematics,Numerical Methods,python,T3,Reordered Statements,"def isclose(a: float, b: float, rel_tol: float = 1e-09, abs_tol: float = 0.0) -> bool:
    if a == b:
        return True
    if math.isnan(a) or math.isnan(b):
        return False
    diff = abs(a - b)
    return diff <= max(rel_tol * max(abs(a), abs(b)), abs_tol)"
onb81_3_4,onb81,Approximate equality,Mathematics,Numerical Methods,python,T3,Control Flow Modifications,"def is_close(a, b, rel_tol=1e-09, abs_tol=0.0):
    if a == b:
        return True
    if isinstance(a, float) and isinstance(b, float):
        if a in (float('inf'), float('-inf')) and b in (float('inf'), float('-inf')):
            return a == b
        if any(isinstance(x, float) and x != x for x in (a, b)):
            return False
        diff = abs(a - b)
        return diff <= max(rel_tol * max(abs(a), abs(b)), abs_tol)
    return False"
onb81_4_1,onb81,Approximate equality,Mathematics,Numerical Methods,python,T4,Same Language,"def is_close(a, b, rel_tol=1e-09, abs_tol=0.0):
    if a == b:
        return True
    if a == float('inf') or a == float('-inf'):
        return a == b
    if b == float('inf') or b == float('-inf'):
        return a == b
    return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)"
onb81_4_2,onb81,Approximate equality,Mathematics,Numerical Methods,go,T4,Different Language,"package main

import (
    ""fmt""
    ""log""
    ""math/big""
)

func max(a, b *big.Float) *big.Float {
    if a.Cmp(b) > 0 {
        return a
    }
    return b
}

func isClose(a, b *big.Float) bool {
    relTol := big.NewFloat(1e-9)"
onb81_4_2,onb81,Approximate equality,Mathematics,Numerical Methods,java,T4,Different Language,"public class Approximate {
    private static boolean approxEquals(double value, double other, double epsilon) {
        return Math.abs(value - other) < epsilon;
    }

    private static void test(double a, double b) {
        double epsilon = 1e-18;
        System.out.printf(""%f,%f =>%s\n"", a, b, approxEquals(a, b, epsilon));
    }

    public static void main(String[] args) {
        test(100000000000000.01, 100000000000000.011);
        test(100.01, 100.011);
        test(10000000000000.001 / 10000.0, 1000000000.0000001000);
        test(0.001, 0.0010000001);
        test(0.000000000000000000000101, 0.0);
        test(Math.sqrt(2.0) * Math.sqrt(2.0), 2.0);
        test(-Math.sqrt(2.0) * Math.sqrt(2.0), -2.0);
        test(3.14159265358979323846, 3.14159265358979324);
    }
}"
onb81_4_2,onb81,Approximate equality,Mathematics,Numerical Methods,ruby,T4,Different Language,"require 

testvalues = [[100000000000000.01,           100000000000000.011],
              [100.01,                       100.011],
              [10000000000000.001 / 10000.0, 1000000000.0000001000],
              [0.001,                        0.0010000001],
              [0.000000000000000000000101,   0.0],
              [(2**0.5) * (2**0.5),            2.0],
              [-(2**0.5) * (2**0.5),          -2.0],
              [BigDecimal(),       3.14159265358979324],
              [Float::NAN, Float::NAN,],
              [Float::INFINITY, Float::INFINITY],
               ]

class  Numeric
  def close_to?(num, tol = Float::EPSILON)
    return true  if self == num
    return false if (self.to_f.nan? or num.to_f.nan?)        
    return false if [self, num].count( Float::INFINITY) == 1 
    return false if [self, num].count(-Float::INFINITY) == 1
    (self-num).abs <= tol * ([self.abs, num.abs].max)
  end
end

testvalues.each do |a,b|
  puts 
end"
3jzc_1_1,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T1,Identical Clone,">>> y = str( 5**4**3**2 )
>>> print (% (y[:20], y[-20:], len(y)))
5**4**3**2 = 62060698786608744707...92256259918212890625 and has 183231 digits"
3jzc_1_2,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T1,Different Whitespaces,"y=str(5**4**3**2)
print(%(y[:20],y[-20:],len(y)))"
3jzc_1_3,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T1,Different Comments,"y = str(5**4**3**2)
print(""%s...%s and has %d digits"" % (y[:20], y[-20:], len(y)))"
3jzc_1_4,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T1,Different Formatting,"y = str(5**4**3**2) 
print(% (y[:20], y[-20:], len(y))) 
5**4**3**2 = 62060698786608744707...92256259918212890625 and has 183231 digits "
3jzc_2_1,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T2,Different Variable Names,"```python
result = str( 5**4**3**2 )
print (% (result[:20], result[-20:], len(result)))
```"
3jzc_2_2,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T2,Different Data Types,"y = format(5**4**3**2, 'd')
print(""%s...%s and has %d digits"" % (y[:20], y[-20:], len(y)))"
3jzc_2_3,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T2,Different Function Names,">>> y = str( 5**4**3**2 )
>>> print (% (y[:20], y[-20:], len(y)))"
3jzc_3_1,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T3,Added Statements,"y = str(5 ** (4 ** (3 ** 2)))
print(""5**4**3**2 = {}...{} and has {} digits"".format(y[:20], y[-20:], len(y)))"
3jzc_3_2,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T3,Removed Statements,"y = str(5**4**3**2)
print(y[:20], y[-20:], len(y))"
3jzc_3_3,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T3,Reordered Statements,"y = str(5**4**3**2)
print(""%s...%s and has %d digits"" % (y[:20], y[-20:], len(y)))"
3jzc_3_4,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T3,Control Flow Modifications,"y = str(5**(4**(3**2)))
if len(y) > 20:
    print(""%s...%s and has %d digits"" % (y[:20], y[-20:], len(y)))
else:
    print(""%s and has %d digits"" % (y, len(y)))"
3jzc_4_1,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,python,T4,Same Language,"y = str(5**4**3**2)
output = f""5**4**3**2 = {y[:20]}...{y[-20:]} and has {len(y)} digits""
print(output)"
3jzc_4_2,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,go,T4,Different Language,"package main

import (
	""fmt""
	""math/big""
)

func main() {
	x := big.NewInt(2)
	x = x.Exp(big.NewInt(3), x, nil)
	x = x.Exp(big.NewInt(4), x, nil)
	x = x.Exp(big.NewInt(5), x, nil)
	str := x.String()
	fmt.Printf(""5^(4^(3^2)) has%d digits:%s ...%s\n"",
		len(str),
		str[:20],
		str[len(str)-20:],
	)
}"
3jzc_4_2,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,java,T4,Different Language,"import java.math.BigInteger;

class IntegerPower {
    public static void main(String[] args) {
        BigInteger power = BigInteger.valueOf(5).pow(BigInteger.valueOf(4).pow(BigInteger.valueOf(3).pow(2).intValueExact()).intValueExact());
        String str = power.toString();
        int len = str.length();
        System.out.printf(""5**4**3**2 =%s...%s and has%d digits%n"",
                str.substring(0, 20), str.substring(len - 20), len);
    }
}"
3jzc_4_2,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,javascript,T4,Different Language,">>> const y = (5n**4n**3n**2n).toString();
>>> console.log(`5**4**3**2 = ${y.slice(0,20)}...${y.slice(-20)} and has ${y.length} digits`);
5**4**3**2 = 62060698786608744707...92256259918212890625 and has 183231 digits"
3jzc_4_2,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,php,T4,Different Language,"<?php
$y = bcpow('5', bcpow('4', bcpow('3', '2')));
printf(, substr($y,0,20), substr($y,-20), strlen($y));
?>"
3jzc_4_2,3jzc,Arbitrary-precision integers (included),Mathematics,Arithmetic,ruby,T4,Different Language,"y = ( 5**4**3**2 ).to_s
puts"
o781_1_1,o781,Archimedean spiral,Mathematics,Geometry,python,T1,Identical Clone,"from turtle import *
from math import *
color()
down()
for i in range(200):
    t = i / 20 * pi
    x = (1 + 5 * t) * cos(t)
    y = (1 + 5 * t) * sin(t)
    goto(x, y)
up()
done()"
o781_1_2,o781,Archimedean spiral,Mathematics,Geometry,python,T1,Different Whitespaces,"from turtle import *from math import *color()down()for i in range(200): t = i / 20 * pi x = (1 + 5 * t) * cos(t) y = (1 + 5 * t) * sin(t) goto(x, y)up()done()"
o781_1_3,o781,Archimedean spiral,Mathematics,Geometry,python,T1,Different Comments,"from turtle import *
from math import *
color()
down()
for i in range(200):
    t = i / 20 * pi
    x = (1 + 5 * t) * cos(t)
    y = (1 + 5 * t) * sin(t)
    goto(x, y)
up()
done()"
o781_1_4,o781,Archimedean spiral,Mathematics,Geometry,python,T1,Different Formatting,"from turtle import * 
from math import * 
color() 
down() 
for i in range(200): 
    t = i / 20 * pi 
    x = (1 + 5 * t) * cos(t) 
    y = (1 + 5 * t) * sin(t) 
    goto(x, y) 
up() 
done()"
o781_2_1,o781,Archimedean spiral,Mathematics,Geometry,python,T2,Different Variable Names,"from turtle import *
from math import *
color()
down()
for j in range(200):
    angle = j / 20 * pi
    pos_x = (1 + 5 * angle) * cos(angle)
    pos_y = (1 + 5 * angle) * sin(angle)
    goto(pos_x, pos_y)
up()
done()"
o781_2_2,o781,Archimedean spiral,Mathematics,Geometry,python,T2,Different Data Types,"from turtle import *
from math import *
color()
down()
for i in range(200):
    t = float(i) / 20 * pi
    x = (1 + 5 * t) * cos(t)
    y = (1 + 5 * t) * sin(t)
    goto(x, y)
up()
done()"
o781_2_3,o781,Archimedean spiral,Mathematics,Geometry,python,T2,Different Function Names,"from turtle import *
from math import *
initialize()
lower()
for i in range(200):
    angle = i / 20 * pi
    x_coord = (1 + 5 * angle) * cos(angle)
    y_coord = (1 + 5 * angle) * sin(angle)
    goto(x_coord, y_coord)
elevate()
finish()"
o781_3_1,o781,Archimedean spiral,Mathematics,Geometry,python,T3,Added Statements,"from turtle import *
from math import *
begin_fill()
pendown()
for i in range(200):
    theta = i / 20 * pi
    x_coord = (1 + 5 * theta) * cos(theta)
    y_coord = (1 + 5 * theta) * sin(theta)
    goto(x_coord, y_coord)
penup()
end_fill()
done()"
o781_3_2,o781,Archimedean spiral,Mathematics,Geometry,python,T3,Removed Statements,"from turtle import *
from math import pi, cos, sin
for i in range(200):
    t = i / 20 * pi
    goto((1 + 5 * t) * cos(t), (1 + 5 * t) * sin(t))
done()"
o781_3_3,o781,Archimedean spiral,Mathematics,Geometry,python,T3,Reordered Statements,"from turtle import *
from math import *
up()
color()
down()
for i in range(200):
    t = i / 20 * pi
    x = (1 + 5 * t) * cos(t)
    y = (1 + 5 * t) * sin(t)
    goto(x, y)
done()"
o781_3_4,o781,Archimedean spiral,Mathematics,Geometry,python,T3,Control Flow Modifications,"from turtle import *
from math import *
color()
down()
i = 0
while i < 200:
    t = i / 20 * pi
    x = (1 + 5 * t) * cos(t)
    y = (1 + 5 * t) * sin(t)
    goto(x, y)
    i += 1
up()
done()"
o781_4_1,o781,Archimedean spiral,Mathematics,Geometry,python,T4,Same Language,"from turtle import *
from math import pi, cos, sin

def draw_spiral():
    down()
    for i in range(200):
        t = i / 20 * pi
        x = (1 + 5 * t) * cos(t)
        y = (1 + 5 * t) * sin(t)
        goto(x, y)
    up()

color()
draw_spiral()
done()"
o781_4_2,o781,Archimedean spiral,Mathematics,Geometry,go,T4,Different Language,"package main

import (
	""image""
	""image/color""
	""image/draw""
	""image/png""
	""log""
	""math""
	""os""
)

func main() {
	const (
		width, height = 600, 600
		centre        = width / 2.0
		degreesIncr   = 0.1 * math.Pi / 180
		turns         = 2
		stop          = 360 * turns * 10 * degreesIncr
		fileName      = ""spiral.png""
	)

	img := image.NewNRGBA(image.Rect(0, 0, width, height))"
o781_4_2,o781,Archimedean spiral,Mathematics,Geometry,java,T4,Different Language,"import java.awt.*;
import static java.lang.Math.*;
import javax.swing.*;

public class ArchimedeanSpiral extends JPanel {

    public ArchimedeanSpiral() {
        setPreferredSize(new Dimension(640, 640));
        setBackground(Color.white);
    }

    void drawGrid(Graphics2D g) {
        g.setColor(new Color(0xEEEEEE));
        g.setStroke(new BasicStroke(2));

        double angle = toRadians(45);

        int w = getWidth();
        int center = w / 2;
        int margin = 10;
        int numRings = 8;

        int spacing = (w - 2 * margin) / (numRings * 2);

        for (int i = 0; i < numRings; i++) {
            int pos = margin + i * spacing;
            int size = w - (2 * margin + i * 2 * spacing);
            g.drawOval(pos, pos, size, size);

            double ia = i * angle;
            int x2 = center + (int) (cos(ia) * (w - 2 * margin) / 2);
            int y2 = center - (int) (sin(ia) * (w - 2 * margin) / 2);

            g.drawLine(center, center, x2, y2);
        }
    }

    void drawSpiral(Graphics2D g) {
        g.setStroke(new BasicStroke(2));
        g.setColor(Color.orange);

        double degrees = toRadians(0.1);
        double center = getWidth() / 2;
        double end = 360 * 2 * 10 * degrees;
        double a = 0;
        double b = 20;
        double c = 1;

        for (double theta = 0; theta < end; theta += degrees) {
            double r = a + b * pow(theta, 1 / c);
            double x = r * cos(theta);
            double y = r * sin(theta);
            plot(g, (int) (center + x), (int) (center - y));
        }
    }

    void plot(Graphics2D g, int x, int y) {
        g.drawOval(x, y, 1, 1);
    }

    @Override
    public void paintComponent(Graphics gg) {
        super.paintComponent(gg);
        Graphics2D g = (Graphics2D) gg;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        drawGrid(g);
        drawSpiral(g);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame f = new JFrame();
            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            f.setTitle(""Archimedean Spiral"");
            f.setResizable(false);
            f.add(new ArchimedeanSpiral(), BorderLayout.CENTER);
            f.pack();
            f.setLocationRelativeTo(null);
            f.setVisible(true);
        });
    }
}"
o781_4_2,o781,Archimedean spiral,Mathematics,Geometry,javascript,T4,Different Language,"<!-- ArchiSpiral.html -->
<html>
<head><title>Archimedean spiral</title></head>
<body onload=""pAS(35,'navy');"">
<h3>Archimedean spiral</h3> <p id=bo></p>
<canvas id=""canvId"" width=""640"" height=""640"" style=""border: 2px outset;""></canvas>
<script>"
o781_4_2,o781,Archimedean spiral,Mathematics,Geometry,ruby,T4,Different Language,"INCR = 0.1
attr_reader :x, :theta

def setup
  sketch_title 'Archimedian Spiral'
  @theta = 0
  @x = 0
  background(255)
  translate(width / 2.0, height / 2.0)
  begin_shape
  (0..50*PI).step(INCR) do |theta|
    @x = theta * cos(theta / PI)
    curve_vertex(x, theta * sin(theta / PI))
  end
  end_shape
end

def settings
  size(300, 300)
end"
