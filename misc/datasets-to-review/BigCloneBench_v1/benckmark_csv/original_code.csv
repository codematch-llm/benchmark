"index","label","domain_label","source","test"
"6096495","Secure Hash","java","BigCloneBench","public String getMD5 (String password) throws NoSuchAlgorithmException {
    MessageDigest md = MessageDigest.getInstance (""MD5"");
    md.update (password.getBytes ());
    byte byteData [] = md.digest ();
    StringBuffer sb = new StringBuffer ();
    for (int i = 0;
    i < byteData.length; i ++) {
        sb.append (Integer.toString ((byteData [i] & 0xff) + 0x100, 16).substring (1));
    }
    return sb.toString ();
}
"
"23677111","Download From Web","java","BigCloneBench","public static String downloadWebpage1 (String address) throws MalformedURLException, IOException {
    URL url = new URL (address);
    BufferedReader br = new BufferedReader (new InputStreamReader (url.openStream ()));
    String line;
    String page = """";
    while ((line = br.readLine ()) != null) {
        page += line + ""\n"";
    }
    br.close ();
    return page;
}
"
"23677112","Download From Web","java","BigCloneBench","public static String downloadWebpage2 (String address) throws MalformedURLException, IOException {
    URL url = new URL (address);
    HttpURLConnection conn = (HttpURLConnection) url.openConnection ();
    HttpURLConnection.setFollowRedirects (true);
    String encoding = conn.getContentEncoding ();
    InputStream is = null;
    if (encoding != null && encoding.equalsIgnoreCase (""gzip"")) {
        is = new GZIPInputStream (conn.getInputStream ());
    } else if (encoding != null && encoding.equalsIgnoreCase (""deflate"")) {
        is = new InflaterInputStream (conn.getInputStream ());
    } else {
        is = conn.getInputStream ();
    }

    BufferedReader br = new BufferedReader (new InputStreamReader (is));
    String line;
    String page = """";
    while ((line = br.readLine ()) != null) {
        page += line + ""\n"";
    }
    br.close ();
    return page;
}
"
"23677114","Copy File","java","BigCloneBench","public static void copyFile1 (File srcFile, File destFile) throws IOException {
    if (! destFile.exists ()) {
        destFile.createNewFile ();
    }
    FileInputStream fis = new FileInputStream (srcFile);
    FileOutputStream fos = new FileOutputStream (destFile);
    FileChannel source = fis.getChannel ();
    FileChannel destination = fos.getChannel ();
    destination.transferFrom (source, 0, source.size ());
    source.close ();
    destination.close ();
    fis.close ();
    fos.close ();
}
"
"23677115","Copy File","java","BigCloneBench","public static void copyFile2 (File srcFile, File destFile) throws IOException {
    FileUtils.copyFile (srcFile, destFile);
}
"
"23677116","Copy File","java","BigCloneBench","public static void copyFile3 (File srcFile, File destFile) throws IOException {
    InputStream in = new FileInputStream (srcFile);
    OutputStream out = new FileOutputStream (destFile);
    byte [] buf = new byte [1024];
    int len;
    while ((len = in.read (buf)) > 0) {
        out.write (buf, 0, len);
    }
    in.close ();
    out.close ();
}
"
"23677117","Copy File","java","BigCloneBench","public static void copyFile4 (File srcFile, File destFile) throws IOException {
    InputStream in = new FileInputStream (srcFile);
    OutputStream out = new FileOutputStream (destFile);
    IOUtils.copy (in, out);
    in.close ();
    out.close ();
}
"
"23677118","Copy File","java","BigCloneBench","public static void copyFile5 (File srcFile, File destFile) throws IOException {
    InputStream in = new FileInputStream (srcFile);
    OutputStream out = new FileOutputStream (destFile);
    IOUtils.copyLarge (in, out);
    in.close ();
    out.close ();
}
"
"23677120","Decompress zip archive.","java","BigCloneBench","public static void unzip1 (File zipfile, File outputdir) throws IOException {
    byte [] buffer = new byte [1024];
    if (! outputdir.exists ()) {
        outputdir.mkdirs ();
    }
    ArchiveInputStream zis = new ZipArchiveInputStream (new FileInputStream (zipfile));
    ArchiveEntry ae = zis.getNextEntry ();
    while (ae != null) {
        File newFile = new File (outputdir + File.separator + ae.getName ());
        if (! newFile.getParentFile ().exists ()) newFile.getParentFile ().mkdirs ();

        if (ae.isDirectory ()) {
            if (! newFile.exists ()) newFile.mkdir ();

        } else {
            FileOutputStream fos = new FileOutputStream (newFile);
            int len;
            while ((len = zis.read (buffer)) > 0) {
                fos.write (buffer, 0, len);
            }
            fos.close ();
        }
        ae = zis.getNextEntry ();
    }
    zis.close ();
}
"
"23677122","Connect to FTP Server","java","BigCloneBench","public FTPClient sample1a (String server, int port, String username, String password) throws SocketException, IOException {
    FTPClient ftpClient = new FTPClient ();
    ftpClient.connect (server, port);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677123","Connect to FTP Server","java","BigCloneBench","public FTPClient sample1b (String server, String username, String password) throws SocketException, IOException {
    FTPClient ftpClient = new FTPClient ();
    ftpClient.connect (server);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677124","Connect to FTP Server","java","BigCloneBench","public FTPClient sample1c (String server, int port, String username, String password) throws SocketException, IOException {
    FTPClient ftpClient = new FTPClient ();
    ftpClient.setDefaultPort (port);
    ftpClient.connect (server);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677125","Connect to FTP Server","java","BigCloneBench","public FTPClient sample2a (String server, int port, String username, String password) throws SocketException, IOException {
    FTPSClient ftpClient = new FTPSClient ();
    ftpClient.connect (server, port);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677126","Connect to FTP Server","java","BigCloneBench","public FTPClient sample2b (String server, String username, String password) throws SocketException, IOException {
    FTPSClient ftpClient = new FTPSClient ();
    ftpClient.connect (server);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677127","Connect to FTP Server","java","BigCloneBench","public FTPClient sample2c (String server, int port, String username, String password) throws SocketException, IOException {
    FTPSClient ftpClient = new FTPSClient ();
    ftpClient.setDefaultPort (port);
    ftpClient.connect (server);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677128","Connect to FTP Server","java","BigCloneBench","public FTPClient sample3a (String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
    FTPHTTPClient ftpClient = new FTPHTTPClient (proxyserver, proxyport);
    ftpClient.connect (ftpserver, ftpport);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677129","Connect to FTP Server","java","BigCloneBench","public FTPClient sample3b (String ftpserver, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
    FTPHTTPClient ftpClient = new FTPHTTPClient (proxyserver, proxyport);
    ftpClient.connect (ftpserver);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677130","Connect to FTP Server","java","BigCloneBench","public FTPClient sample3c (String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {
    FTPHTTPClient ftpClient = new FTPHTTPClient (proxyserver, proxyport);
    ftpClient.setDefaultPort (ftpport);
    ftpClient.connect (ftpserver);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677131","Connect to FTP Server","java","BigCloneBench","public FTPClient sample1 (String server, int port, String username, String password) throws IllegalStateException, IOException, FTPIllegalReplyException, FTPException {
    FTPClient ftpClient = new FTPClient ();
    ftpClient.connect (server, port);
    ftpClient.login (username, password);
    return ftpClient;
}
"
"23677133","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortInt1 (int [] num) {
    boolean flag = true;
    int temp;
    while (flag) {
        flag = false;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                flag = true;
            }
        }
    }
}
"
"23677134","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortInt2 (int [] num) {
    int last_exchange;
    int right_border = num.length - 1;
    do {
        last_exchange = 0;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                int temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                last_exchange = j;
            }
        }
        right_border = last_exchange;
    } while (right_border > 0);
}
"
"23677135","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortFloat1 (float [] num) {
    boolean flag = true;
    float temp;
    while (flag) {
        flag = false;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                flag = true;
            }
        }
    }
}
"
"23677136","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortFloat2 (float [] num) {
    int last_exchange;
    int right_border = num.length - 1;
    do {
        last_exchange = 0;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                float temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                last_exchange = j;
            }
        }
        right_border = last_exchange;
    } while (right_border > 0);
}
"
"23677137","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortDouble1 (double [] num) {
    boolean flag = true;
    double temp;
    while (flag) {
        flag = false;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                flag = true;
            }
        }
    }
}
"
"23677138","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortDouble2 (double [] num) {
    int last_exchange;
    int right_border = num.length - 1;
    do {
        last_exchange = 0;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                double temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                last_exchange = j;
            }
        }
        right_border = last_exchange;
    } while (right_border > 0);
}
"
"23677139","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortLong1 (long [] num) {
    boolean flag = true;
    long temp;
    while (flag) {
        flag = false;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                flag = true;
            }
        }
    }
}
"
"23677140","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortLong2 (long [] num) {
    int last_exchange;
    int right_border = num.length - 1;
    do {
        last_exchange = 0;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                long temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                last_exchange = j;
            }
        }
        right_border = last_exchange;
    } while (right_border > 0);
}
"
"23677141","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortShort1 (short [] num) {
    boolean flag = true;
    short temp;
    while (flag) {
        flag = false;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                flag = true;
            }
        }
    }
}
"
"23677142","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortShort2 (short [] num) {
    int last_exchange;
    int right_border = num.length - 1;
    do {
        last_exchange = 0;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                short temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                last_exchange = j;
            }
        }
        right_border = last_exchange;
    } while (right_border > 0);
}
"
"23677143","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortByte1 (byte [] num) {
    boolean flag = true;
    byte temp;
    while (flag) {
        flag = false;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                flag = true;
            }
        }
    }
}
"
"23677144","Bubble Sort Array","java","BigCloneBench","public static void BubbleSortByte2 (byte [] num) {
    int last_exchange;
    int right_border = num.length - 1;
    do {
        last_exchange = 0;
        for (int j = 0;
        j < num.length - 1; j ++) {
            if (num [j] > num [j + 1]) {
                byte temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                last_exchange = j;
            }
        }
        right_border = last_exchange;
    } while (right_border > 0);
}
"
"23677145","Bubble Sort Array","java","BigCloneBench","public static < T extends Comparable < T > > void BubbleSortComparable1 (T [] num) {
    int j;
    boolean flag = true;
    T temp;
    while (flag) {
        flag = false;
        for (j = 0; j < num.length - 1; j ++) {
            if (num [j].compareTo (num [j + 1]) > 0) {
                temp = num [j];
                num [j] = num [j + 1];
                num [j + 1] = temp;
                flag = true;
            }
        }
    }
}
"
"23677147","Execute update and rollback.","java","BigCloneBench","public static void Sample1 (String myField, String condition1, String condition2) throws SQLException {
    Connection connection = DriverManager.getConnection (""jdbc:postgresql://localhost/test"", ""user"", ""password"");
    connection.setAutoCommit (false);
    PreparedStatement ps = connection.prepareStatement (""UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?"");
    ps.setString (1, myField);
    ps.setString (2, condition1);
    ps.setString (3, condition2);
    int numChanged = ps.executeUpdate ();
    if (numChanged > 10) {
        connection.rollback ();
    } else {
        connection.commit ();
    }
    ps.close ();
    connection.close ();
}
"
"23677152","Get Prime Factors","java","BigCloneBench","public static List < Integer > primeFactors1 (int number) {
    int n = number;
    List < Integer > factors = new ArrayList < Integer > ();
    for (int i = 2;
    i <= n; i ++) {
        while (n % i == 0) {
            factors.add (i);
            n /= i;
        }
    }
    return factors;
}
"
"23677155","Shuffle Array in Place","java","BigCloneBench","public static void shuffle1 (int [] a) {
    int length = a.length;
    Random random = new Random ();
    random.nextInt ();
    for (int i = 0;
    i < length; i ++) {
        int j = i + random.nextInt (length - i);
        int tmp = a [i];
        a [i] = a [j];
        a [j] = tmp;
    }
}
"
"23677156","Shuffle Array in Place","java","BigCloneBench","public static void shuffle2 (int [] a) {
    Random random = new Random ();
    random.nextInt ();
    for (int i = a.length - 1;
    i >= 1; i --) {
        int j = random.nextInt (i + 1);
        int tmp = a [i];
        a [i] = a [j];
        a [j] = tmp;
    }
}
"
"23677158","Binary Search","java","BigCloneBench","public static int binarySearch1 (int arr [], int key, int imin, int imax) {
    if (imax < imin) return - 1;

    int imid = (imin + imax) / 2;
    if (arr [imid] > key) return binarySearch1 (arr, key, imin, imid - 1);
    else if (arr [imid] < key) return binarySearch1 (arr, key, imid + 1, imax);
    else return imid;

}
"
"23677159","Binary Search","java","BigCloneBench","public static < T extends Comparable < T > > int binarySearch3 (T [] arr, T key, int imin, int imax) {
    if (imax < imin) return - 1;

    int imid = (imin + imax) / 2;
    if (arr [imid].compareTo (key) > 0) return binarySearch3 (arr, key, imin, imid - 1);
    else if (arr [imid].compareTo (key) < 0) return binarySearch3 (arr, key, imid + 1, imax);
    else return imid;

}
"
"23677160","Binary Search","java","BigCloneBench","public static int binarySearch2 (int arr [], int key) {
    int imin = 0;
    int imax = arr.length - 1;
    while (imin <= imax) {
        int imid = imin + (imax - imin) / 2;
        if (key < arr [imid]) imax = imid - 1;
        else if (key > arr [imid]) imin = imid + 1;
        else return imid;

    }
    return - 1;
}
"
"23677162","Load Custom Font","java","BigCloneBench","public static void loadFont1 (URL url) throws FontFormatException, IOException {
    InputStream stream = url.openStream ();
    Font font = Font.createFont (Font.TRUETYPE_FONT, stream);
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment ();
    ge.registerFont (font);
}
"
"23677163","Load Custom Font","java","BigCloneBench","public static void loadFont2 (File file) throws FontFormatException, IOException {
    FileInputStream stream = new FileInputStream (file);
    Font font = Font.createFont (Font.TYPE1_FONT, stream);
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment ();
    ge.registerFont (font);
}
"
"23677166","Create Encryption Key Files","java","BigCloneBench","public static void main (String args []) throws NoSuchAlgorithmException, IOException {
    System.out.println (generateKeys1 ());
}
"
"23677167","Create Encryption Key Files","java","BigCloneBench","public static KeyPair generateKeys1 () throws NoSuchAlgorithmException, IOException {
    KeyPairGenerator keyGen = KeyPairGenerator.getInstance (""RSA"");
    KeyPair keyPair = keyGen.generateKeyPair ();
    return keyPair;
}
"
"23677170","Play Sound","java","BigCloneBench","public static void playSound1 (File file) throws LineUnavailableException, UnsupportedAudioFileException, IOException {
    Clip clip = AudioSystem.getClip ();
    AudioInputStream inputStream = AudioSystem.getAudioInputStream (file);
    clip.open (inputStream);
    clip.start ();
}
"
"23677171","Play Sound","java","BigCloneBench","public static void playSound2 (File file) throws UnsupportedAudioFileException, IOException, LineUnavailableException {
    AudioInputStream inputStream = AudioSystem.getAudioInputStream (file);
    AudioFormat audioFormat = inputStream.getFormat ();
    DataLine.Info info = new DataLine.Info (SourceDataLine.class, audioFormat);
    SourceDataLine sourceLine = (SourceDataLine) AudioSystem.getLine (info);
    sourceLine.open (audioFormat);
    sourceLine.start ();
    int nbytes = 0;
    byte [] data = new byte [1024];
    while (nbytes != - 1) {
        nbytes = inputStream.read (data, 0, data.length);
        sourceLine.write (data, 0, data.length);
    }
    sourceLine.drain ();
    sourceLine.close ();
}
"
"23677183","GCD","java","BigCloneBench","public static int gcd1 (int a, int b) {
    while (b != 0) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}
"
"23677184","GCD","java","BigCloneBench","public static int gcd2 (int a, int b) {
    while (a != b) {
        if (a > b) a = a - b;
        else b = b - a;

    }
    return a;
}
"
"23677186","Call Method Using Reflection","java","BigCloneBench","public static Object callMethod1 (Object object, String methodName, Object args []) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
    Class < ? > myClass = object.getClass ();
    Class < ? > [] ptypes = new Class [args.length];
    for (int i = 0;
    i < args.length; i ++) {
        ptypes [i] = args [i].getClass ();
    }
    Method method = myClass.getMethod (methodName, ptypes);
    Object returnVal = method.invoke (object, args);
    return returnVal;
}
"
"23677187","Call Method Using Reflection","java","BigCloneBench","public static Object callMethod2 (Object object, String methodName, Object params [], Class [] types) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
    Class < ? > myClass = object.getClass ();
    Method method = myClass.getMethod (methodName, types);
    Object returnVal = method.invoke (object, params);
    return returnVal;
}
"
"23677188","Call Method Using Reflection","java","BigCloneBench","public static Object callMethod3 (Object object, String methodName, Object params [], Class [] types) throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
    Method method = null;
    Class < ? > myClass = object.getClass ();
    NoSuchMethodException ex = null;
    while (method == null && myClass != null) {
        try {
            method = myClass.getDeclaredMethod (methodName, types);
        } catch (NoSuchMethodException e) {
            ex = e;
            myClass = myClass.getSuperclass ();
        }
    }
    if (method == null) throw ex;

    Object returnVal = method.invoke (object, params);
    return returnVal;
}
"
"23677190","Parse XML to DOM","java","BigCloneBench","public static Document parse (File xmlFile) throws ParserConfigurationException, SAXException, IOException {
    DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance ();
    docFactory.setValidating (false);
    docFactory.setNamespaceAware (true);
    docFactory.setExpandEntityReferences (false);
    DocumentBuilder parser = docFactory.newDocumentBuilder ();
    Document document = parser.parse (xmlFile);
    return document;
}
"
"23677195","File Dialog","java","BigCloneBench","public static File chooseFileOpen (JFrame frame) {
    File retval;
    JFileChooser fc = new JFileChooser ();
    fc.setDialogTitle (""Select input file."");
    fc.setFileSelectionMode (JFileChooser.FILES_ONLY);
    fc.setMultiSelectionEnabled (false);
    int status = fc.showOpenDialog (frame);
    if (status == JFileChooser.APPROVE_OPTION) {
        retval = fc.getSelectedFile ();
    } else if (status == JFileChooser.CANCEL_OPTION) {
        retval = null;
    } else {
        retval = null;
    }

    fc.setEnabled (false);
    fc.setVisible (false);
    return retval;
}
"
"23677196","File Dialog","java","BigCloneBench","public static File chooseFileSave (JFrame frame) {
    File retval;
    JFileChooser fc = new JFileChooser ();
    fc.setDialogTitle (""Select input file."");
    fc.setFileSelectionMode (JFileChooser.FILES_ONLY);
    fc.setMultiSelectionEnabled (false);
    int status = fc.showSaveDialog (frame);
    if (status == JFileChooser.APPROVE_OPTION) {
        retval = fc.getSelectedFile ();
    } else if (status == JFileChooser.CANCEL_OPTION) {
        retval = null;
    } else {
        retval = null;
    }

    fc.setEnabled (false);
    fc.setVisible (false);
    return retval;
}
"
"23677197","File Dialog","java","BigCloneBench","public static File [] chooseFileOpenMultiple (JFrame frame) {
    File retval [];
    JFileChooser fc = new JFileChooser ();
    fc.setDialogTitle (""Select input file."");
    fc.setFileSelectionMode (JFileChooser.FILES_ONLY);
    fc.setMultiSelectionEnabled (true);
    int status = fc.showSaveDialog (frame);
    if (status == JFileChooser.APPROVE_OPTION) {
        retval = fc.getSelectedFiles ();
    } else if (status == JFileChooser.CANCEL_OPTION) {
        retval = null;
    } else {
        retval = null;
    }

    fc.setEnabled (false);
    fc.setVisible (false);
    return retval;
}
"
"23677204","Execute External Process","java","BigCloneBench","public static void execute1 () throws IOException, InterruptedException {
    ProcessBuilder pb = new ProcessBuilder (""myCommand"", ""myArg1"", ""myArg2"");
    Map < String, String > env = pb.environment ();
    env.put (""VAR1"", ""myValue"");
    env.remove (""OTHERVAR"");
    env.put (""VAR2"", env.get (""VAR1"") + ""suffix"");
    pb.directory (new File (""myDir""));
    File log = new File (""log"");
    pb.redirectErrorStream (true);
    pb.redirectOutput (Redirect.appendTo (log));
    Process p = pb.start ();
    p.waitFor ();
    p.destroy ();
}
"
"23677207","Connect to Database","java","BigCloneBench","public static Connection getConnection1 (String serverName, int port, String database, String driver, String username, String password) throws SQLException {
    Connection conn = null;
    Properties props = new Properties ();
    props.put (""user"", username);
    props.put (""password"", password);
    String url = ""jdbc:"" + driver + ""://"" + serverName + "":"" + port + ""/"" + database;
    conn = DriverManager.getConnection (url, props);
    return conn;
}
"
"23677210","Get MAC Address String","java","BigCloneBench","public static String getMyMacAddress1 () throws SocketException, UnknownHostException {
    InetAddress ip = InetAddress.getByName (""192.168.0.12"");
    System.out.println (ip.getHostAddress ());
    NetworkInterface network = NetworkInterface.getByInetAddress (ip);
    byte [] mac = network.getHardwareAddress ();
    String macStr = """";
    for (int i = 0;
    i < mac.length; i ++) {
        int a = mac [i] & 0xFF;
        if (a > 15) macStr += Integer.toHexString (a);
        else macStr += ""0"" + Integer.toHexString (a);

        if (i < (mac.length - 1)) {
            macStr += ""-"";
        }
    }
    return macStr;
}
"
"23677214","Delete Folder and Contents","java","BigCloneBench","public static void deleteRecursively1 (File file) {
    if (file.isDirectory ()) {
        for (File f : file.listFiles ()) deleteRecursively1 (f);

    }
    file.delete ();
}
"
"23677222","Copy Directory","java","BigCloneBench","public static void copyDirectory1 (Path src, Path dest) throws IOException {
    Files.copy (src, dest);
    if (Files.isDirectory (src)) {
        for (String filename : src.toFile ().list ()) {
            Path srcFile = src.resolve (filename);
            Path destFile = dest.resolve (filename);
            copyDirectory1 (srcFile, destFile);
        }
    }
}
"
