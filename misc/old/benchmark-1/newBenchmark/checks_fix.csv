index,insperation_index_db,domain_label,label,code,Source,Description
4c5k_1,4c5k,python,Array length,">>> print(len(['apple', 'orange']))
2
>>>",rosetta.csv,Exact copy of the original code
4c5k_2,4c5k,python,Array length,">>> print(len(['fruit', 'citrus']))
2
>>>",GPT,Same code with different variable names
4c5k_3,4c5k,python,Array length,">>> fruits = ['apple', 'orange']
>>> print(fruits.__len__())
2
>>>",GPT,Code that does the same task but in a different way
4c5k_4,4c5k,go,Array length,"package main

import ""fmt""

func main() {
	arr := [...]string{""apple"", ""orange"", ""pear""}

	fmt.Printf(""Length of%v is%v.\n"", arr, len(arr))
}",rosetta.csv,Code that achieves the same task but in a different language
qknx8_1,qknx8,javascript,Sorting algorithms/Counting sort,"var countSort = function(arr, min, max) {
    var i, z = 0, count = [];

    for (i = min; i <= max; i++) {
        count[i] = 0;
    }

    for (i=0; i < arr.length; i++) {
        count[arr[i]]++;
    }

    for (i = min; i <= max; i++) {
        while (count[i]-- > 0) {
            arr[z++] = i;
        }
    }

}",rosetta.csv,Exact copy of the original code
qknx8_2,qknx8,javascript,Sorting algorithms/Counting sort,"var countSort = function(arr, min, max) {
    var i, z = 0, count = [];

    for (i = min; i <= max; i++) {
        count[i] = 0;
    }

    for (i=0; i < arr.length; i++) {
        count[arr[i]]++;
    }

    for (i = min; i <= max; i++) {
        while (count[i]-- > 0) {
            arr[z++] = i;
        }
    }

}",GPT,Same code with different variable names
qknx8_3,qknx8,javascript,Sorting algorithms/Counting sort,"a <- c('apple','orange')
length(fruit)",GPT,Code that does the same task but in a different way
qknx8_4,qknx8,python,Sorting algorithms/Counting sort,">>> from collections import defaultdict
>>> def countingSort(array, mn, mx):
	count = defaultdict(int)
	for i in array:
		count[i] += 1
	result = []
	for j in range(mn,mx+1):
		result += [j]* count[j]
	return result

>>> data = [9, 7, 10, 2, 9, 7, 4, 3, 10, 2, 7, 10, 2, 1, 3, 8, 7, 3, 9, 5, 8, 5, 1, 6, 3, 7, 5, 4, 6, 9, 9, 6, 6, 10, 2, 4, 5, 2, 8, 2, 2, 5, 2, 9, 3, 3, 5, 7, 8, 4]
>>> mini,maxi = 1,10
>>> countingSort(data, mini, maxi) == sorted(data)
True",rosetta.csv,Code that achieves the same task but in a different language
z04tq_1,z04tq,java,Sorting algorithms/Heapsort,"public static void heapSort(int[] a){
	int count = a.length;",rosetta.csv,Exact copy of the original code
z04tq_2,z04tq,java,Sorting algorithms/Heapsort,"public static void heapSort(int[] a){
	int count = a.length;",GPT,Same code with different variable names
z04tq_3,z04tq,java,Sorting algorithms/Heapsort,"public static void heapSort(int[] a){
	int count = a.length;",GPT,Code that does the same task but in a different way
z04tq_4,z04tq,javascript,Sorting algorithms/Heapsort,"function heapSort(arr) {
    heapify(arr)
    end = arr.length - 1
    while (end > 0) {
        [arr[end], arr[0]] = [arr[0], arr[end]]
        end--
        siftDown(arr, 0, end)
    }
}

function heapify(arr) {
    start = Math.floor(arr.length/2) - 1

    while (start >= 0) {
        siftDown(arr, start, arr.length - 1)
        start--
    }
}

function siftDown(arr, startPos, endPos) {
    let rootPos = startPos

    while (rootPos * 2 + 1 <= endPos) {
        childPos = rootPos * 2 + 1
        if (childPos + 1 <= endPos && arr[childPos] < arr[childPos + 1]) {
            childPos++
        }
        if (arr[rootPos] < arr[childPos]) {
            [arr[rootPos], arr[childPos]] = [arr[childPos], arr[rootPos]]
            rootPos = childPos
        } else {
            return
        }
    }
}
test('rosettacode', () => {
    arr = [12, 11, 15, 10, 9, 1, 2, 3, 13, 14, 4, 5, 6, 7, 8,]
    heapSort(arr)
    expect(arr).toStrictEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
})",rosetta.csv,Code that achieves the same task but in a different language
l0cw_1,l0cw,go,Archimedean spiral,"package main

import (
	""image""
	""image/color""
	""image/draw""
	""image/png""
	""log""
	""math""
	""os""
)

func main() {
	const (
		width, height = 600, 600
		centre        = width / 2.0
		degreesIncr   = 0.1 * math.Pi / 180
		turns         = 2
		stop          = 360 * turns * 10 * degreesIncr
		fileName      = ""spiral.png""
	)

	img := image.NewNRGBA(image.Rect(0, 0, width, height))",rosetta.csv,Exact copy of the original code
l0cw_2,l0cw,go,Archimedean spiral,"package main

import (
	""image""
	""image/color""
	""image/draw""
	""image/png""
	""log""
	""math""
	""os""
)

func main() {
	const (
		imgWidth, imgHeight = 600, 600
		centerPoint         = imgWidth / 2.0
		angleIncrement      = 0.1 * math.Pi / 180
		rotations           = 2
		maxAngle            = 360 * rotations * 10 * angleIncrement
		outputFile          = ""generated_spiral.png""
	)

	img := image.NewNRGBA(image.Rect(0, 0, imgWidth, imgHeight))
	// Remaining code would go here
}",GPT,Same code with different variable names
l0cw_3,l0cw,go,Archimedean spiral,"package main

import (
	""image""
	""image/color""
	""image/png""
	""log""
	""math""
	""os""
)

func main() {
	const (
		imgWidth, imgHeight = 600, 600
		centerX, centerY    = imgWidth / 2, imgHeight / 2
		totalRotations      = 2
		maxRadius           = float64(centerX)
		numSteps            = 360 * totalRotations
		outputFile          = ""alt_spiral.png""
	)

	img := image.NewNRGBA(image.Rect(0, 0, imgWidth, imgHeight))

	// Set the background color to white
	white := color.NRGBA{255, 255, 255, 255}
	for y := 0; y < imgHeight; y++ {
		for x := 0; x < imgWidth; x++ {
			img.Set(x, y, white)
		}
	}

	// Set the spiral color
	spiralColor := color.NRGBA{0, 0, 0, 255}

	// Draw the spiral
	for step := 0; step < numSteps; step++ {
		angle := float64(step) * 2 * math.Pi / float64(numSteps)
		radius := maxRadius * float64(step) / float64(numSteps)
		x := int(centerX + radius*math.Cos(angle))
		y := int(centerY + radius*math.Sin(angle))

		if x >= 0 && x < imgWidth && y >= 0 && y < imgHeight {
			img.Set(x, y, spiralColor)
		}
	}

	// Save the image to a file
	f, err := os.Create(outputFile)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	if err := png.Encode(f, img); err != nil {
		log.Fatal(err)
	}
}",GPT,Code that does the same task but in a different way
l0cw_4,l0cw,java,Archimedean spiral,"import java.awt.*;
import static java.lang.Math.*;
import javax.swing.*;

public class ArchimedeanSpiral extends JPanel {

    public ArchimedeanSpiral() {
        setPreferredSize(new Dimension(640, 640));
        setBackground(Color.white);
    }

    void drawGrid(Graphics2D g) {
        g.setColor(new Color(0xEEEEEE));
        g.setStroke(new BasicStroke(2));

        double angle = toRadians(45);

        int w = getWidth();
        int center = w / 2;
        int margin = 10;
        int numRings = 8;

        int spacing = (w - 2 * margin) / (numRings * 2);

        for (int i = 0; i < numRings; i++) {
            int pos = margin + i * spacing;
            int size = w - (2 * margin + i * 2 * spacing);
            g.drawOval(pos, pos, size, size);

            double ia = i * angle;
            int x2 = center + (int) (cos(ia) * (w - 2 * margin) / 2);
            int y2 = center - (int) (sin(ia) * (w - 2 * margin) / 2);

            g.drawLine(center, center, x2, y2);
        }
    }

    void drawSpiral(Graphics2D g) {
        g.setStroke(new BasicStroke(2));
        g.setColor(Color.orange);

        double degrees = toRadians(0.1);
        double center = getWidth() / 2;
        double end = 360 * 2 * 10 * degrees;
        double a = 0;
        double b = 20;
        double c = 1;

        for (double theta = 0; theta < end; theta += degrees) {
            double r = a + b * pow(theta, 1 / c);
            double x = r * cos(theta);
            double y = r * sin(theta);
            plot(g, (int) (center + x), (int) (center - y));
        }
    }

    void plot(Graphics2D g, int x, int y) {
        g.drawOval(x, y, 1, 1);
    }

    @Override
    public void paintComponent(Graphics gg) {
        super.paintComponent(gg);
        Graphics2D g = (Graphics2D) gg;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);

        drawGrid(g);
        drawSpiral(g);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame f = new JFrame();
            f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            f.setTitle(""Archimedean Spiral"");
            f.setResizable(false);
            f.add(new ArchimedeanSpiral(), BorderLayout.CENTER);
            f.pack();
            f.setLocationRelativeTo(null);
            f.setVisible(true);
        });
    }
}",rosetta.csv,Code that achieves the same task but in a different language
unrelated_1,,python,Unrelated code,"print('Hello, World!')",generated,A code snippet unrelated to any found in the examples
